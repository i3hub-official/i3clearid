
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  status: 'status',
  severity: 'severity',
  metadata: 'metadata',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  agentId: 'agentId',
  targetId: 'targetId',
  targetType: 'targetType'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  surname: 'surname',
  firstName: 'firstName',
  otherName: 'otherName',
  gender: 'gender',
  dob: 'dob',
  email: 'email',
  phone: 'phone',
  nin: 'nin',
  bvn: 'bvn',
  state: 'state',
  lga: 'lga',
  address: 'address',
  emailHash: 'emailHash',
  phoneHash: 'phoneHash',
  ninHash: 'ninHash',
  bvnHash: 'bvnHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  lastLoginAttemptIp: 'lastLoginAttemptIp',
  isActive: 'isActive',
  admittedAt: 'admittedAt',
  deletedAt: 'deletedAt',
  deletionReason: 'deletionReason',
  deactivatedAt: 'deactivatedAt',
  deactivationReason: 'deactivationReason',
  avatarUrl: 'avatarUrl',
  status: 'status'
};

exports.Prisma.AgentProfileScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  email: 'email',
  emailHash: 'emailHash',
  phone: 'phone',
  phoneHash: 'phoneHash',
  pin: 'pin',
  pinHash: 'pinHash',
  passwordHash: 'passwordHash',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  passwordResetAttempts: 'passwordResetAttempts',
  accountLockedUntil: 'accountLockedUntil',
  isLocked: 'isLocked',
  lockoutCount: 'lockoutCount',
  lockedUntil: 'lockedUntil',
  lastPasswordResetAt: 'lastPasswordResetAt',
  avatarUrl: 'avatarUrl',
  failedDeletionAttempts: 'failedDeletionAttempts',
  deletionLockedUntil: 'deletionLockedUntil',
  deletionLockoutCount: 'deletionLockoutCount'
};

exports.Prisma.AgentSessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  agentId: 'agentId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.DeletionScheduleScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  scheduledAt: 'scheduledAt',
  deletionType: 'deletionType',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationStatusScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  emailVerified: 'emailVerified',
  emailVerifiedDate: 'emailVerifiedDate',
  phoneVerified: 'phoneVerified',
  phoneVerifiedDate: 'phoneVerifiedDate',
  ninVerified: 'ninVerified',
  ninVerifiedDate: 'ninVerifiedDate',
  bvnVerified: 'bvnVerified',
  bvnVerifiedDate: 'bvnVerifiedDate',
  documentVerified: 'documentVerified',
  documentVerifiedDate: 'documentVerifiedDate',
  dobVerified: 'dobVerified',
  dobVerifiedDate: 'dobVerifiedDate',
  genderVerified: 'genderVerified',
  genderVerifiedDate: 'genderVerifiedDate',
  nameVerified: 'nameVerified',
  nameVerificationDate: 'nameVerificationDate',
  lastCheckedAt: 'lastCheckedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FailedAttemptScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  attempts: 'attempts'
};

exports.Prisma.FailedDeletionAttemptScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  attempts: 'attempts',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.AccountLockScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  reason: 'reason',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  action: 'action',
  userAgent: 'userAgent'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  tokenHash: 'tokenHash',
  agentId: 'agentId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  agentProfileId: 'agentProfileId'
};

exports.Prisma.PasswordResetEventScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  createdAt: 'createdAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash',
  email: 'email',
  verified: 'verified',
  fullName: 'fullName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bio: 'bio',
  country: 'country',
  state: 'state',
  city: 'city',
  address: 'address',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  hasPin: 'hasPin',
  pinHash: 'pinHash',
  isBanned: 'isBanned',
  passwordChangedAt: 'passwordChangedAt',
  role: 'role'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  role: 'role'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  revoked: 'revoked',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerId: 'providerId',
  agentId: 'agentId',
  createdAt: 'createdAt'
};

exports.Prisma.SessionCleanupLogScalarFieldEnum = {
  id: 'id',
  removed: 'removed',
  runAt: 'runAt'
};

exports.Prisma.SessionCleanupConfigScalarFieldEnum = {
  id: 'id',
  cleanupProbability: 'cleanupProbability',
  maxLifetimeHours: 'maxLifetimeHours',
  lastRunAt: 'lastRunAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AuditAction = exports.$Enums.AuditAction = {
  ACCOUNT_DELETION_REQUEST: 'ACCOUNT_DELETION_REQUEST',
  ACCOUNT_DEACTIVATION: 'ACCOUNT_DEACTIVATION',
  LOGIN_ATTEMPT: 'LOGIN_ATTEMPT',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  PASSWORD_RESET: 'PASSWORD_RESET',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_DELETION: 'DATA_DELETION',
  PERMISSION_CHANGE: 'PERMISSION_CHANGE',
  SYSTEM_EVENT: 'SYSTEM_EVENT'
};

exports.AuditStatus = exports.$Enums.AuditStatus = {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  REVERTED: 'REVERTED'
};

exports.Severity = exports.$Enums.Severity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.UserRoleEnum = exports.$Enums.UserRoleEnum = {
  ADMIN: 'ADMIN',
  AGENT: 'AGENT',
  USER: 'USER'
};

exports.Prisma.ModelName = {
  AuditLog: 'AuditLog',
  Agent: 'Agent',
  AgentProfile: 'AgentProfile',
  AgentSession: 'AgentSession',
  DeletionSchedule: 'DeletionSchedule',
  VerificationStatus: 'VerificationStatus',
  FailedAttempt: 'FailedAttempt',
  FailedDeletionAttempt: 'FailedDeletionAttempt',
  AccountLock: 'AccountLock',
  PasswordResetToken: 'PasswordResetToken',
  PasswordResetEvent: 'PasswordResetEvent',
  User: 'User',
  UserRole: 'UserRole',
  Session: 'Session',
  OAuthAccount: 'OAuthAccount',
  SessionCleanupLog: 'SessionCleanupLog',
  SessionCleanupConfig: 'SessionCleanupConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
