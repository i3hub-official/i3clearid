
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Agent
 * 
 */
export type Agent = $Result.DefaultSelection<Prisma.$AgentPayload>
/**
 * Model AgentProfile
 * 
 */
export type AgentProfile = $Result.DefaultSelection<Prisma.$AgentProfilePayload>
/**
 * Model AgentSession
 * 
 */
export type AgentSession = $Result.DefaultSelection<Prisma.$AgentSessionPayload>
/**
 * Model DeletionSchedule
 * 
 */
export type DeletionSchedule = $Result.DefaultSelection<Prisma.$DeletionSchedulePayload>
/**
 * Model VerificationStatus
 * 
 */
export type VerificationStatus = $Result.DefaultSelection<Prisma.$VerificationStatusPayload>
/**
 * Model FailedAttempt
 * 
 */
export type FailedAttempt = $Result.DefaultSelection<Prisma.$FailedAttemptPayload>
/**
 * Model FailedDeletionAttempt
 * 
 */
export type FailedDeletionAttempt = $Result.DefaultSelection<Prisma.$FailedDeletionAttemptPayload>
/**
 * Model AccountLock
 * 
 */
export type AccountLock = $Result.DefaultSelection<Prisma.$AccountLockPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model PasswordResetEvent
 * 
 */
export type PasswordResetEvent = $Result.DefaultSelection<Prisma.$PasswordResetEventPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model OAuthAccount
 * 
 */
export type OAuthAccount = $Result.DefaultSelection<Prisma.$OAuthAccountPayload>
/**
 * Model SessionCleanupLog
 * 
 */
export type SessionCleanupLog = $Result.DefaultSelection<Prisma.$SessionCleanupLogPayload>
/**
 * Model SessionCleanupConfig
 * 
 */
export type SessionCleanupConfig = $Result.DefaultSelection<Prisma.$SessionCleanupConfigPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuditAction: {
  ACCOUNT_DELETION_REQUEST: 'ACCOUNT_DELETION_REQUEST',
  ACCOUNT_DEACTIVATION: 'ACCOUNT_DEACTIVATION',
  LOGIN_ATTEMPT: 'LOGIN_ATTEMPT',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  PASSWORD_RESET: 'PASSWORD_RESET',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_DELETION: 'DATA_DELETION',
  PERMISSION_CHANGE: 'PERMISSION_CHANGE',
  SYSTEM_EVENT: 'SYSTEM_EVENT'
};

export type AuditAction = (typeof AuditAction)[keyof typeof AuditAction]


export const AuditStatus: {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  REVERTED: 'REVERTED'
};

export type AuditStatus = (typeof AuditStatus)[keyof typeof AuditStatus]


export const Severity: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type Severity = (typeof Severity)[keyof typeof Severity]


export const AgentStatus: {
  ACTIVE: 'ACTIVE',
  DEACTIVATED: 'DEACTIVATED',
  PENDING_DELETION: 'PENDING_DELETION',
  DELETED: 'DELETED'
};

export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus]


export const UserRoleEnum: {
  ADMIN: 'ADMIN',
  AGENT: 'AGENT',
  USER: 'USER'
};

export type UserRoleEnum = (typeof UserRoleEnum)[keyof typeof UserRoleEnum]

}

export type AuditAction = $Enums.AuditAction

export const AuditAction: typeof $Enums.AuditAction

export type AuditStatus = $Enums.AuditStatus

export const AuditStatus: typeof $Enums.AuditStatus

export type Severity = $Enums.Severity

export const Severity: typeof $Enums.Severity

export type AgentStatus = $Enums.AgentStatus

export const AgentStatus: typeof $Enums.AgentStatus

export type UserRoleEnum = $Enums.UserRoleEnum

export const UserRoleEnum: typeof $Enums.UserRoleEnum

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AuditLogs
 * const auditLogs = await prisma.auditLog.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AuditLogs
   * const auditLogs = await prisma.auditLog.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agentProfile`: Exposes CRUD operations for the **AgentProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentProfiles
    * const agentProfiles = await prisma.agentProfile.findMany()
    * ```
    */
  get agentProfile(): Prisma.AgentProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agentSession`: Exposes CRUD operations for the **AgentSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentSessions
    * const agentSessions = await prisma.agentSession.findMany()
    * ```
    */
  get agentSession(): Prisma.AgentSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deletionSchedule`: Exposes CRUD operations for the **DeletionSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeletionSchedules
    * const deletionSchedules = await prisma.deletionSchedule.findMany()
    * ```
    */
  get deletionSchedule(): Prisma.DeletionScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationStatus`: Exposes CRUD operations for the **VerificationStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationStatuses
    * const verificationStatuses = await prisma.verificationStatus.findMany()
    * ```
    */
  get verificationStatus(): Prisma.VerificationStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.failedAttempt`: Exposes CRUD operations for the **FailedAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FailedAttempts
    * const failedAttempts = await prisma.failedAttempt.findMany()
    * ```
    */
  get failedAttempt(): Prisma.FailedAttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.failedDeletionAttempt`: Exposes CRUD operations for the **FailedDeletionAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FailedDeletionAttempts
    * const failedDeletionAttempts = await prisma.failedDeletionAttempt.findMany()
    * ```
    */
  get failedDeletionAttempt(): Prisma.FailedDeletionAttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountLock`: Exposes CRUD operations for the **AccountLock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountLocks
    * const accountLocks = await prisma.accountLock.findMany()
    * ```
    */
  get accountLock(): Prisma.AccountLockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetEvent`: Exposes CRUD operations for the **PasswordResetEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetEvents
    * const passwordResetEvents = await prisma.passwordResetEvent.findMany()
    * ```
    */
  get passwordResetEvent(): Prisma.PasswordResetEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oAuthAccount`: Exposes CRUD operations for the **OAuthAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OAuthAccounts
    * const oAuthAccounts = await prisma.oAuthAccount.findMany()
    * ```
    */
  get oAuthAccount(): Prisma.OAuthAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionCleanupLog`: Exposes CRUD operations for the **SessionCleanupLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionCleanupLogs
    * const sessionCleanupLogs = await prisma.sessionCleanupLog.findMany()
    * ```
    */
  get sessionCleanupLog(): Prisma.SessionCleanupLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionCleanupConfig`: Exposes CRUD operations for the **SessionCleanupConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionCleanupConfigs
    * const sessionCleanupConfigs = await prisma.sessionCleanupConfig.findMany()
    * ```
    */
  get sessionCleanupConfig(): Prisma.SessionCleanupConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AuditLog: 'AuditLog',
    Agent: 'Agent',
    AgentProfile: 'AgentProfile',
    AgentSession: 'AgentSession',
    DeletionSchedule: 'DeletionSchedule',
    VerificationStatus: 'VerificationStatus',
    FailedAttempt: 'FailedAttempt',
    FailedDeletionAttempt: 'FailedDeletionAttempt',
    AccountLock: 'AccountLock',
    PasswordResetToken: 'PasswordResetToken',
    PasswordResetEvent: 'PasswordResetEvent',
    User: 'User',
    UserRole: 'UserRole',
    Session: 'Session',
    OAuthAccount: 'OAuthAccount',
    SessionCleanupLog: 'SessionCleanupLog',
    SessionCleanupConfig: 'SessionCleanupConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "auditLog" | "agent" | "agentProfile" | "agentSession" | "deletionSchedule" | "verificationStatus" | "failedAttempt" | "failedDeletionAttempt" | "accountLock" | "passwordResetToken" | "passwordResetEvent" | "user" | "userRole" | "session" | "oAuthAccount" | "sessionCleanupLog" | "sessionCleanupConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Agent: {
        payload: Prisma.$AgentPayload<ExtArgs>
        fields: Prisma.AgentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      AgentProfile: {
        payload: Prisma.$AgentProfilePayload<ExtArgs>
        fields: Prisma.AgentProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          findFirst: {
            args: Prisma.AgentProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          findMany: {
            args: Prisma.AgentProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>[]
          }
          create: {
            args: Prisma.AgentProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          createMany: {
            args: Prisma.AgentProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>[]
          }
          delete: {
            args: Prisma.AgentProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          update: {
            args: Prisma.AgentProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          deleteMany: {
            args: Prisma.AgentProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgentProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>[]
          }
          upsert: {
            args: Prisma.AgentProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentProfilePayload>
          }
          aggregate: {
            args: Prisma.AgentProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentProfile>
          }
          groupBy: {
            args: Prisma.AgentProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentProfileCountArgs<ExtArgs>
            result: $Utils.Optional<AgentProfileCountAggregateOutputType> | number
          }
        }
      }
      AgentSession: {
        payload: Prisma.$AgentSessionPayload<ExtArgs>
        fields: Prisma.AgentSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          findFirst: {
            args: Prisma.AgentSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          findMany: {
            args: Prisma.AgentSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>[]
          }
          create: {
            args: Prisma.AgentSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          createMany: {
            args: Prisma.AgentSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>[]
          }
          delete: {
            args: Prisma.AgentSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          update: {
            args: Prisma.AgentSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          deleteMany: {
            args: Prisma.AgentSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgentSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>[]
          }
          upsert: {
            args: Prisma.AgentSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentSessionPayload>
          }
          aggregate: {
            args: Prisma.AgentSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentSession>
          }
          groupBy: {
            args: Prisma.AgentSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentSessionCountArgs<ExtArgs>
            result: $Utils.Optional<AgentSessionCountAggregateOutputType> | number
          }
        }
      }
      DeletionSchedule: {
        payload: Prisma.$DeletionSchedulePayload<ExtArgs>
        fields: Prisma.DeletionScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeletionScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeletionScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          findFirst: {
            args: Prisma.DeletionScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeletionScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          findMany: {
            args: Prisma.DeletionScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>[]
          }
          create: {
            args: Prisma.DeletionScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          createMany: {
            args: Prisma.DeletionScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeletionScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>[]
          }
          delete: {
            args: Prisma.DeletionScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          update: {
            args: Prisma.DeletionScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          deleteMany: {
            args: Prisma.DeletionScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeletionScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeletionScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>[]
          }
          upsert: {
            args: Prisma.DeletionScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeletionSchedulePayload>
          }
          aggregate: {
            args: Prisma.DeletionScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeletionSchedule>
          }
          groupBy: {
            args: Prisma.DeletionScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeletionScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeletionScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<DeletionScheduleCountAggregateOutputType> | number
          }
        }
      }
      VerificationStatus: {
        payload: Prisma.$VerificationStatusPayload<ExtArgs>
        fields: Prisma.VerificationStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          findFirst: {
            args: Prisma.VerificationStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          findMany: {
            args: Prisma.VerificationStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>[]
          }
          create: {
            args: Prisma.VerificationStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          createMany: {
            args: Prisma.VerificationStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>[]
          }
          delete: {
            args: Prisma.VerificationStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          update: {
            args: Prisma.VerificationStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          deleteMany: {
            args: Prisma.VerificationStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>[]
          }
          upsert: {
            args: Prisma.VerificationStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationStatusPayload>
          }
          aggregate: {
            args: Prisma.VerificationStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationStatus>
          }
          groupBy: {
            args: Prisma.VerificationStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationStatusCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationStatusCountAggregateOutputType> | number
          }
        }
      }
      FailedAttempt: {
        payload: Prisma.$FailedAttemptPayload<ExtArgs>
        fields: Prisma.FailedAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FailedAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FailedAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          findFirst: {
            args: Prisma.FailedAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FailedAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          findMany: {
            args: Prisma.FailedAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>[]
          }
          create: {
            args: Prisma.FailedAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          createMany: {
            args: Prisma.FailedAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FailedAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>[]
          }
          delete: {
            args: Prisma.FailedAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          update: {
            args: Prisma.FailedAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          deleteMany: {
            args: Prisma.FailedAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FailedAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FailedAttemptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>[]
          }
          upsert: {
            args: Prisma.FailedAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedAttemptPayload>
          }
          aggregate: {
            args: Prisma.FailedAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFailedAttempt>
          }
          groupBy: {
            args: Prisma.FailedAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<FailedAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.FailedAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<FailedAttemptCountAggregateOutputType> | number
          }
        }
      }
      FailedDeletionAttempt: {
        payload: Prisma.$FailedDeletionAttemptPayload<ExtArgs>
        fields: Prisma.FailedDeletionAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FailedDeletionAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FailedDeletionAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          findFirst: {
            args: Prisma.FailedDeletionAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FailedDeletionAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          findMany: {
            args: Prisma.FailedDeletionAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>[]
          }
          create: {
            args: Prisma.FailedDeletionAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          createMany: {
            args: Prisma.FailedDeletionAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FailedDeletionAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>[]
          }
          delete: {
            args: Prisma.FailedDeletionAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          update: {
            args: Prisma.FailedDeletionAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          deleteMany: {
            args: Prisma.FailedDeletionAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FailedDeletionAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FailedDeletionAttemptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>[]
          }
          upsert: {
            args: Prisma.FailedDeletionAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailedDeletionAttemptPayload>
          }
          aggregate: {
            args: Prisma.FailedDeletionAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFailedDeletionAttempt>
          }
          groupBy: {
            args: Prisma.FailedDeletionAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<FailedDeletionAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.FailedDeletionAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<FailedDeletionAttemptCountAggregateOutputType> | number
          }
        }
      }
      AccountLock: {
        payload: Prisma.$AccountLockPayload<ExtArgs>
        fields: Prisma.AccountLockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountLockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountLockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          findFirst: {
            args: Prisma.AccountLockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountLockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          findMany: {
            args: Prisma.AccountLockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>[]
          }
          create: {
            args: Prisma.AccountLockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          createMany: {
            args: Prisma.AccountLockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountLockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>[]
          }
          delete: {
            args: Prisma.AccountLockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          update: {
            args: Prisma.AccountLockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          deleteMany: {
            args: Prisma.AccountLockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountLockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountLockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>[]
          }
          upsert: {
            args: Prisma.AccountLockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLockPayload>
          }
          aggregate: {
            args: Prisma.AccountLockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountLock>
          }
          groupBy: {
            args: Prisma.AccountLockGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountLockGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountLockCountArgs<ExtArgs>
            result: $Utils.Optional<AccountLockCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetEvent: {
        payload: Prisma.$PasswordResetEventPayload<ExtArgs>
        fields: Prisma.PasswordResetEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          findMany: {
            args: Prisma.PasswordResetEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>[]
          }
          create: {
            args: Prisma.PasswordResetEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          createMany: {
            args: Prisma.PasswordResetEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          update: {
            args: Prisma.PasswordResetEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetEventPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetEvent>
          }
          groupBy: {
            args: Prisma.PasswordResetEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetEventCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetEventCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      OAuthAccount: {
        payload: Prisma.$OAuthAccountPayload<ExtArgs>
        fields: Prisma.OAuthAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OAuthAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OAuthAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          findFirst: {
            args: Prisma.OAuthAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OAuthAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          findMany: {
            args: Prisma.OAuthAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>[]
          }
          create: {
            args: Prisma.OAuthAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          createMany: {
            args: Prisma.OAuthAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OAuthAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>[]
          }
          delete: {
            args: Prisma.OAuthAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          update: {
            args: Prisma.OAuthAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          deleteMany: {
            args: Prisma.OAuthAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OAuthAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OAuthAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>[]
          }
          upsert: {
            args: Prisma.OAuthAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthAccountPayload>
          }
          aggregate: {
            args: Prisma.OAuthAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOAuthAccount>
          }
          groupBy: {
            args: Prisma.OAuthAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<OAuthAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.OAuthAccountCountArgs<ExtArgs>
            result: $Utils.Optional<OAuthAccountCountAggregateOutputType> | number
          }
        }
      }
      SessionCleanupLog: {
        payload: Prisma.$SessionCleanupLogPayload<ExtArgs>
        fields: Prisma.SessionCleanupLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionCleanupLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionCleanupLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          findFirst: {
            args: Prisma.SessionCleanupLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionCleanupLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          findMany: {
            args: Prisma.SessionCleanupLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>[]
          }
          create: {
            args: Prisma.SessionCleanupLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          createMany: {
            args: Prisma.SessionCleanupLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCleanupLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>[]
          }
          delete: {
            args: Prisma.SessionCleanupLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          update: {
            args: Prisma.SessionCleanupLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          deleteMany: {
            args: Prisma.SessionCleanupLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionCleanupLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionCleanupLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>[]
          }
          upsert: {
            args: Prisma.SessionCleanupLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupLogPayload>
          }
          aggregate: {
            args: Prisma.SessionCleanupLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionCleanupLog>
          }
          groupBy: {
            args: Prisma.SessionCleanupLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionCleanupLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCleanupLogCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCleanupLogCountAggregateOutputType> | number
          }
        }
      }
      SessionCleanupConfig: {
        payload: Prisma.$SessionCleanupConfigPayload<ExtArgs>
        fields: Prisma.SessionCleanupConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionCleanupConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionCleanupConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          findFirst: {
            args: Prisma.SessionCleanupConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionCleanupConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          findMany: {
            args: Prisma.SessionCleanupConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>[]
          }
          create: {
            args: Prisma.SessionCleanupConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          createMany: {
            args: Prisma.SessionCleanupConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCleanupConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>[]
          }
          delete: {
            args: Prisma.SessionCleanupConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          update: {
            args: Prisma.SessionCleanupConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          deleteMany: {
            args: Prisma.SessionCleanupConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionCleanupConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionCleanupConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>[]
          }
          upsert: {
            args: Prisma.SessionCleanupConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionCleanupConfigPayload>
          }
          aggregate: {
            args: Prisma.SessionCleanupConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionCleanupConfig>
          }
          groupBy: {
            args: Prisma.SessionCleanupConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionCleanupConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCleanupConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCleanupConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    auditLog?: AuditLogOmit
    agent?: AgentOmit
    agentProfile?: AgentProfileOmit
    agentSession?: AgentSessionOmit
    deletionSchedule?: DeletionScheduleOmit
    verificationStatus?: VerificationStatusOmit
    failedAttempt?: FailedAttemptOmit
    failedDeletionAttempt?: FailedDeletionAttemptOmit
    accountLock?: AccountLockOmit
    passwordResetToken?: PasswordResetTokenOmit
    passwordResetEvent?: PasswordResetEventOmit
    user?: UserOmit
    userRole?: UserRoleOmit
    session?: SessionOmit
    oAuthAccount?: OAuthAccountOmit
    sessionCleanupLog?: SessionCleanupLogOmit
    sessionCleanupConfig?: SessionCleanupConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AgentCountOutputType
   */

  export type AgentCountOutputType = {
    sessions: number
    oauthAccounts: number
    PasswordResetToken: number
    PasswordResetEvent: number
    AuditLog: number
    DeletionSchedule: number
    FailedAttempt: number
    FailedDeletionAttempt: number
    VerificationStatus: number
  }

  export type AgentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | AgentCountOutputTypeCountSessionsArgs
    oauthAccounts?: boolean | AgentCountOutputTypeCountOauthAccountsArgs
    PasswordResetToken?: boolean | AgentCountOutputTypeCountPasswordResetTokenArgs
    PasswordResetEvent?: boolean | AgentCountOutputTypeCountPasswordResetEventArgs
    AuditLog?: boolean | AgentCountOutputTypeCountAuditLogArgs
    DeletionSchedule?: boolean | AgentCountOutputTypeCountDeletionScheduleArgs
    FailedAttempt?: boolean | AgentCountOutputTypeCountFailedAttemptArgs
    FailedDeletionAttempt?: boolean | AgentCountOutputTypeCountFailedDeletionAttemptArgs
    VerificationStatus?: boolean | AgentCountOutputTypeCountVerificationStatusArgs
  }

  // Custom InputTypes
  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentCountOutputType
     */
    select?: AgentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentSessionWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountOauthAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OAuthAccountWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountPasswordResetTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountPasswordResetEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetEventWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountDeletionScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeletionScheduleWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountFailedAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailedAttemptWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountFailedDeletionAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailedDeletionAttemptWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountVerificationStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationStatusWhereInput
  }


  /**
   * Count Type AgentProfileCountOutputType
   */

  export type AgentProfileCountOutputType = {
    PasswordResetToken: number
  }

  export type AgentProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PasswordResetToken?: boolean | AgentProfileCountOutputTypeCountPasswordResetTokenArgs
  }

  // Custom InputTypes
  /**
   * AgentProfileCountOutputType without action
   */
  export type AgentProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfileCountOutputType
     */
    select?: AgentProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentProfileCountOutputType without action
   */
  export type AgentProfileCountOutputTypeCountPasswordResetTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: $Enums.AuditAction | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    status: $Enums.AuditStatus | null
    severity: $Enums.Severity | null
    createdAt: Date | null
    expiresAt: Date | null
    agentId: string | null
    targetId: string | null
    targetType: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: $Enums.AuditAction | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    status: $Enums.AuditStatus | null
    severity: $Enums.Severity | null
    createdAt: Date | null
    expiresAt: Date | null
    agentId: string | null
    targetId: string | null
    targetType: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    details: number
    ipAddress: number
    userAgent: number
    status: number
    severity: number
    metadata: number
    createdAt: number
    expiresAt: number
    agentId: number
    targetId: number
    targetType: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    severity?: true
    createdAt?: true
    expiresAt?: true
    agentId?: true
    targetId?: true
    targetType?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    severity?: true
    createdAt?: true
    expiresAt?: true
    agentId?: true
    targetId?: true
    targetType?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    status?: true
    severity?: true
    metadata?: true
    createdAt?: true
    expiresAt?: true
    agentId?: true
    targetId?: true
    targetType?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: $Enums.AuditAction
    details: string | null
    ipAddress: string
    userAgent: string
    status: $Enums.AuditStatus
    severity: $Enums.Severity
    metadata: JsonValue | null
    createdAt: Date
    expiresAt: Date | null
    agentId: string | null
    targetId: string | null
    targetType: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    severity?: boolean
    metadata?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    agentId?: boolean
    targetId?: boolean
    targetType?: boolean
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    severity?: boolean
    metadata?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    agentId?: boolean
    targetId?: boolean
    targetType?: boolean
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    severity?: boolean
    metadata?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    agentId?: boolean
    targetId?: boolean
    targetType?: boolean
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    status?: boolean
    severity?: boolean
    metadata?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    agentId?: boolean
    targetId?: boolean
    targetType?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "details" | "ipAddress" | "userAgent" | "status" | "severity" | "metadata" | "createdAt" | "expiresAt" | "agentId" | "targetId" | "targetType", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AuditLog$agentArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: $Enums.AuditAction
      details: string | null
      ipAddress: string
      userAgent: string
      status: $Enums.AuditStatus
      severity: $Enums.Severity
      metadata: Prisma.JsonValue | null
      createdAt: Date
      expiresAt: Date | null
      agentId: string | null
      targetId: string | null
      targetType: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AuditLog$agentArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$agentArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'AuditAction'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly status: FieldRef<"AuditLog", 'AuditStatus'>
    readonly severity: FieldRef<"AuditLog", 'Severity'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
    readonly expiresAt: FieldRef<"AuditLog", 'DateTime'>
    readonly agentId: FieldRef<"AuditLog", 'String'>
    readonly targetId: FieldRef<"AuditLog", 'String'>
    readonly targetType: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.agent
   */
  export type AuditLog$agentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Agent
   */

  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentMinAggregateOutputType = {
    id: string | null
    fieldId: string | null
    surname: string | null
    firstName: string | null
    otherName: string | null
    gender: string | null
    dob: Date | null
    email: string | null
    phone: string | null
    nin: string | null
    bvn: string | null
    state: string | null
    lga: string | null
    address: string | null
    emailHash: string | null
    phoneHash: string | null
    ninHash: string | null
    bvnHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    lastLoginAttemptIp: string | null
    isActive: boolean | null
    admittedAt: Date | null
    deletedAt: Date | null
    deletionReason: string | null
    deactivatedAt: Date | null
    deactivationReason: string | null
    avatarUrl: string | null
    status: string | null
  }

  export type AgentMaxAggregateOutputType = {
    id: string | null
    fieldId: string | null
    surname: string | null
    firstName: string | null
    otherName: string | null
    gender: string | null
    dob: Date | null
    email: string | null
    phone: string | null
    nin: string | null
    bvn: string | null
    state: string | null
    lga: string | null
    address: string | null
    emailHash: string | null
    phoneHash: string | null
    ninHash: string | null
    bvnHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    lastLoginAttemptIp: string | null
    isActive: boolean | null
    admittedAt: Date | null
    deletedAt: Date | null
    deletionReason: string | null
    deactivatedAt: Date | null
    deactivationReason: string | null
    avatarUrl: string | null
    status: string | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    fieldId: number
    surname: number
    firstName: number
    otherName: number
    gender: number
    dob: number
    email: number
    phone: number
    nin: number
    bvn: number
    state: number
    lga: number
    address: number
    emailHash: number
    phoneHash: number
    ninHash: number
    bvnHash: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    lastLoginAttemptIp: number
    isActive: number
    admittedAt: number
    deletedAt: number
    deletionReason: number
    deactivatedAt: number
    deactivationReason: number
    avatarUrl: number
    status: number
    _all: number
  }


  export type AgentMinAggregateInputType = {
    id?: true
    fieldId?: true
    surname?: true
    firstName?: true
    otherName?: true
    gender?: true
    dob?: true
    email?: true
    phone?: true
    nin?: true
    bvn?: true
    state?: true
    lga?: true
    address?: true
    emailHash?: true
    phoneHash?: true
    ninHash?: true
    bvnHash?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    lastLoginAttemptIp?: true
    isActive?: true
    admittedAt?: true
    deletedAt?: true
    deletionReason?: true
    deactivatedAt?: true
    deactivationReason?: true
    avatarUrl?: true
    status?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    fieldId?: true
    surname?: true
    firstName?: true
    otherName?: true
    gender?: true
    dob?: true
    email?: true
    phone?: true
    nin?: true
    bvn?: true
    state?: true
    lga?: true
    address?: true
    emailHash?: true
    phoneHash?: true
    ninHash?: true
    bvnHash?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    lastLoginAttemptIp?: true
    isActive?: true
    admittedAt?: true
    deletedAt?: true
    deletionReason?: true
    deactivatedAt?: true
    deactivationReason?: true
    avatarUrl?: true
    status?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    fieldId?: true
    surname?: true
    firstName?: true
    otherName?: true
    gender?: true
    dob?: true
    email?: true
    phone?: true
    nin?: true
    bvn?: true
    state?: true
    lga?: true
    address?: true
    emailHash?: true
    phoneHash?: true
    ninHash?: true
    bvnHash?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    lastLoginAttemptIp?: true
    isActive?: true
    admittedAt?: true
    deletedAt?: true
    deletionReason?: true
    deactivatedAt?: true
    deactivationReason?: true
    avatarUrl?: true
    status?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithAggregationInput | AgentOrderByWithAggregationInput[]
    by: AgentScalarFieldEnum[] | AgentScalarFieldEnum
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }

  export type AgentGroupByOutputType = {
    id: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender: string | null
    dob: Date | null
    email: string
    phone: string
    nin: string | null
    bvn: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash: string | null
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    lastLoginAttemptIp: string | null
    isActive: boolean
    admittedAt: Date | null
    deletedAt: Date | null
    deletionReason: string | null
    deactivatedAt: Date | null
    deactivationReason: string | null
    avatarUrl: string
    status: string
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    surname?: boolean
    firstName?: boolean
    otherName?: boolean
    gender?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nin?: boolean
    bvn?: boolean
    state?: boolean
    lga?: boolean
    address?: boolean
    emailHash?: boolean
    phoneHash?: boolean
    ninHash?: boolean
    bvnHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    lastLoginAttemptIp?: boolean
    isActive?: boolean
    admittedAt?: boolean
    deletedAt?: boolean
    deletionReason?: boolean
    deactivatedAt?: boolean
    deactivationReason?: boolean
    avatarUrl?: boolean
    status?: boolean
    profile?: boolean | Agent$profileArgs<ExtArgs>
    sessions?: boolean | Agent$sessionsArgs<ExtArgs>
    oauthAccounts?: boolean | Agent$oauthAccountsArgs<ExtArgs>
    PasswordResetToken?: boolean | Agent$PasswordResetTokenArgs<ExtArgs>
    PasswordResetEvent?: boolean | Agent$PasswordResetEventArgs<ExtArgs>
    AuditLog?: boolean | Agent$AuditLogArgs<ExtArgs>
    DeletionSchedule?: boolean | Agent$DeletionScheduleArgs<ExtArgs>
    AccountLock?: boolean | Agent$AccountLockArgs<ExtArgs>
    FailedAttempt?: boolean | Agent$FailedAttemptArgs<ExtArgs>
    FailedDeletionAttempt?: boolean | Agent$FailedDeletionAttemptArgs<ExtArgs>
    VerificationStatus?: boolean | Agent$VerificationStatusArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    surname?: boolean
    firstName?: boolean
    otherName?: boolean
    gender?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nin?: boolean
    bvn?: boolean
    state?: boolean
    lga?: boolean
    address?: boolean
    emailHash?: boolean
    phoneHash?: boolean
    ninHash?: boolean
    bvnHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    lastLoginAttemptIp?: boolean
    isActive?: boolean
    admittedAt?: boolean
    deletedAt?: boolean
    deletionReason?: boolean
    deactivatedAt?: boolean
    deactivationReason?: boolean
    avatarUrl?: boolean
    status?: boolean
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    surname?: boolean
    firstName?: boolean
    otherName?: boolean
    gender?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nin?: boolean
    bvn?: boolean
    state?: boolean
    lga?: boolean
    address?: boolean
    emailHash?: boolean
    phoneHash?: boolean
    ninHash?: boolean
    bvnHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    lastLoginAttemptIp?: boolean
    isActive?: boolean
    admittedAt?: boolean
    deletedAt?: boolean
    deletionReason?: boolean
    deactivatedAt?: boolean
    deactivationReason?: boolean
    avatarUrl?: boolean
    status?: boolean
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectScalar = {
    id?: boolean
    fieldId?: boolean
    surname?: boolean
    firstName?: boolean
    otherName?: boolean
    gender?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nin?: boolean
    bvn?: boolean
    state?: boolean
    lga?: boolean
    address?: boolean
    emailHash?: boolean
    phoneHash?: boolean
    ninHash?: boolean
    bvnHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    lastLoginAttemptIp?: boolean
    isActive?: boolean
    admittedAt?: boolean
    deletedAt?: boolean
    deletionReason?: boolean
    deactivatedAt?: boolean
    deactivationReason?: boolean
    avatarUrl?: boolean
    status?: boolean
  }

  export type AgentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fieldId" | "surname" | "firstName" | "otherName" | "gender" | "dob" | "email" | "phone" | "nin" | "bvn" | "state" | "lga" | "address" | "emailHash" | "phoneHash" | "ninHash" | "bvnHash" | "createdAt" | "updatedAt" | "lastLoginAt" | "lastLoginAttemptIp" | "isActive" | "admittedAt" | "deletedAt" | "deletionReason" | "deactivatedAt" | "deactivationReason" | "avatarUrl" | "status", ExtArgs["result"]["agent"]>
  export type AgentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Agent$profileArgs<ExtArgs>
    sessions?: boolean | Agent$sessionsArgs<ExtArgs>
    oauthAccounts?: boolean | Agent$oauthAccountsArgs<ExtArgs>
    PasswordResetToken?: boolean | Agent$PasswordResetTokenArgs<ExtArgs>
    PasswordResetEvent?: boolean | Agent$PasswordResetEventArgs<ExtArgs>
    AuditLog?: boolean | Agent$AuditLogArgs<ExtArgs>
    DeletionSchedule?: boolean | Agent$DeletionScheduleArgs<ExtArgs>
    AccountLock?: boolean | Agent$AccountLockArgs<ExtArgs>
    FailedAttempt?: boolean | Agent$FailedAttemptArgs<ExtArgs>
    FailedDeletionAttempt?: boolean | Agent$FailedDeletionAttemptArgs<ExtArgs>
    VerificationStatus?: boolean | Agent$VerificationStatusArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AgentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agent"
    objects: {
      profile: Prisma.$AgentProfilePayload<ExtArgs> | null
      sessions: Prisma.$AgentSessionPayload<ExtArgs>[]
      oauthAccounts: Prisma.$OAuthAccountPayload<ExtArgs>[]
      PasswordResetToken: Prisma.$PasswordResetTokenPayload<ExtArgs>[]
      PasswordResetEvent: Prisma.$PasswordResetEventPayload<ExtArgs>[]
      AuditLog: Prisma.$AuditLogPayload<ExtArgs>[]
      DeletionSchedule: Prisma.$DeletionSchedulePayload<ExtArgs>[]
      AccountLock: Prisma.$AccountLockPayload<ExtArgs> | null
      FailedAttempt: Prisma.$FailedAttemptPayload<ExtArgs>[]
      FailedDeletionAttempt: Prisma.$FailedDeletionAttemptPayload<ExtArgs>[]
      VerificationStatus: Prisma.$VerificationStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fieldId: string
      surname: string
      firstName: string
      otherName: string
      gender: string | null
      dob: Date | null
      email: string
      phone: string
      nin: string | null
      bvn: string | null
      state: string
      lga: string
      address: string
      emailHash: string
      phoneHash: string
      ninHash: string
      bvnHash: string | null
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
      lastLoginAttemptIp: string | null
      isActive: boolean
      admittedAt: Date | null
      deletedAt: Date | null
      deletionReason: string | null
      deactivatedAt: Date | null
      deactivationReason: string | null
      avatarUrl: string
      status: string
    }, ExtArgs["result"]["agent"]>
    composites: {}
  }

  type AgentGetPayload<S extends boolean | null | undefined | AgentDefaultArgs> = $Result.GetResult<Prisma.$AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentFindUniqueArgs>(args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentFindFirstArgs>(args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentFindManyArgs>(args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
     */
    create<T extends AgentCreateArgs>(args: SelectSubset<T, AgentCreateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agents.
     * @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentCreateManyArgs>(args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agents and returns the data saved in the database.
     * @param {AgentCreateManyAndReturnArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
     */
    delete<T extends AgentDeleteArgs>(args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentUpdateArgs>(args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDeleteManyArgs>(args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentUpdateManyArgs>(args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents and returns the data updated in the database.
     * @param {AgentUpdateManyAndReturnArgs} args - Arguments to update many Agents.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgentUpdateManyAndReturnArgs>(args: SelectSubset<T, AgentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
     */
    upsert<T extends AgentUpsertArgs>(args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agent model
   */
  readonly fields: AgentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends Agent$profileArgs<ExtArgs> = {}>(args?: Subset<T, Agent$profileArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sessions<T extends Agent$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Agent$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    oauthAccounts<T extends Agent$oauthAccountsArgs<ExtArgs> = {}>(args?: Subset<T, Agent$oauthAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PasswordResetToken<T extends Agent$PasswordResetTokenArgs<ExtArgs> = {}>(args?: Subset<T, Agent$PasswordResetTokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PasswordResetEvent<T extends Agent$PasswordResetEventArgs<ExtArgs> = {}>(args?: Subset<T, Agent$PasswordResetEventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AuditLog<T extends Agent$AuditLogArgs<ExtArgs> = {}>(args?: Subset<T, Agent$AuditLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DeletionSchedule<T extends Agent$DeletionScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Agent$DeletionScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AccountLock<T extends Agent$AccountLockArgs<ExtArgs> = {}>(args?: Subset<T, Agent$AccountLockArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    FailedAttempt<T extends Agent$FailedAttemptArgs<ExtArgs> = {}>(args?: Subset<T, Agent$FailedAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FailedDeletionAttempt<T extends Agent$FailedDeletionAttemptArgs<ExtArgs> = {}>(args?: Subset<T, Agent$FailedDeletionAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    VerificationStatus<T extends Agent$VerificationStatusArgs<ExtArgs> = {}>(args?: Subset<T, Agent$VerificationStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agent model
   */
  interface AgentFieldRefs {
    readonly id: FieldRef<"Agent", 'String'>
    readonly fieldId: FieldRef<"Agent", 'String'>
    readonly surname: FieldRef<"Agent", 'String'>
    readonly firstName: FieldRef<"Agent", 'String'>
    readonly otherName: FieldRef<"Agent", 'String'>
    readonly gender: FieldRef<"Agent", 'String'>
    readonly dob: FieldRef<"Agent", 'DateTime'>
    readonly email: FieldRef<"Agent", 'String'>
    readonly phone: FieldRef<"Agent", 'String'>
    readonly nin: FieldRef<"Agent", 'String'>
    readonly bvn: FieldRef<"Agent", 'String'>
    readonly state: FieldRef<"Agent", 'String'>
    readonly lga: FieldRef<"Agent", 'String'>
    readonly address: FieldRef<"Agent", 'String'>
    readonly emailHash: FieldRef<"Agent", 'String'>
    readonly phoneHash: FieldRef<"Agent", 'String'>
    readonly ninHash: FieldRef<"Agent", 'String'>
    readonly bvnHash: FieldRef<"Agent", 'String'>
    readonly createdAt: FieldRef<"Agent", 'DateTime'>
    readonly updatedAt: FieldRef<"Agent", 'DateTime'>
    readonly lastLoginAt: FieldRef<"Agent", 'DateTime'>
    readonly lastLoginAttemptIp: FieldRef<"Agent", 'String'>
    readonly isActive: FieldRef<"Agent", 'Boolean'>
    readonly admittedAt: FieldRef<"Agent", 'DateTime'>
    readonly deletedAt: FieldRef<"Agent", 'DateTime'>
    readonly deletionReason: FieldRef<"Agent", 'String'>
    readonly deactivatedAt: FieldRef<"Agent", 'DateTime'>
    readonly deactivationReason: FieldRef<"Agent", 'String'>
    readonly avatarUrl: FieldRef<"Agent", 'String'>
    readonly status: FieldRef<"Agent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Agent findUnique
   */
  export type AgentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findFirst
   */
  export type AgentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }

  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agent createManyAndReturn
   */
  export type AgentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to update.
     */
    limit?: number
  }

  /**
   * Agent updateManyAndReturn
   */
  export type AgentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to update.
     */
    limit?: number
  }

  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }

  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to delete.
     */
    limit?: number
  }

  /**
   * Agent.profile
   */
  export type Agent$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    where?: AgentProfileWhereInput
  }

  /**
   * Agent.sessions
   */
  export type Agent$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    where?: AgentSessionWhereInput
    orderBy?: AgentSessionOrderByWithRelationInput | AgentSessionOrderByWithRelationInput[]
    cursor?: AgentSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentSessionScalarFieldEnum | AgentSessionScalarFieldEnum[]
  }

  /**
   * Agent.oauthAccounts
   */
  export type Agent$oauthAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    where?: OAuthAccountWhereInput
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    cursor?: OAuthAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * Agent.PasswordResetToken
   */
  export type Agent$PasswordResetTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    cursor?: PasswordResetTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * Agent.PasswordResetEvent
   */
  export type Agent$PasswordResetEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    where?: PasswordResetEventWhereInput
    orderBy?: PasswordResetEventOrderByWithRelationInput | PasswordResetEventOrderByWithRelationInput[]
    cursor?: PasswordResetEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetEventScalarFieldEnum | PasswordResetEventScalarFieldEnum[]
  }

  /**
   * Agent.AuditLog
   */
  export type Agent$AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Agent.DeletionSchedule
   */
  export type Agent$DeletionScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    where?: DeletionScheduleWhereInput
    orderBy?: DeletionScheduleOrderByWithRelationInput | DeletionScheduleOrderByWithRelationInput[]
    cursor?: DeletionScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeletionScheduleScalarFieldEnum | DeletionScheduleScalarFieldEnum[]
  }

  /**
   * Agent.AccountLock
   */
  export type Agent$AccountLockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    where?: AccountLockWhereInput
  }

  /**
   * Agent.FailedAttempt
   */
  export type Agent$FailedAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    where?: FailedAttemptWhereInput
    orderBy?: FailedAttemptOrderByWithRelationInput | FailedAttemptOrderByWithRelationInput[]
    cursor?: FailedAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FailedAttemptScalarFieldEnum | FailedAttemptScalarFieldEnum[]
  }

  /**
   * Agent.FailedDeletionAttempt
   */
  export type Agent$FailedDeletionAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    where?: FailedDeletionAttemptWhereInput
    orderBy?: FailedDeletionAttemptOrderByWithRelationInput | FailedDeletionAttemptOrderByWithRelationInput[]
    cursor?: FailedDeletionAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FailedDeletionAttemptScalarFieldEnum | FailedDeletionAttemptScalarFieldEnum[]
  }

  /**
   * Agent.VerificationStatus
   */
  export type Agent$VerificationStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    where?: VerificationStatusWhereInput
    orderBy?: VerificationStatusOrderByWithRelationInput | VerificationStatusOrderByWithRelationInput[]
    cursor?: VerificationStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificationStatusScalarFieldEnum | VerificationStatusScalarFieldEnum[]
  }

  /**
   * Agent without action
   */
  export type AgentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
  }


  /**
   * Model AgentProfile
   */

  export type AggregateAgentProfile = {
    _count: AgentProfileCountAggregateOutputType | null
    _avg: AgentProfileAvgAggregateOutputType | null
    _sum: AgentProfileSumAggregateOutputType | null
    _min: AgentProfileMinAggregateOutputType | null
    _max: AgentProfileMaxAggregateOutputType | null
  }

  export type AgentProfileAvgAggregateOutputType = {
    passwordResetAttempts: number | null
    lockoutCount: number | null
    deletionLockoutCount: number | null
  }

  export type AgentProfileSumAggregateOutputType = {
    passwordResetAttempts: number | null
    lockoutCount: number | null
    deletionLockoutCount: number | null
  }

  export type AgentProfileMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    email: string | null
    emailHash: string | null
    phone: string | null
    phoneHash: string | null
    pin: string | null
    pinHash: string | null
    passwordHash: string | null
    emailVerified: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordResetAttempts: number | null
    accountLockedUntil: Date | null
    isLocked: boolean | null
    lockoutCount: number | null
    lockedUntil: Date | null
    lastPasswordResetAt: Date | null
    avatarUrl: string | null
    failedDeletionAttempts: Date | null
    deletionLockedUntil: Date | null
    deletionLockoutCount: number | null
  }

  export type AgentProfileMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    email: string | null
    emailHash: string | null
    phone: string | null
    phoneHash: string | null
    pin: string | null
    pinHash: string | null
    passwordHash: string | null
    emailVerified: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordResetAttempts: number | null
    accountLockedUntil: Date | null
    isLocked: boolean | null
    lockoutCount: number | null
    lockedUntil: Date | null
    lastPasswordResetAt: Date | null
    avatarUrl: string | null
    failedDeletionAttempts: Date | null
    deletionLockedUntil: Date | null
    deletionLockoutCount: number | null
  }

  export type AgentProfileCountAggregateOutputType = {
    id: number
    agentId: number
    email: number
    emailHash: number
    phone: number
    phoneHash: number
    pin: number
    pinHash: number
    passwordHash: number
    emailVerified: number
    createdAt: number
    updatedAt: number
    passwordResetAttempts: number
    accountLockedUntil: number
    isLocked: number
    lockoutCount: number
    lockedUntil: number
    lastPasswordResetAt: number
    avatarUrl: number
    failedDeletionAttempts: number
    deletionLockedUntil: number
    deletionLockoutCount: number
    _all: number
  }


  export type AgentProfileAvgAggregateInputType = {
    passwordResetAttempts?: true
    lockoutCount?: true
    deletionLockoutCount?: true
  }

  export type AgentProfileSumAggregateInputType = {
    passwordResetAttempts?: true
    lockoutCount?: true
    deletionLockoutCount?: true
  }

  export type AgentProfileMinAggregateInputType = {
    id?: true
    agentId?: true
    email?: true
    emailHash?: true
    phone?: true
    phoneHash?: true
    pin?: true
    pinHash?: true
    passwordHash?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    passwordResetAttempts?: true
    accountLockedUntil?: true
    isLocked?: true
    lockoutCount?: true
    lockedUntil?: true
    lastPasswordResetAt?: true
    avatarUrl?: true
    failedDeletionAttempts?: true
    deletionLockedUntil?: true
    deletionLockoutCount?: true
  }

  export type AgentProfileMaxAggregateInputType = {
    id?: true
    agentId?: true
    email?: true
    emailHash?: true
    phone?: true
    phoneHash?: true
    pin?: true
    pinHash?: true
    passwordHash?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    passwordResetAttempts?: true
    accountLockedUntil?: true
    isLocked?: true
    lockoutCount?: true
    lockedUntil?: true
    lastPasswordResetAt?: true
    avatarUrl?: true
    failedDeletionAttempts?: true
    deletionLockedUntil?: true
    deletionLockoutCount?: true
  }

  export type AgentProfileCountAggregateInputType = {
    id?: true
    agentId?: true
    email?: true
    emailHash?: true
    phone?: true
    phoneHash?: true
    pin?: true
    pinHash?: true
    passwordHash?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    passwordResetAttempts?: true
    accountLockedUntil?: true
    isLocked?: true
    lockoutCount?: true
    lockedUntil?: true
    lastPasswordResetAt?: true
    avatarUrl?: true
    failedDeletionAttempts?: true
    deletionLockedUntil?: true
    deletionLockoutCount?: true
    _all?: true
  }

  export type AgentProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentProfile to aggregate.
     */
    where?: AgentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentProfiles to fetch.
     */
    orderBy?: AgentProfileOrderByWithRelationInput | AgentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentProfiles
    **/
    _count?: true | AgentProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentProfileMaxAggregateInputType
  }

  export type GetAgentProfileAggregateType<T extends AgentProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentProfile[P]>
      : GetScalarType<T[P], AggregateAgentProfile[P]>
  }




  export type AgentProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentProfileWhereInput
    orderBy?: AgentProfileOrderByWithAggregationInput | AgentProfileOrderByWithAggregationInput[]
    by: AgentProfileScalarFieldEnum[] | AgentProfileScalarFieldEnum
    having?: AgentProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentProfileCountAggregateInputType | true
    _avg?: AgentProfileAvgAggregateInputType
    _sum?: AgentProfileSumAggregateInputType
    _min?: AgentProfileMinAggregateInputType
    _max?: AgentProfileMaxAggregateInputType
  }

  export type AgentProfileGroupByOutputType = {
    id: string
    agentId: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin: string
    pinHash: string
    passwordHash: string
    emailVerified: Date | null
    createdAt: Date
    updatedAt: Date
    passwordResetAttempts: number | null
    accountLockedUntil: Date | null
    isLocked: boolean
    lockoutCount: number
    lockedUntil: Date | null
    lastPasswordResetAt: Date | null
    avatarUrl: string
    failedDeletionAttempts: Date | null
    deletionLockedUntil: Date | null
    deletionLockoutCount: number
    _count: AgentProfileCountAggregateOutputType | null
    _avg: AgentProfileAvgAggregateOutputType | null
    _sum: AgentProfileSumAggregateOutputType | null
    _min: AgentProfileMinAggregateOutputType | null
    _max: AgentProfileMaxAggregateOutputType | null
  }

  type GetAgentProfileGroupByPayload<T extends AgentProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentProfileGroupByOutputType[P]>
            : GetScalarType<T[P], AgentProfileGroupByOutputType[P]>
        }
      >
    >


  export type AgentProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    email?: boolean
    emailHash?: boolean
    phone?: boolean
    phoneHash?: boolean
    pin?: boolean
    pinHash?: boolean
    passwordHash?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetAttempts?: boolean
    accountLockedUntil?: boolean
    isLocked?: boolean
    lockoutCount?: boolean
    lockedUntil?: boolean
    lastPasswordResetAt?: boolean
    avatarUrl?: boolean
    failedDeletionAttempts?: boolean
    deletionLockedUntil?: boolean
    deletionLockoutCount?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    PasswordResetToken?: boolean | AgentProfile$PasswordResetTokenArgs<ExtArgs>
    _count?: boolean | AgentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentProfile"]>

  export type AgentProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    email?: boolean
    emailHash?: boolean
    phone?: boolean
    phoneHash?: boolean
    pin?: boolean
    pinHash?: boolean
    passwordHash?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetAttempts?: boolean
    accountLockedUntil?: boolean
    isLocked?: boolean
    lockoutCount?: boolean
    lockedUntil?: boolean
    lastPasswordResetAt?: boolean
    avatarUrl?: boolean
    failedDeletionAttempts?: boolean
    deletionLockedUntil?: boolean
    deletionLockoutCount?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentProfile"]>

  export type AgentProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    email?: boolean
    emailHash?: boolean
    phone?: boolean
    phoneHash?: boolean
    pin?: boolean
    pinHash?: boolean
    passwordHash?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetAttempts?: boolean
    accountLockedUntil?: boolean
    isLocked?: boolean
    lockoutCount?: boolean
    lockedUntil?: boolean
    lastPasswordResetAt?: boolean
    avatarUrl?: boolean
    failedDeletionAttempts?: boolean
    deletionLockedUntil?: boolean
    deletionLockoutCount?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentProfile"]>

  export type AgentProfileSelectScalar = {
    id?: boolean
    agentId?: boolean
    email?: boolean
    emailHash?: boolean
    phone?: boolean
    phoneHash?: boolean
    pin?: boolean
    pinHash?: boolean
    passwordHash?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetAttempts?: boolean
    accountLockedUntil?: boolean
    isLocked?: boolean
    lockoutCount?: boolean
    lockedUntil?: boolean
    lastPasswordResetAt?: boolean
    avatarUrl?: boolean
    failedDeletionAttempts?: boolean
    deletionLockedUntil?: boolean
    deletionLockoutCount?: boolean
  }

  export type AgentProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "email" | "emailHash" | "phone" | "phoneHash" | "pin" | "pinHash" | "passwordHash" | "emailVerified" | "createdAt" | "updatedAt" | "passwordResetAttempts" | "accountLockedUntil" | "isLocked" | "lockoutCount" | "lockedUntil" | "lastPasswordResetAt" | "avatarUrl" | "failedDeletionAttempts" | "deletionLockedUntil" | "deletionLockoutCount", ExtArgs["result"]["agentProfile"]>
  export type AgentProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    PasswordResetToken?: boolean | AgentProfile$PasswordResetTokenArgs<ExtArgs>
    _count?: boolean | AgentProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AgentProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AgentProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentProfile"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
      PasswordResetToken: Prisma.$PasswordResetTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      email: string
      emailHash: string
      phone: string
      phoneHash: string
      pin: string
      pinHash: string
      passwordHash: string
      emailVerified: Date | null
      createdAt: Date
      updatedAt: Date
      passwordResetAttempts: number | null
      accountLockedUntil: Date | null
      isLocked: boolean
      lockoutCount: number
      lockedUntil: Date | null
      lastPasswordResetAt: Date | null
      avatarUrl: string
      failedDeletionAttempts: Date | null
      deletionLockedUntil: Date | null
      deletionLockoutCount: number
    }, ExtArgs["result"]["agentProfile"]>
    composites: {}
  }

  type AgentProfileGetPayload<S extends boolean | null | undefined | AgentProfileDefaultArgs> = $Result.GetResult<Prisma.$AgentProfilePayload, S>

  type AgentProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgentProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgentProfileCountAggregateInputType | true
    }

  export interface AgentProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentProfile'], meta: { name: 'AgentProfile' } }
    /**
     * Find zero or one AgentProfile that matches the filter.
     * @param {AgentProfileFindUniqueArgs} args - Arguments to find a AgentProfile
     * @example
     * // Get one AgentProfile
     * const agentProfile = await prisma.agentProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentProfileFindUniqueArgs>(args: SelectSubset<T, AgentProfileFindUniqueArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgentProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgentProfileFindUniqueOrThrowArgs} args - Arguments to find a AgentProfile
     * @example
     * // Get one AgentProfile
     * const agentProfile = await prisma.agentProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileFindFirstArgs} args - Arguments to find a AgentProfile
     * @example
     * // Get one AgentProfile
     * const agentProfile = await prisma.agentProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentProfileFindFirstArgs>(args?: SelectSubset<T, AgentProfileFindFirstArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileFindFirstOrThrowArgs} args - Arguments to find a AgentProfile
     * @example
     * // Get one AgentProfile
     * const agentProfile = await prisma.agentProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgentProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentProfiles
     * const agentProfiles = await prisma.agentProfile.findMany()
     * 
     * // Get first 10 AgentProfiles
     * const agentProfiles = await prisma.agentProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentProfileWithIdOnly = await prisma.agentProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentProfileFindManyArgs>(args?: SelectSubset<T, AgentProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgentProfile.
     * @param {AgentProfileCreateArgs} args - Arguments to create a AgentProfile.
     * @example
     * // Create one AgentProfile
     * const AgentProfile = await prisma.agentProfile.create({
     *   data: {
     *     // ... data to create a AgentProfile
     *   }
     * })
     * 
     */
    create<T extends AgentProfileCreateArgs>(args: SelectSubset<T, AgentProfileCreateArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgentProfiles.
     * @param {AgentProfileCreateManyArgs} args - Arguments to create many AgentProfiles.
     * @example
     * // Create many AgentProfiles
     * const agentProfile = await prisma.agentProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentProfileCreateManyArgs>(args?: SelectSubset<T, AgentProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentProfiles and returns the data saved in the database.
     * @param {AgentProfileCreateManyAndReturnArgs} args - Arguments to create many AgentProfiles.
     * @example
     * // Create many AgentProfiles
     * const agentProfile = await prisma.agentProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentProfiles and only return the `id`
     * const agentProfileWithIdOnly = await prisma.agentProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgentProfile.
     * @param {AgentProfileDeleteArgs} args - Arguments to delete one AgentProfile.
     * @example
     * // Delete one AgentProfile
     * const AgentProfile = await prisma.agentProfile.delete({
     *   where: {
     *     // ... filter to delete one AgentProfile
     *   }
     * })
     * 
     */
    delete<T extends AgentProfileDeleteArgs>(args: SelectSubset<T, AgentProfileDeleteArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgentProfile.
     * @param {AgentProfileUpdateArgs} args - Arguments to update one AgentProfile.
     * @example
     * // Update one AgentProfile
     * const agentProfile = await prisma.agentProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentProfileUpdateArgs>(args: SelectSubset<T, AgentProfileUpdateArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgentProfiles.
     * @param {AgentProfileDeleteManyArgs} args - Arguments to filter AgentProfiles to delete.
     * @example
     * // Delete a few AgentProfiles
     * const { count } = await prisma.agentProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentProfileDeleteManyArgs>(args?: SelectSubset<T, AgentProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentProfiles
     * const agentProfile = await prisma.agentProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentProfileUpdateManyArgs>(args: SelectSubset<T, AgentProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentProfiles and returns the data updated in the database.
     * @param {AgentProfileUpdateManyAndReturnArgs} args - Arguments to update many AgentProfiles.
     * @example
     * // Update many AgentProfiles
     * const agentProfile = await prisma.agentProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgentProfiles and only return the `id`
     * const agentProfileWithIdOnly = await prisma.agentProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgentProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, AgentProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgentProfile.
     * @param {AgentProfileUpsertArgs} args - Arguments to update or create a AgentProfile.
     * @example
     * // Update or create a AgentProfile
     * const agentProfile = await prisma.agentProfile.upsert({
     *   create: {
     *     // ... data to create a AgentProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentProfile we want to update
     *   }
     * })
     */
    upsert<T extends AgentProfileUpsertArgs>(args: SelectSubset<T, AgentProfileUpsertArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgentProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileCountArgs} args - Arguments to filter AgentProfiles to count.
     * @example
     * // Count the number of AgentProfiles
     * const count = await prisma.agentProfile.count({
     *   where: {
     *     // ... the filter for the AgentProfiles we want to count
     *   }
     * })
    **/
    count<T extends AgentProfileCountArgs>(
      args?: Subset<T, AgentProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentProfileAggregateArgs>(args: Subset<T, AgentProfileAggregateArgs>): Prisma.PrismaPromise<GetAgentProfileAggregateType<T>>

    /**
     * Group by AgentProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentProfileGroupByArgs['orderBy'] }
        : { orderBy?: AgentProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentProfile model
   */
  readonly fields: AgentProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    PasswordResetToken<T extends AgentProfile$PasswordResetTokenArgs<ExtArgs> = {}>(args?: Subset<T, AgentProfile$PasswordResetTokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentProfile model
   */
  interface AgentProfileFieldRefs {
    readonly id: FieldRef<"AgentProfile", 'String'>
    readonly agentId: FieldRef<"AgentProfile", 'String'>
    readonly email: FieldRef<"AgentProfile", 'String'>
    readonly emailHash: FieldRef<"AgentProfile", 'String'>
    readonly phone: FieldRef<"AgentProfile", 'String'>
    readonly phoneHash: FieldRef<"AgentProfile", 'String'>
    readonly pin: FieldRef<"AgentProfile", 'String'>
    readonly pinHash: FieldRef<"AgentProfile", 'String'>
    readonly passwordHash: FieldRef<"AgentProfile", 'String'>
    readonly emailVerified: FieldRef<"AgentProfile", 'DateTime'>
    readonly createdAt: FieldRef<"AgentProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"AgentProfile", 'DateTime'>
    readonly passwordResetAttempts: FieldRef<"AgentProfile", 'Int'>
    readonly accountLockedUntil: FieldRef<"AgentProfile", 'DateTime'>
    readonly isLocked: FieldRef<"AgentProfile", 'Boolean'>
    readonly lockoutCount: FieldRef<"AgentProfile", 'Int'>
    readonly lockedUntil: FieldRef<"AgentProfile", 'DateTime'>
    readonly lastPasswordResetAt: FieldRef<"AgentProfile", 'DateTime'>
    readonly avatarUrl: FieldRef<"AgentProfile", 'String'>
    readonly failedDeletionAttempts: FieldRef<"AgentProfile", 'DateTime'>
    readonly deletionLockedUntil: FieldRef<"AgentProfile", 'DateTime'>
    readonly deletionLockoutCount: FieldRef<"AgentProfile", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AgentProfile findUnique
   */
  export type AgentProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter, which AgentProfile to fetch.
     */
    where: AgentProfileWhereUniqueInput
  }

  /**
   * AgentProfile findUniqueOrThrow
   */
  export type AgentProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter, which AgentProfile to fetch.
     */
    where: AgentProfileWhereUniqueInput
  }

  /**
   * AgentProfile findFirst
   */
  export type AgentProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter, which AgentProfile to fetch.
     */
    where?: AgentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentProfiles to fetch.
     */
    orderBy?: AgentProfileOrderByWithRelationInput | AgentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentProfiles.
     */
    cursor?: AgentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentProfiles.
     */
    distinct?: AgentProfileScalarFieldEnum | AgentProfileScalarFieldEnum[]
  }

  /**
   * AgentProfile findFirstOrThrow
   */
  export type AgentProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter, which AgentProfile to fetch.
     */
    where?: AgentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentProfiles to fetch.
     */
    orderBy?: AgentProfileOrderByWithRelationInput | AgentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentProfiles.
     */
    cursor?: AgentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentProfiles.
     */
    distinct?: AgentProfileScalarFieldEnum | AgentProfileScalarFieldEnum[]
  }

  /**
   * AgentProfile findMany
   */
  export type AgentProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter, which AgentProfiles to fetch.
     */
    where?: AgentProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentProfiles to fetch.
     */
    orderBy?: AgentProfileOrderByWithRelationInput | AgentProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentProfiles.
     */
    cursor?: AgentProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentProfiles.
     */
    skip?: number
    distinct?: AgentProfileScalarFieldEnum | AgentProfileScalarFieldEnum[]
  }

  /**
   * AgentProfile create
   */
  export type AgentProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentProfile.
     */
    data: XOR<AgentProfileCreateInput, AgentProfileUncheckedCreateInput>
  }

  /**
   * AgentProfile createMany
   */
  export type AgentProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentProfiles.
     */
    data: AgentProfileCreateManyInput | AgentProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentProfile createManyAndReturn
   */
  export type AgentProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * The data used to create many AgentProfiles.
     */
    data: AgentProfileCreateManyInput | AgentProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentProfile update
   */
  export type AgentProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentProfile.
     */
    data: XOR<AgentProfileUpdateInput, AgentProfileUncheckedUpdateInput>
    /**
     * Choose, which AgentProfile to update.
     */
    where: AgentProfileWhereUniqueInput
  }

  /**
   * AgentProfile updateMany
   */
  export type AgentProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentProfiles.
     */
    data: XOR<AgentProfileUpdateManyMutationInput, AgentProfileUncheckedUpdateManyInput>
    /**
     * Filter which AgentProfiles to update
     */
    where?: AgentProfileWhereInput
    /**
     * Limit how many AgentProfiles to update.
     */
    limit?: number
  }

  /**
   * AgentProfile updateManyAndReturn
   */
  export type AgentProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * The data used to update AgentProfiles.
     */
    data: XOR<AgentProfileUpdateManyMutationInput, AgentProfileUncheckedUpdateManyInput>
    /**
     * Filter which AgentProfiles to update
     */
    where?: AgentProfileWhereInput
    /**
     * Limit how many AgentProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentProfile upsert
   */
  export type AgentProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentProfile to update in case it exists.
     */
    where: AgentProfileWhereUniqueInput
    /**
     * In case the AgentProfile found by the `where` argument doesn't exist, create a new AgentProfile with this data.
     */
    create: XOR<AgentProfileCreateInput, AgentProfileUncheckedCreateInput>
    /**
     * In case the AgentProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentProfileUpdateInput, AgentProfileUncheckedUpdateInput>
  }

  /**
   * AgentProfile delete
   */
  export type AgentProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    /**
     * Filter which AgentProfile to delete.
     */
    where: AgentProfileWhereUniqueInput
  }

  /**
   * AgentProfile deleteMany
   */
  export type AgentProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentProfiles to delete
     */
    where?: AgentProfileWhereInput
    /**
     * Limit how many AgentProfiles to delete.
     */
    limit?: number
  }

  /**
   * AgentProfile.PasswordResetToken
   */
  export type AgentProfile$PasswordResetTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    cursor?: PasswordResetTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * AgentProfile without action
   */
  export type AgentProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
  }


  /**
   * Model AgentSession
   */

  export type AggregateAgentSession = {
    _count: AgentSessionCountAggregateOutputType | null
    _min: AgentSessionMinAggregateOutputType | null
    _max: AgentSessionMaxAggregateOutputType | null
  }

  export type AgentSessionMinAggregateOutputType = {
    id: string | null
    token: string | null
    agentId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revokedAt: Date | null
  }

  export type AgentSessionMaxAggregateOutputType = {
    id: string | null
    token: string | null
    agentId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revokedAt: Date | null
  }

  export type AgentSessionCountAggregateOutputType = {
    id: number
    token: number
    agentId: number
    ipAddress: number
    userAgent: number
    createdAt: number
    expiresAt: number
    revokedAt: number
    _all: number
  }


  export type AgentSessionMinAggregateInputType = {
    id?: true
    token?: true
    agentId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
  }

  export type AgentSessionMaxAggregateInputType = {
    id?: true
    token?: true
    agentId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
  }

  export type AgentSessionCountAggregateInputType = {
    id?: true
    token?: true
    agentId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    expiresAt?: true
    revokedAt?: true
    _all?: true
  }

  export type AgentSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentSession to aggregate.
     */
    where?: AgentSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSessions to fetch.
     */
    orderBy?: AgentSessionOrderByWithRelationInput | AgentSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentSessions
    **/
    _count?: true | AgentSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentSessionMaxAggregateInputType
  }

  export type GetAgentSessionAggregateType<T extends AgentSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentSession[P]>
      : GetScalarType<T[P], AggregateAgentSession[P]>
  }




  export type AgentSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentSessionWhereInput
    orderBy?: AgentSessionOrderByWithAggregationInput | AgentSessionOrderByWithAggregationInput[]
    by: AgentSessionScalarFieldEnum[] | AgentSessionScalarFieldEnum
    having?: AgentSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentSessionCountAggregateInputType | true
    _min?: AgentSessionMinAggregateInputType
    _max?: AgentSessionMaxAggregateInputType
  }

  export type AgentSessionGroupByOutputType = {
    id: string
    token: string
    agentId: string
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    expiresAt: Date
    revokedAt: Date | null
    _count: AgentSessionCountAggregateOutputType | null
    _min: AgentSessionMinAggregateOutputType | null
    _max: AgentSessionMaxAggregateOutputType | null
  }

  type GetAgentSessionGroupByPayload<T extends AgentSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentSessionGroupByOutputType[P]>
            : GetScalarType<T[P], AgentSessionGroupByOutputType[P]>
        }
      >
    >


  export type AgentSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    agentId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentSession"]>

  export type AgentSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    agentId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentSession"]>

  export type AgentSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    agentId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentSession"]>

  export type AgentSessionSelectScalar = {
    id?: boolean
    token?: boolean
    agentId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revokedAt?: boolean
  }

  export type AgentSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "agentId" | "ipAddress" | "userAgent" | "createdAt" | "expiresAt" | "revokedAt", ExtArgs["result"]["agentSession"]>
  export type AgentSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AgentSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AgentSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AgentSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentSession"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      agentId: string
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      expiresAt: Date
      revokedAt: Date | null
    }, ExtArgs["result"]["agentSession"]>
    composites: {}
  }

  type AgentSessionGetPayload<S extends boolean | null | undefined | AgentSessionDefaultArgs> = $Result.GetResult<Prisma.$AgentSessionPayload, S>

  type AgentSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgentSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgentSessionCountAggregateInputType | true
    }

  export interface AgentSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentSession'], meta: { name: 'AgentSession' } }
    /**
     * Find zero or one AgentSession that matches the filter.
     * @param {AgentSessionFindUniqueArgs} args - Arguments to find a AgentSession
     * @example
     * // Get one AgentSession
     * const agentSession = await prisma.agentSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentSessionFindUniqueArgs>(args: SelectSubset<T, AgentSessionFindUniqueArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgentSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgentSessionFindUniqueOrThrowArgs} args - Arguments to find a AgentSession
     * @example
     * // Get one AgentSession
     * const agentSession = await prisma.agentSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionFindFirstArgs} args - Arguments to find a AgentSession
     * @example
     * // Get one AgentSession
     * const agentSession = await prisma.agentSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentSessionFindFirstArgs>(args?: SelectSubset<T, AgentSessionFindFirstArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgentSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionFindFirstOrThrowArgs} args - Arguments to find a AgentSession
     * @example
     * // Get one AgentSession
     * const agentSession = await prisma.agentSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgentSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentSessions
     * const agentSessions = await prisma.agentSession.findMany()
     * 
     * // Get first 10 AgentSessions
     * const agentSessions = await prisma.agentSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentSessionWithIdOnly = await prisma.agentSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentSessionFindManyArgs>(args?: SelectSubset<T, AgentSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgentSession.
     * @param {AgentSessionCreateArgs} args - Arguments to create a AgentSession.
     * @example
     * // Create one AgentSession
     * const AgentSession = await prisma.agentSession.create({
     *   data: {
     *     // ... data to create a AgentSession
     *   }
     * })
     * 
     */
    create<T extends AgentSessionCreateArgs>(args: SelectSubset<T, AgentSessionCreateArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgentSessions.
     * @param {AgentSessionCreateManyArgs} args - Arguments to create many AgentSessions.
     * @example
     * // Create many AgentSessions
     * const agentSession = await prisma.agentSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentSessionCreateManyArgs>(args?: SelectSubset<T, AgentSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentSessions and returns the data saved in the database.
     * @param {AgentSessionCreateManyAndReturnArgs} args - Arguments to create many AgentSessions.
     * @example
     * // Create many AgentSessions
     * const agentSession = await prisma.agentSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentSessions and only return the `id`
     * const agentSessionWithIdOnly = await prisma.agentSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgentSession.
     * @param {AgentSessionDeleteArgs} args - Arguments to delete one AgentSession.
     * @example
     * // Delete one AgentSession
     * const AgentSession = await prisma.agentSession.delete({
     *   where: {
     *     // ... filter to delete one AgentSession
     *   }
     * })
     * 
     */
    delete<T extends AgentSessionDeleteArgs>(args: SelectSubset<T, AgentSessionDeleteArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgentSession.
     * @param {AgentSessionUpdateArgs} args - Arguments to update one AgentSession.
     * @example
     * // Update one AgentSession
     * const agentSession = await prisma.agentSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentSessionUpdateArgs>(args: SelectSubset<T, AgentSessionUpdateArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgentSessions.
     * @param {AgentSessionDeleteManyArgs} args - Arguments to filter AgentSessions to delete.
     * @example
     * // Delete a few AgentSessions
     * const { count } = await prisma.agentSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentSessionDeleteManyArgs>(args?: SelectSubset<T, AgentSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentSessions
     * const agentSession = await prisma.agentSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentSessionUpdateManyArgs>(args: SelectSubset<T, AgentSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentSessions and returns the data updated in the database.
     * @param {AgentSessionUpdateManyAndReturnArgs} args - Arguments to update many AgentSessions.
     * @example
     * // Update many AgentSessions
     * const agentSession = await prisma.agentSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgentSessions and only return the `id`
     * const agentSessionWithIdOnly = await prisma.agentSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgentSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, AgentSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgentSession.
     * @param {AgentSessionUpsertArgs} args - Arguments to update or create a AgentSession.
     * @example
     * // Update or create a AgentSession
     * const agentSession = await prisma.agentSession.upsert({
     *   create: {
     *     // ... data to create a AgentSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentSession we want to update
     *   }
     * })
     */
    upsert<T extends AgentSessionUpsertArgs>(args: SelectSubset<T, AgentSessionUpsertArgs<ExtArgs>>): Prisma__AgentSessionClient<$Result.GetResult<Prisma.$AgentSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgentSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionCountArgs} args - Arguments to filter AgentSessions to count.
     * @example
     * // Count the number of AgentSessions
     * const count = await prisma.agentSession.count({
     *   where: {
     *     // ... the filter for the AgentSessions we want to count
     *   }
     * })
    **/
    count<T extends AgentSessionCountArgs>(
      args?: Subset<T, AgentSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentSessionAggregateArgs>(args: Subset<T, AgentSessionAggregateArgs>): Prisma.PrismaPromise<GetAgentSessionAggregateType<T>>

    /**
     * Group by AgentSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentSessionGroupByArgs['orderBy'] }
        : { orderBy?: AgentSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentSession model
   */
  readonly fields: AgentSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentSession model
   */
  interface AgentSessionFieldRefs {
    readonly id: FieldRef<"AgentSession", 'String'>
    readonly token: FieldRef<"AgentSession", 'String'>
    readonly agentId: FieldRef<"AgentSession", 'String'>
    readonly ipAddress: FieldRef<"AgentSession", 'String'>
    readonly userAgent: FieldRef<"AgentSession", 'String'>
    readonly createdAt: FieldRef<"AgentSession", 'DateTime'>
    readonly expiresAt: FieldRef<"AgentSession", 'DateTime'>
    readonly revokedAt: FieldRef<"AgentSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgentSession findUnique
   */
  export type AgentSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter, which AgentSession to fetch.
     */
    where: AgentSessionWhereUniqueInput
  }

  /**
   * AgentSession findUniqueOrThrow
   */
  export type AgentSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter, which AgentSession to fetch.
     */
    where: AgentSessionWhereUniqueInput
  }

  /**
   * AgentSession findFirst
   */
  export type AgentSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter, which AgentSession to fetch.
     */
    where?: AgentSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSessions to fetch.
     */
    orderBy?: AgentSessionOrderByWithRelationInput | AgentSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentSessions.
     */
    cursor?: AgentSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentSessions.
     */
    distinct?: AgentSessionScalarFieldEnum | AgentSessionScalarFieldEnum[]
  }

  /**
   * AgentSession findFirstOrThrow
   */
  export type AgentSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter, which AgentSession to fetch.
     */
    where?: AgentSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSessions to fetch.
     */
    orderBy?: AgentSessionOrderByWithRelationInput | AgentSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentSessions.
     */
    cursor?: AgentSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentSessions.
     */
    distinct?: AgentSessionScalarFieldEnum | AgentSessionScalarFieldEnum[]
  }

  /**
   * AgentSession findMany
   */
  export type AgentSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter, which AgentSessions to fetch.
     */
    where?: AgentSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentSessions to fetch.
     */
    orderBy?: AgentSessionOrderByWithRelationInput | AgentSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentSessions.
     */
    cursor?: AgentSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentSessions.
     */
    skip?: number
    distinct?: AgentSessionScalarFieldEnum | AgentSessionScalarFieldEnum[]
  }

  /**
   * AgentSession create
   */
  export type AgentSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentSession.
     */
    data: XOR<AgentSessionCreateInput, AgentSessionUncheckedCreateInput>
  }

  /**
   * AgentSession createMany
   */
  export type AgentSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentSessions.
     */
    data: AgentSessionCreateManyInput | AgentSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentSession createManyAndReturn
   */
  export type AgentSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * The data used to create many AgentSessions.
     */
    data: AgentSessionCreateManyInput | AgentSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentSession update
   */
  export type AgentSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentSession.
     */
    data: XOR<AgentSessionUpdateInput, AgentSessionUncheckedUpdateInput>
    /**
     * Choose, which AgentSession to update.
     */
    where: AgentSessionWhereUniqueInput
  }

  /**
   * AgentSession updateMany
   */
  export type AgentSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentSessions.
     */
    data: XOR<AgentSessionUpdateManyMutationInput, AgentSessionUncheckedUpdateManyInput>
    /**
     * Filter which AgentSessions to update
     */
    where?: AgentSessionWhereInput
    /**
     * Limit how many AgentSessions to update.
     */
    limit?: number
  }

  /**
   * AgentSession updateManyAndReturn
   */
  export type AgentSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * The data used to update AgentSessions.
     */
    data: XOR<AgentSessionUpdateManyMutationInput, AgentSessionUncheckedUpdateManyInput>
    /**
     * Filter which AgentSessions to update
     */
    where?: AgentSessionWhereInput
    /**
     * Limit how many AgentSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentSession upsert
   */
  export type AgentSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentSession to update in case it exists.
     */
    where: AgentSessionWhereUniqueInput
    /**
     * In case the AgentSession found by the `where` argument doesn't exist, create a new AgentSession with this data.
     */
    create: XOR<AgentSessionCreateInput, AgentSessionUncheckedCreateInput>
    /**
     * In case the AgentSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentSessionUpdateInput, AgentSessionUncheckedUpdateInput>
  }

  /**
   * AgentSession delete
   */
  export type AgentSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
    /**
     * Filter which AgentSession to delete.
     */
    where: AgentSessionWhereUniqueInput
  }

  /**
   * AgentSession deleteMany
   */
  export type AgentSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentSessions to delete
     */
    where?: AgentSessionWhereInput
    /**
     * Limit how many AgentSessions to delete.
     */
    limit?: number
  }

  /**
   * AgentSession without action
   */
  export type AgentSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentSession
     */
    select?: AgentSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentSession
     */
    omit?: AgentSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentSessionInclude<ExtArgs> | null
  }


  /**
   * Model DeletionSchedule
   */

  export type AggregateDeletionSchedule = {
    _count: DeletionScheduleCountAggregateOutputType | null
    _min: DeletionScheduleMinAggregateOutputType | null
    _max: DeletionScheduleMaxAggregateOutputType | null
  }

  export type DeletionScheduleMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    scheduledAt: Date | null
    deletionType: string | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type DeletionScheduleMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    scheduledAt: Date | null
    deletionType: string | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type DeletionScheduleCountAggregateOutputType = {
    id: number
    agentId: number
    scheduledAt: number
    deletionType: number
    completedAt: number
    createdAt: number
    _all: number
  }


  export type DeletionScheduleMinAggregateInputType = {
    id?: true
    agentId?: true
    scheduledAt?: true
    deletionType?: true
    completedAt?: true
    createdAt?: true
  }

  export type DeletionScheduleMaxAggregateInputType = {
    id?: true
    agentId?: true
    scheduledAt?: true
    deletionType?: true
    completedAt?: true
    createdAt?: true
  }

  export type DeletionScheduleCountAggregateInputType = {
    id?: true
    agentId?: true
    scheduledAt?: true
    deletionType?: true
    completedAt?: true
    createdAt?: true
    _all?: true
  }

  export type DeletionScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeletionSchedule to aggregate.
     */
    where?: DeletionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeletionSchedules to fetch.
     */
    orderBy?: DeletionScheduleOrderByWithRelationInput | DeletionScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeletionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeletionSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeletionSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeletionSchedules
    **/
    _count?: true | DeletionScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeletionScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeletionScheduleMaxAggregateInputType
  }

  export type GetDeletionScheduleAggregateType<T extends DeletionScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateDeletionSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeletionSchedule[P]>
      : GetScalarType<T[P], AggregateDeletionSchedule[P]>
  }




  export type DeletionScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeletionScheduleWhereInput
    orderBy?: DeletionScheduleOrderByWithAggregationInput | DeletionScheduleOrderByWithAggregationInput[]
    by: DeletionScheduleScalarFieldEnum[] | DeletionScheduleScalarFieldEnum
    having?: DeletionScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeletionScheduleCountAggregateInputType | true
    _min?: DeletionScheduleMinAggregateInputType
    _max?: DeletionScheduleMaxAggregateInputType
  }

  export type DeletionScheduleGroupByOutputType = {
    id: string
    agentId: string
    scheduledAt: Date
    deletionType: string
    completedAt: Date | null
    createdAt: Date
    _count: DeletionScheduleCountAggregateOutputType | null
    _min: DeletionScheduleMinAggregateOutputType | null
    _max: DeletionScheduleMaxAggregateOutputType | null
  }

  type GetDeletionScheduleGroupByPayload<T extends DeletionScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeletionScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeletionScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeletionScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], DeletionScheduleGroupByOutputType[P]>
        }
      >
    >


  export type DeletionScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    scheduledAt?: boolean
    deletionType?: boolean
    completedAt?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deletionSchedule"]>

  export type DeletionScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    scheduledAt?: boolean
    deletionType?: boolean
    completedAt?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deletionSchedule"]>

  export type DeletionScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    scheduledAt?: boolean
    deletionType?: boolean
    completedAt?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deletionSchedule"]>

  export type DeletionScheduleSelectScalar = {
    id?: boolean
    agentId?: boolean
    scheduledAt?: boolean
    deletionType?: boolean
    completedAt?: boolean
    createdAt?: boolean
  }

  export type DeletionScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "scheduledAt" | "deletionType" | "completedAt" | "createdAt", ExtArgs["result"]["deletionSchedule"]>
  export type DeletionScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type DeletionScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type DeletionScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $DeletionSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeletionSchedule"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      scheduledAt: Date
      deletionType: string
      completedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["deletionSchedule"]>
    composites: {}
  }

  type DeletionScheduleGetPayload<S extends boolean | null | undefined | DeletionScheduleDefaultArgs> = $Result.GetResult<Prisma.$DeletionSchedulePayload, S>

  type DeletionScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeletionScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeletionScheduleCountAggregateInputType | true
    }

  export interface DeletionScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeletionSchedule'], meta: { name: 'DeletionSchedule' } }
    /**
     * Find zero or one DeletionSchedule that matches the filter.
     * @param {DeletionScheduleFindUniqueArgs} args - Arguments to find a DeletionSchedule
     * @example
     * // Get one DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeletionScheduleFindUniqueArgs>(args: SelectSubset<T, DeletionScheduleFindUniqueArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeletionSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeletionScheduleFindUniqueOrThrowArgs} args - Arguments to find a DeletionSchedule
     * @example
     * // Get one DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeletionScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, DeletionScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeletionSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleFindFirstArgs} args - Arguments to find a DeletionSchedule
     * @example
     * // Get one DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeletionScheduleFindFirstArgs>(args?: SelectSubset<T, DeletionScheduleFindFirstArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeletionSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleFindFirstOrThrowArgs} args - Arguments to find a DeletionSchedule
     * @example
     * // Get one DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeletionScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, DeletionScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeletionSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeletionSchedules
     * const deletionSchedules = await prisma.deletionSchedule.findMany()
     * 
     * // Get first 10 DeletionSchedules
     * const deletionSchedules = await prisma.deletionSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deletionScheduleWithIdOnly = await prisma.deletionSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeletionScheduleFindManyArgs>(args?: SelectSubset<T, DeletionScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeletionSchedule.
     * @param {DeletionScheduleCreateArgs} args - Arguments to create a DeletionSchedule.
     * @example
     * // Create one DeletionSchedule
     * const DeletionSchedule = await prisma.deletionSchedule.create({
     *   data: {
     *     // ... data to create a DeletionSchedule
     *   }
     * })
     * 
     */
    create<T extends DeletionScheduleCreateArgs>(args: SelectSubset<T, DeletionScheduleCreateArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeletionSchedules.
     * @param {DeletionScheduleCreateManyArgs} args - Arguments to create many DeletionSchedules.
     * @example
     * // Create many DeletionSchedules
     * const deletionSchedule = await prisma.deletionSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeletionScheduleCreateManyArgs>(args?: SelectSubset<T, DeletionScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeletionSchedules and returns the data saved in the database.
     * @param {DeletionScheduleCreateManyAndReturnArgs} args - Arguments to create many DeletionSchedules.
     * @example
     * // Create many DeletionSchedules
     * const deletionSchedule = await prisma.deletionSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeletionSchedules and only return the `id`
     * const deletionScheduleWithIdOnly = await prisma.deletionSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeletionScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, DeletionScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeletionSchedule.
     * @param {DeletionScheduleDeleteArgs} args - Arguments to delete one DeletionSchedule.
     * @example
     * // Delete one DeletionSchedule
     * const DeletionSchedule = await prisma.deletionSchedule.delete({
     *   where: {
     *     // ... filter to delete one DeletionSchedule
     *   }
     * })
     * 
     */
    delete<T extends DeletionScheduleDeleteArgs>(args: SelectSubset<T, DeletionScheduleDeleteArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeletionSchedule.
     * @param {DeletionScheduleUpdateArgs} args - Arguments to update one DeletionSchedule.
     * @example
     * // Update one DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeletionScheduleUpdateArgs>(args: SelectSubset<T, DeletionScheduleUpdateArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeletionSchedules.
     * @param {DeletionScheduleDeleteManyArgs} args - Arguments to filter DeletionSchedules to delete.
     * @example
     * // Delete a few DeletionSchedules
     * const { count } = await prisma.deletionSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeletionScheduleDeleteManyArgs>(args?: SelectSubset<T, DeletionScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeletionSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeletionSchedules
     * const deletionSchedule = await prisma.deletionSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeletionScheduleUpdateManyArgs>(args: SelectSubset<T, DeletionScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeletionSchedules and returns the data updated in the database.
     * @param {DeletionScheduleUpdateManyAndReturnArgs} args - Arguments to update many DeletionSchedules.
     * @example
     * // Update many DeletionSchedules
     * const deletionSchedule = await prisma.deletionSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeletionSchedules and only return the `id`
     * const deletionScheduleWithIdOnly = await prisma.deletionSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeletionScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, DeletionScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeletionSchedule.
     * @param {DeletionScheduleUpsertArgs} args - Arguments to update or create a DeletionSchedule.
     * @example
     * // Update or create a DeletionSchedule
     * const deletionSchedule = await prisma.deletionSchedule.upsert({
     *   create: {
     *     // ... data to create a DeletionSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeletionSchedule we want to update
     *   }
     * })
     */
    upsert<T extends DeletionScheduleUpsertArgs>(args: SelectSubset<T, DeletionScheduleUpsertArgs<ExtArgs>>): Prisma__DeletionScheduleClient<$Result.GetResult<Prisma.$DeletionSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeletionSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleCountArgs} args - Arguments to filter DeletionSchedules to count.
     * @example
     * // Count the number of DeletionSchedules
     * const count = await prisma.deletionSchedule.count({
     *   where: {
     *     // ... the filter for the DeletionSchedules we want to count
     *   }
     * })
    **/
    count<T extends DeletionScheduleCountArgs>(
      args?: Subset<T, DeletionScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeletionScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeletionSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeletionScheduleAggregateArgs>(args: Subset<T, DeletionScheduleAggregateArgs>): Prisma.PrismaPromise<GetDeletionScheduleAggregateType<T>>

    /**
     * Group by DeletionSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeletionScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeletionScheduleGroupByArgs['orderBy'] }
        : { orderBy?: DeletionScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeletionScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeletionScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeletionSchedule model
   */
  readonly fields: DeletionScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeletionSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeletionScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeletionSchedule model
   */
  interface DeletionScheduleFieldRefs {
    readonly id: FieldRef<"DeletionSchedule", 'String'>
    readonly agentId: FieldRef<"DeletionSchedule", 'String'>
    readonly scheduledAt: FieldRef<"DeletionSchedule", 'DateTime'>
    readonly deletionType: FieldRef<"DeletionSchedule", 'String'>
    readonly completedAt: FieldRef<"DeletionSchedule", 'DateTime'>
    readonly createdAt: FieldRef<"DeletionSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeletionSchedule findUnique
   */
  export type DeletionScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DeletionSchedule to fetch.
     */
    where: DeletionScheduleWhereUniqueInput
  }

  /**
   * DeletionSchedule findUniqueOrThrow
   */
  export type DeletionScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DeletionSchedule to fetch.
     */
    where: DeletionScheduleWhereUniqueInput
  }

  /**
   * DeletionSchedule findFirst
   */
  export type DeletionScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DeletionSchedule to fetch.
     */
    where?: DeletionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeletionSchedules to fetch.
     */
    orderBy?: DeletionScheduleOrderByWithRelationInput | DeletionScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeletionSchedules.
     */
    cursor?: DeletionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeletionSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeletionSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeletionSchedules.
     */
    distinct?: DeletionScheduleScalarFieldEnum | DeletionScheduleScalarFieldEnum[]
  }

  /**
   * DeletionSchedule findFirstOrThrow
   */
  export type DeletionScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DeletionSchedule to fetch.
     */
    where?: DeletionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeletionSchedules to fetch.
     */
    orderBy?: DeletionScheduleOrderByWithRelationInput | DeletionScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeletionSchedules.
     */
    cursor?: DeletionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeletionSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeletionSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeletionSchedules.
     */
    distinct?: DeletionScheduleScalarFieldEnum | DeletionScheduleScalarFieldEnum[]
  }

  /**
   * DeletionSchedule findMany
   */
  export type DeletionScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter, which DeletionSchedules to fetch.
     */
    where?: DeletionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeletionSchedules to fetch.
     */
    orderBy?: DeletionScheduleOrderByWithRelationInput | DeletionScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeletionSchedules.
     */
    cursor?: DeletionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeletionSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeletionSchedules.
     */
    skip?: number
    distinct?: DeletionScheduleScalarFieldEnum | DeletionScheduleScalarFieldEnum[]
  }

  /**
   * DeletionSchedule create
   */
  export type DeletionScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a DeletionSchedule.
     */
    data: XOR<DeletionScheduleCreateInput, DeletionScheduleUncheckedCreateInput>
  }

  /**
   * DeletionSchedule createMany
   */
  export type DeletionScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeletionSchedules.
     */
    data: DeletionScheduleCreateManyInput | DeletionScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeletionSchedule createManyAndReturn
   */
  export type DeletionScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many DeletionSchedules.
     */
    data: DeletionScheduleCreateManyInput | DeletionScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeletionSchedule update
   */
  export type DeletionScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a DeletionSchedule.
     */
    data: XOR<DeletionScheduleUpdateInput, DeletionScheduleUncheckedUpdateInput>
    /**
     * Choose, which DeletionSchedule to update.
     */
    where: DeletionScheduleWhereUniqueInput
  }

  /**
   * DeletionSchedule updateMany
   */
  export type DeletionScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeletionSchedules.
     */
    data: XOR<DeletionScheduleUpdateManyMutationInput, DeletionScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DeletionSchedules to update
     */
    where?: DeletionScheduleWhereInput
    /**
     * Limit how many DeletionSchedules to update.
     */
    limit?: number
  }

  /**
   * DeletionSchedule updateManyAndReturn
   */
  export type DeletionScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * The data used to update DeletionSchedules.
     */
    data: XOR<DeletionScheduleUpdateManyMutationInput, DeletionScheduleUncheckedUpdateManyInput>
    /**
     * Filter which DeletionSchedules to update
     */
    where?: DeletionScheduleWhereInput
    /**
     * Limit how many DeletionSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeletionSchedule upsert
   */
  export type DeletionScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the DeletionSchedule to update in case it exists.
     */
    where: DeletionScheduleWhereUniqueInput
    /**
     * In case the DeletionSchedule found by the `where` argument doesn't exist, create a new DeletionSchedule with this data.
     */
    create: XOR<DeletionScheduleCreateInput, DeletionScheduleUncheckedCreateInput>
    /**
     * In case the DeletionSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeletionScheduleUpdateInput, DeletionScheduleUncheckedUpdateInput>
  }

  /**
   * DeletionSchedule delete
   */
  export type DeletionScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
    /**
     * Filter which DeletionSchedule to delete.
     */
    where: DeletionScheduleWhereUniqueInput
  }

  /**
   * DeletionSchedule deleteMany
   */
  export type DeletionScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeletionSchedules to delete
     */
    where?: DeletionScheduleWhereInput
    /**
     * Limit how many DeletionSchedules to delete.
     */
    limit?: number
  }

  /**
   * DeletionSchedule without action
   */
  export type DeletionScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeletionSchedule
     */
    select?: DeletionScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeletionSchedule
     */
    omit?: DeletionScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeletionScheduleInclude<ExtArgs> | null
  }


  /**
   * Model VerificationStatus
   */

  export type AggregateVerificationStatus = {
    _count: VerificationStatusCountAggregateOutputType | null
    _min: VerificationStatusMinAggregateOutputType | null
    _max: VerificationStatusMaxAggregateOutputType | null
  }

  export type VerificationStatusMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    emailVerified: boolean | null
    emailVerifiedDate: Date | null
    phoneVerified: boolean | null
    phoneVerifiedDate: Date | null
    ninVerified: boolean | null
    ninVerifiedDate: Date | null
    bvnVerified: boolean | null
    bvnVerifiedDate: Date | null
    documentVerified: boolean | null
    documentVerifiedDate: Date | null
    dobVerified: boolean | null
    dobVerifiedDate: Date | null
    genderVerified: boolean | null
    genderVerifiedDate: Date | null
    nameVerified: boolean | null
    nameVerificationDate: Date | null
    lastCheckedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationStatusMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    emailVerified: boolean | null
    emailVerifiedDate: Date | null
    phoneVerified: boolean | null
    phoneVerifiedDate: Date | null
    ninVerified: boolean | null
    ninVerifiedDate: Date | null
    bvnVerified: boolean | null
    bvnVerifiedDate: Date | null
    documentVerified: boolean | null
    documentVerifiedDate: Date | null
    dobVerified: boolean | null
    dobVerifiedDate: Date | null
    genderVerified: boolean | null
    genderVerifiedDate: Date | null
    nameVerified: boolean | null
    nameVerificationDate: Date | null
    lastCheckedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationStatusCountAggregateOutputType = {
    id: number
    agentId: number
    emailVerified: number
    emailVerifiedDate: number
    phoneVerified: number
    phoneVerifiedDate: number
    ninVerified: number
    ninVerifiedDate: number
    bvnVerified: number
    bvnVerifiedDate: number
    documentVerified: number
    documentVerifiedDate: number
    dobVerified: number
    dobVerifiedDate: number
    genderVerified: number
    genderVerifiedDate: number
    nameVerified: number
    nameVerificationDate: number
    lastCheckedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationStatusMinAggregateInputType = {
    id?: true
    agentId?: true
    emailVerified?: true
    emailVerifiedDate?: true
    phoneVerified?: true
    phoneVerifiedDate?: true
    ninVerified?: true
    ninVerifiedDate?: true
    bvnVerified?: true
    bvnVerifiedDate?: true
    documentVerified?: true
    documentVerifiedDate?: true
    dobVerified?: true
    dobVerifiedDate?: true
    genderVerified?: true
    genderVerifiedDate?: true
    nameVerified?: true
    nameVerificationDate?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationStatusMaxAggregateInputType = {
    id?: true
    agentId?: true
    emailVerified?: true
    emailVerifiedDate?: true
    phoneVerified?: true
    phoneVerifiedDate?: true
    ninVerified?: true
    ninVerifiedDate?: true
    bvnVerified?: true
    bvnVerifiedDate?: true
    documentVerified?: true
    documentVerifiedDate?: true
    dobVerified?: true
    dobVerifiedDate?: true
    genderVerified?: true
    genderVerifiedDate?: true
    nameVerified?: true
    nameVerificationDate?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationStatusCountAggregateInputType = {
    id?: true
    agentId?: true
    emailVerified?: true
    emailVerifiedDate?: true
    phoneVerified?: true
    phoneVerifiedDate?: true
    ninVerified?: true
    ninVerifiedDate?: true
    bvnVerified?: true
    bvnVerifiedDate?: true
    documentVerified?: true
    documentVerifiedDate?: true
    dobVerified?: true
    dobVerifiedDate?: true
    genderVerified?: true
    genderVerifiedDate?: true
    nameVerified?: true
    nameVerificationDate?: true
    lastCheckedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationStatus to aggregate.
     */
    where?: VerificationStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationStatuses to fetch.
     */
    orderBy?: VerificationStatusOrderByWithRelationInput | VerificationStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationStatuses
    **/
    _count?: true | VerificationStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationStatusMaxAggregateInputType
  }

  export type GetVerificationStatusAggregateType<T extends VerificationStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationStatus[P]>
      : GetScalarType<T[P], AggregateVerificationStatus[P]>
  }




  export type VerificationStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationStatusWhereInput
    orderBy?: VerificationStatusOrderByWithAggregationInput | VerificationStatusOrderByWithAggregationInput[]
    by: VerificationStatusScalarFieldEnum[] | VerificationStatusScalarFieldEnum
    having?: VerificationStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationStatusCountAggregateInputType | true
    _min?: VerificationStatusMinAggregateInputType
    _max?: VerificationStatusMaxAggregateInputType
  }

  export type VerificationStatusGroupByOutputType = {
    id: string
    agentId: string
    emailVerified: boolean
    emailVerifiedDate: Date | null
    phoneVerified: boolean
    phoneVerifiedDate: Date | null
    ninVerified: boolean
    ninVerifiedDate: Date | null
    bvnVerified: boolean
    bvnVerifiedDate: Date | null
    documentVerified: boolean
    documentVerifiedDate: Date | null
    dobVerified: boolean
    dobVerifiedDate: Date | null
    genderVerified: boolean
    genderVerifiedDate: Date | null
    nameVerified: boolean
    nameVerificationDate: Date | null
    lastCheckedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: VerificationStatusCountAggregateOutputType | null
    _min: VerificationStatusMinAggregateOutputType | null
    _max: VerificationStatusMaxAggregateOutputType | null
  }

  type GetVerificationStatusGroupByPayload<T extends VerificationStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationStatusGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationStatusGroupByOutputType[P]>
        }
      >
    >


  export type VerificationStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    emailVerified?: boolean
    emailVerifiedDate?: boolean
    phoneVerified?: boolean
    phoneVerifiedDate?: boolean
    ninVerified?: boolean
    ninVerifiedDate?: boolean
    bvnVerified?: boolean
    bvnVerifiedDate?: boolean
    documentVerified?: boolean
    documentVerifiedDate?: boolean
    dobVerified?: boolean
    dobVerifiedDate?: boolean
    genderVerified?: boolean
    genderVerifiedDate?: boolean
    nameVerified?: boolean
    nameVerificationDate?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationStatus"]>

  export type VerificationStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    emailVerified?: boolean
    emailVerifiedDate?: boolean
    phoneVerified?: boolean
    phoneVerifiedDate?: boolean
    ninVerified?: boolean
    ninVerifiedDate?: boolean
    bvnVerified?: boolean
    bvnVerifiedDate?: boolean
    documentVerified?: boolean
    documentVerifiedDate?: boolean
    dobVerified?: boolean
    dobVerifiedDate?: boolean
    genderVerified?: boolean
    genderVerifiedDate?: boolean
    nameVerified?: boolean
    nameVerificationDate?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationStatus"]>

  export type VerificationStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    emailVerified?: boolean
    emailVerifiedDate?: boolean
    phoneVerified?: boolean
    phoneVerifiedDate?: boolean
    ninVerified?: boolean
    ninVerifiedDate?: boolean
    bvnVerified?: boolean
    bvnVerifiedDate?: boolean
    documentVerified?: boolean
    documentVerifiedDate?: boolean
    dobVerified?: boolean
    dobVerifiedDate?: boolean
    genderVerified?: boolean
    genderVerifiedDate?: boolean
    nameVerified?: boolean
    nameVerificationDate?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationStatus"]>

  export type VerificationStatusSelectScalar = {
    id?: boolean
    agentId?: boolean
    emailVerified?: boolean
    emailVerifiedDate?: boolean
    phoneVerified?: boolean
    phoneVerifiedDate?: boolean
    ninVerified?: boolean
    ninVerifiedDate?: boolean
    bvnVerified?: boolean
    bvnVerifiedDate?: boolean
    documentVerified?: boolean
    documentVerifiedDate?: boolean
    dobVerified?: boolean
    dobVerifiedDate?: boolean
    genderVerified?: boolean
    genderVerifiedDate?: boolean
    nameVerified?: boolean
    nameVerificationDate?: boolean
    lastCheckedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "emailVerified" | "emailVerifiedDate" | "phoneVerified" | "phoneVerifiedDate" | "ninVerified" | "ninVerifiedDate" | "bvnVerified" | "bvnVerifiedDate" | "documentVerified" | "documentVerifiedDate" | "dobVerified" | "dobVerifiedDate" | "genderVerified" | "genderVerifiedDate" | "nameVerified" | "nameVerificationDate" | "lastCheckedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verificationStatus"]>
  export type VerificationStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type VerificationStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type VerificationStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $VerificationStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationStatus"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      emailVerified: boolean
      emailVerifiedDate: Date | null
      phoneVerified: boolean
      phoneVerifiedDate: Date | null
      ninVerified: boolean
      ninVerifiedDate: Date | null
      bvnVerified: boolean
      bvnVerifiedDate: Date | null
      documentVerified: boolean
      documentVerifiedDate: Date | null
      dobVerified: boolean
      dobVerifiedDate: Date | null
      genderVerified: boolean
      genderVerifiedDate: Date | null
      nameVerified: boolean
      nameVerificationDate: Date | null
      lastCheckedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verificationStatus"]>
    composites: {}
  }

  type VerificationStatusGetPayload<S extends boolean | null | undefined | VerificationStatusDefaultArgs> = $Result.GetResult<Prisma.$VerificationStatusPayload, S>

  type VerificationStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationStatusCountAggregateInputType | true
    }

  export interface VerificationStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationStatus'], meta: { name: 'VerificationStatus' } }
    /**
     * Find zero or one VerificationStatus that matches the filter.
     * @param {VerificationStatusFindUniqueArgs} args - Arguments to find a VerificationStatus
     * @example
     * // Get one VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationStatusFindUniqueArgs>(args: SelectSubset<T, VerificationStatusFindUniqueArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationStatusFindUniqueOrThrowArgs} args - Arguments to find a VerificationStatus
     * @example
     * // Get one VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusFindFirstArgs} args - Arguments to find a VerificationStatus
     * @example
     * // Get one VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationStatusFindFirstArgs>(args?: SelectSubset<T, VerificationStatusFindFirstArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusFindFirstOrThrowArgs} args - Arguments to find a VerificationStatus
     * @example
     * // Get one VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationStatuses
     * const verificationStatuses = await prisma.verificationStatus.findMany()
     * 
     * // Get first 10 VerificationStatuses
     * const verificationStatuses = await prisma.verificationStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationStatusWithIdOnly = await prisma.verificationStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationStatusFindManyArgs>(args?: SelectSubset<T, VerificationStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationStatus.
     * @param {VerificationStatusCreateArgs} args - Arguments to create a VerificationStatus.
     * @example
     * // Create one VerificationStatus
     * const VerificationStatus = await prisma.verificationStatus.create({
     *   data: {
     *     // ... data to create a VerificationStatus
     *   }
     * })
     * 
     */
    create<T extends VerificationStatusCreateArgs>(args: SelectSubset<T, VerificationStatusCreateArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationStatuses.
     * @param {VerificationStatusCreateManyArgs} args - Arguments to create many VerificationStatuses.
     * @example
     * // Create many VerificationStatuses
     * const verificationStatus = await prisma.verificationStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationStatusCreateManyArgs>(args?: SelectSubset<T, VerificationStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationStatuses and returns the data saved in the database.
     * @param {VerificationStatusCreateManyAndReturnArgs} args - Arguments to create many VerificationStatuses.
     * @example
     * // Create many VerificationStatuses
     * const verificationStatus = await prisma.verificationStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationStatuses and only return the `id`
     * const verificationStatusWithIdOnly = await prisma.verificationStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationStatus.
     * @param {VerificationStatusDeleteArgs} args - Arguments to delete one VerificationStatus.
     * @example
     * // Delete one VerificationStatus
     * const VerificationStatus = await prisma.verificationStatus.delete({
     *   where: {
     *     // ... filter to delete one VerificationStatus
     *   }
     * })
     * 
     */
    delete<T extends VerificationStatusDeleteArgs>(args: SelectSubset<T, VerificationStatusDeleteArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationStatus.
     * @param {VerificationStatusUpdateArgs} args - Arguments to update one VerificationStatus.
     * @example
     * // Update one VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationStatusUpdateArgs>(args: SelectSubset<T, VerificationStatusUpdateArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationStatuses.
     * @param {VerificationStatusDeleteManyArgs} args - Arguments to filter VerificationStatuses to delete.
     * @example
     * // Delete a few VerificationStatuses
     * const { count } = await prisma.verificationStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationStatusDeleteManyArgs>(args?: SelectSubset<T, VerificationStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationStatuses
     * const verificationStatus = await prisma.verificationStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationStatusUpdateManyArgs>(args: SelectSubset<T, VerificationStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationStatuses and returns the data updated in the database.
     * @param {VerificationStatusUpdateManyAndReturnArgs} args - Arguments to update many VerificationStatuses.
     * @example
     * // Update many VerificationStatuses
     * const verificationStatus = await prisma.verificationStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationStatuses and only return the `id`
     * const verificationStatusWithIdOnly = await prisma.verificationStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationStatus.
     * @param {VerificationStatusUpsertArgs} args - Arguments to update or create a VerificationStatus.
     * @example
     * // Update or create a VerificationStatus
     * const verificationStatus = await prisma.verificationStatus.upsert({
     *   create: {
     *     // ... data to create a VerificationStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationStatus we want to update
     *   }
     * })
     */
    upsert<T extends VerificationStatusUpsertArgs>(args: SelectSubset<T, VerificationStatusUpsertArgs<ExtArgs>>): Prisma__VerificationStatusClient<$Result.GetResult<Prisma.$VerificationStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusCountArgs} args - Arguments to filter VerificationStatuses to count.
     * @example
     * // Count the number of VerificationStatuses
     * const count = await prisma.verificationStatus.count({
     *   where: {
     *     // ... the filter for the VerificationStatuses we want to count
     *   }
     * })
    **/
    count<T extends VerificationStatusCountArgs>(
      args?: Subset<T, VerificationStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationStatusAggregateArgs>(args: Subset<T, VerificationStatusAggregateArgs>): Prisma.PrismaPromise<GetVerificationStatusAggregateType<T>>

    /**
     * Group by VerificationStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationStatusGroupByArgs['orderBy'] }
        : { orderBy?: VerificationStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationStatus model
   */
  readonly fields: VerificationStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationStatus model
   */
  interface VerificationStatusFieldRefs {
    readonly id: FieldRef<"VerificationStatus", 'String'>
    readonly agentId: FieldRef<"VerificationStatus", 'String'>
    readonly emailVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly emailVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly phoneVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly phoneVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly ninVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly ninVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly bvnVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly bvnVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly documentVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly documentVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly dobVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly dobVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly genderVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly genderVerifiedDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly nameVerified: FieldRef<"VerificationStatus", 'Boolean'>
    readonly nameVerificationDate: FieldRef<"VerificationStatus", 'DateTime'>
    readonly lastCheckedAt: FieldRef<"VerificationStatus", 'DateTime'>
    readonly createdAt: FieldRef<"VerificationStatus", 'DateTime'>
    readonly updatedAt: FieldRef<"VerificationStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationStatus findUnique
   */
  export type VerificationStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter, which VerificationStatus to fetch.
     */
    where: VerificationStatusWhereUniqueInput
  }

  /**
   * VerificationStatus findUniqueOrThrow
   */
  export type VerificationStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter, which VerificationStatus to fetch.
     */
    where: VerificationStatusWhereUniqueInput
  }

  /**
   * VerificationStatus findFirst
   */
  export type VerificationStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter, which VerificationStatus to fetch.
     */
    where?: VerificationStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationStatuses to fetch.
     */
    orderBy?: VerificationStatusOrderByWithRelationInput | VerificationStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationStatuses.
     */
    cursor?: VerificationStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationStatuses.
     */
    distinct?: VerificationStatusScalarFieldEnum | VerificationStatusScalarFieldEnum[]
  }

  /**
   * VerificationStatus findFirstOrThrow
   */
  export type VerificationStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter, which VerificationStatus to fetch.
     */
    where?: VerificationStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationStatuses to fetch.
     */
    orderBy?: VerificationStatusOrderByWithRelationInput | VerificationStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationStatuses.
     */
    cursor?: VerificationStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationStatuses.
     */
    distinct?: VerificationStatusScalarFieldEnum | VerificationStatusScalarFieldEnum[]
  }

  /**
   * VerificationStatus findMany
   */
  export type VerificationStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter, which VerificationStatuses to fetch.
     */
    where?: VerificationStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationStatuses to fetch.
     */
    orderBy?: VerificationStatusOrderByWithRelationInput | VerificationStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationStatuses.
     */
    cursor?: VerificationStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationStatuses.
     */
    skip?: number
    distinct?: VerificationStatusScalarFieldEnum | VerificationStatusScalarFieldEnum[]
  }

  /**
   * VerificationStatus create
   */
  export type VerificationStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a VerificationStatus.
     */
    data: XOR<VerificationStatusCreateInput, VerificationStatusUncheckedCreateInput>
  }

  /**
   * VerificationStatus createMany
   */
  export type VerificationStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationStatuses.
     */
    data: VerificationStatusCreateManyInput | VerificationStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationStatus createManyAndReturn
   */
  export type VerificationStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationStatuses.
     */
    data: VerificationStatusCreateManyInput | VerificationStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificationStatus update
   */
  export type VerificationStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a VerificationStatus.
     */
    data: XOR<VerificationStatusUpdateInput, VerificationStatusUncheckedUpdateInput>
    /**
     * Choose, which VerificationStatus to update.
     */
    where: VerificationStatusWhereUniqueInput
  }

  /**
   * VerificationStatus updateMany
   */
  export type VerificationStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationStatuses.
     */
    data: XOR<VerificationStatusUpdateManyMutationInput, VerificationStatusUncheckedUpdateManyInput>
    /**
     * Filter which VerificationStatuses to update
     */
    where?: VerificationStatusWhereInput
    /**
     * Limit how many VerificationStatuses to update.
     */
    limit?: number
  }

  /**
   * VerificationStatus updateManyAndReturn
   */
  export type VerificationStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * The data used to update VerificationStatuses.
     */
    data: XOR<VerificationStatusUpdateManyMutationInput, VerificationStatusUncheckedUpdateManyInput>
    /**
     * Filter which VerificationStatuses to update
     */
    where?: VerificationStatusWhereInput
    /**
     * Limit how many VerificationStatuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificationStatus upsert
   */
  export type VerificationStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the VerificationStatus to update in case it exists.
     */
    where: VerificationStatusWhereUniqueInput
    /**
     * In case the VerificationStatus found by the `where` argument doesn't exist, create a new VerificationStatus with this data.
     */
    create: XOR<VerificationStatusCreateInput, VerificationStatusUncheckedCreateInput>
    /**
     * In case the VerificationStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationStatusUpdateInput, VerificationStatusUncheckedUpdateInput>
  }

  /**
   * VerificationStatus delete
   */
  export type VerificationStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
    /**
     * Filter which VerificationStatus to delete.
     */
    where: VerificationStatusWhereUniqueInput
  }

  /**
   * VerificationStatus deleteMany
   */
  export type VerificationStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationStatuses to delete
     */
    where?: VerificationStatusWhereInput
    /**
     * Limit how many VerificationStatuses to delete.
     */
    limit?: number
  }

  /**
   * VerificationStatus without action
   */
  export type VerificationStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationStatus
     */
    select?: VerificationStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationStatus
     */
    omit?: VerificationStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationStatusInclude<ExtArgs> | null
  }


  /**
   * Model FailedAttempt
   */

  export type AggregateFailedAttempt = {
    _count: FailedAttemptCountAggregateOutputType | null
    _avg: FailedAttemptAvgAggregateOutputType | null
    _sum: FailedAttemptSumAggregateOutputType | null
    _min: FailedAttemptMinAggregateOutputType | null
    _max: FailedAttemptMaxAggregateOutputType | null
  }

  export type FailedAttemptAvgAggregateOutputType = {
    attempts: number | null
  }

  export type FailedAttemptSumAggregateOutputType = {
    attempts: number | null
  }

  export type FailedAttemptMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    action: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    attempts: number | null
  }

  export type FailedAttemptMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    action: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    attempts: number | null
  }

  export type FailedAttemptCountAggregateOutputType = {
    id: number
    agentId: number
    action: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    attempts: number
    _all: number
  }


  export type FailedAttemptAvgAggregateInputType = {
    attempts?: true
  }

  export type FailedAttemptSumAggregateInputType = {
    attempts?: true
  }

  export type FailedAttemptMinAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    attempts?: true
  }

  export type FailedAttemptMaxAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    attempts?: true
  }

  export type FailedAttemptCountAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    attempts?: true
    _all?: true
  }

  export type FailedAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailedAttempt to aggregate.
     */
    where?: FailedAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedAttempts to fetch.
     */
    orderBy?: FailedAttemptOrderByWithRelationInput | FailedAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FailedAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FailedAttempts
    **/
    _count?: true | FailedAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FailedAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FailedAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FailedAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FailedAttemptMaxAggregateInputType
  }

  export type GetFailedAttemptAggregateType<T extends FailedAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateFailedAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFailedAttempt[P]>
      : GetScalarType<T[P], AggregateFailedAttempt[P]>
  }




  export type FailedAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailedAttemptWhereInput
    orderBy?: FailedAttemptOrderByWithAggregationInput | FailedAttemptOrderByWithAggregationInput[]
    by: FailedAttemptScalarFieldEnum[] | FailedAttemptScalarFieldEnum
    having?: FailedAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FailedAttemptCountAggregateInputType | true
    _avg?: FailedAttemptAvgAggregateInputType
    _sum?: FailedAttemptSumAggregateInputType
    _min?: FailedAttemptMinAggregateInputType
    _max?: FailedAttemptMaxAggregateInputType
  }

  export type FailedAttemptGroupByOutputType = {
    id: string
    agentId: string
    action: string
    details: string | null
    ipAddress: string
    userAgent: string | null
    createdAt: Date
    attempts: number
    _count: FailedAttemptCountAggregateOutputType | null
    _avg: FailedAttemptAvgAggregateOutputType | null
    _sum: FailedAttemptSumAggregateOutputType | null
    _min: FailedAttemptMinAggregateOutputType | null
    _max: FailedAttemptMaxAggregateOutputType | null
  }

  type GetFailedAttemptGroupByPayload<T extends FailedAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FailedAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FailedAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FailedAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], FailedAttemptGroupByOutputType[P]>
        }
      >
    >


  export type FailedAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    attempts?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedAttempt"]>

  export type FailedAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    attempts?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedAttempt"]>

  export type FailedAttemptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    attempts?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedAttempt"]>

  export type FailedAttemptSelectScalar = {
    id?: boolean
    agentId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    attempts?: boolean
  }

  export type FailedAttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "action" | "details" | "ipAddress" | "userAgent" | "createdAt" | "attempts", ExtArgs["result"]["failedAttempt"]>
  export type FailedAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type FailedAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type FailedAttemptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $FailedAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FailedAttempt"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      action: string
      details: string | null
      ipAddress: string
      userAgent: string | null
      createdAt: Date
      attempts: number
    }, ExtArgs["result"]["failedAttempt"]>
    composites: {}
  }

  type FailedAttemptGetPayload<S extends boolean | null | undefined | FailedAttemptDefaultArgs> = $Result.GetResult<Prisma.$FailedAttemptPayload, S>

  type FailedAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FailedAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FailedAttemptCountAggregateInputType | true
    }

  export interface FailedAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FailedAttempt'], meta: { name: 'FailedAttempt' } }
    /**
     * Find zero or one FailedAttempt that matches the filter.
     * @param {FailedAttemptFindUniqueArgs} args - Arguments to find a FailedAttempt
     * @example
     * // Get one FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FailedAttemptFindUniqueArgs>(args: SelectSubset<T, FailedAttemptFindUniqueArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FailedAttempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FailedAttemptFindUniqueOrThrowArgs} args - Arguments to find a FailedAttempt
     * @example
     * // Get one FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FailedAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, FailedAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FailedAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptFindFirstArgs} args - Arguments to find a FailedAttempt
     * @example
     * // Get one FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FailedAttemptFindFirstArgs>(args?: SelectSubset<T, FailedAttemptFindFirstArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FailedAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptFindFirstOrThrowArgs} args - Arguments to find a FailedAttempt
     * @example
     * // Get one FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FailedAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, FailedAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FailedAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FailedAttempts
     * const failedAttempts = await prisma.failedAttempt.findMany()
     * 
     * // Get first 10 FailedAttempts
     * const failedAttempts = await prisma.failedAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const failedAttemptWithIdOnly = await prisma.failedAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FailedAttemptFindManyArgs>(args?: SelectSubset<T, FailedAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FailedAttempt.
     * @param {FailedAttemptCreateArgs} args - Arguments to create a FailedAttempt.
     * @example
     * // Create one FailedAttempt
     * const FailedAttempt = await prisma.failedAttempt.create({
     *   data: {
     *     // ... data to create a FailedAttempt
     *   }
     * })
     * 
     */
    create<T extends FailedAttemptCreateArgs>(args: SelectSubset<T, FailedAttemptCreateArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FailedAttempts.
     * @param {FailedAttemptCreateManyArgs} args - Arguments to create many FailedAttempts.
     * @example
     * // Create many FailedAttempts
     * const failedAttempt = await prisma.failedAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FailedAttemptCreateManyArgs>(args?: SelectSubset<T, FailedAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FailedAttempts and returns the data saved in the database.
     * @param {FailedAttemptCreateManyAndReturnArgs} args - Arguments to create many FailedAttempts.
     * @example
     * // Create many FailedAttempts
     * const failedAttempt = await prisma.failedAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FailedAttempts and only return the `id`
     * const failedAttemptWithIdOnly = await prisma.failedAttempt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FailedAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, FailedAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FailedAttempt.
     * @param {FailedAttemptDeleteArgs} args - Arguments to delete one FailedAttempt.
     * @example
     * // Delete one FailedAttempt
     * const FailedAttempt = await prisma.failedAttempt.delete({
     *   where: {
     *     // ... filter to delete one FailedAttempt
     *   }
     * })
     * 
     */
    delete<T extends FailedAttemptDeleteArgs>(args: SelectSubset<T, FailedAttemptDeleteArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FailedAttempt.
     * @param {FailedAttemptUpdateArgs} args - Arguments to update one FailedAttempt.
     * @example
     * // Update one FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FailedAttemptUpdateArgs>(args: SelectSubset<T, FailedAttemptUpdateArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FailedAttempts.
     * @param {FailedAttemptDeleteManyArgs} args - Arguments to filter FailedAttempts to delete.
     * @example
     * // Delete a few FailedAttempts
     * const { count } = await prisma.failedAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FailedAttemptDeleteManyArgs>(args?: SelectSubset<T, FailedAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FailedAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FailedAttempts
     * const failedAttempt = await prisma.failedAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FailedAttemptUpdateManyArgs>(args: SelectSubset<T, FailedAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FailedAttempts and returns the data updated in the database.
     * @param {FailedAttemptUpdateManyAndReturnArgs} args - Arguments to update many FailedAttempts.
     * @example
     * // Update many FailedAttempts
     * const failedAttempt = await prisma.failedAttempt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FailedAttempts and only return the `id`
     * const failedAttemptWithIdOnly = await prisma.failedAttempt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FailedAttemptUpdateManyAndReturnArgs>(args: SelectSubset<T, FailedAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FailedAttempt.
     * @param {FailedAttemptUpsertArgs} args - Arguments to update or create a FailedAttempt.
     * @example
     * // Update or create a FailedAttempt
     * const failedAttempt = await prisma.failedAttempt.upsert({
     *   create: {
     *     // ... data to create a FailedAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FailedAttempt we want to update
     *   }
     * })
     */
    upsert<T extends FailedAttemptUpsertArgs>(args: SelectSubset<T, FailedAttemptUpsertArgs<ExtArgs>>): Prisma__FailedAttemptClient<$Result.GetResult<Prisma.$FailedAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FailedAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptCountArgs} args - Arguments to filter FailedAttempts to count.
     * @example
     * // Count the number of FailedAttempts
     * const count = await prisma.failedAttempt.count({
     *   where: {
     *     // ... the filter for the FailedAttempts we want to count
     *   }
     * })
    **/
    count<T extends FailedAttemptCountArgs>(
      args?: Subset<T, FailedAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FailedAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FailedAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FailedAttemptAggregateArgs>(args: Subset<T, FailedAttemptAggregateArgs>): Prisma.PrismaPromise<GetFailedAttemptAggregateType<T>>

    /**
     * Group by FailedAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FailedAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FailedAttemptGroupByArgs['orderBy'] }
        : { orderBy?: FailedAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FailedAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFailedAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FailedAttempt model
   */
  readonly fields: FailedAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FailedAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FailedAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FailedAttempt model
   */
  interface FailedAttemptFieldRefs {
    readonly id: FieldRef<"FailedAttempt", 'String'>
    readonly agentId: FieldRef<"FailedAttempt", 'String'>
    readonly action: FieldRef<"FailedAttempt", 'String'>
    readonly details: FieldRef<"FailedAttempt", 'String'>
    readonly ipAddress: FieldRef<"FailedAttempt", 'String'>
    readonly userAgent: FieldRef<"FailedAttempt", 'String'>
    readonly createdAt: FieldRef<"FailedAttempt", 'DateTime'>
    readonly attempts: FieldRef<"FailedAttempt", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FailedAttempt findUnique
   */
  export type FailedAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedAttempt to fetch.
     */
    where: FailedAttemptWhereUniqueInput
  }

  /**
   * FailedAttempt findUniqueOrThrow
   */
  export type FailedAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedAttempt to fetch.
     */
    where: FailedAttemptWhereUniqueInput
  }

  /**
   * FailedAttempt findFirst
   */
  export type FailedAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedAttempt to fetch.
     */
    where?: FailedAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedAttempts to fetch.
     */
    orderBy?: FailedAttemptOrderByWithRelationInput | FailedAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailedAttempts.
     */
    cursor?: FailedAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailedAttempts.
     */
    distinct?: FailedAttemptScalarFieldEnum | FailedAttemptScalarFieldEnum[]
  }

  /**
   * FailedAttempt findFirstOrThrow
   */
  export type FailedAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedAttempt to fetch.
     */
    where?: FailedAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedAttempts to fetch.
     */
    orderBy?: FailedAttemptOrderByWithRelationInput | FailedAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailedAttempts.
     */
    cursor?: FailedAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailedAttempts.
     */
    distinct?: FailedAttemptScalarFieldEnum | FailedAttemptScalarFieldEnum[]
  }

  /**
   * FailedAttempt findMany
   */
  export type FailedAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedAttempts to fetch.
     */
    where?: FailedAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedAttempts to fetch.
     */
    orderBy?: FailedAttemptOrderByWithRelationInput | FailedAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FailedAttempts.
     */
    cursor?: FailedAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedAttempts.
     */
    skip?: number
    distinct?: FailedAttemptScalarFieldEnum | FailedAttemptScalarFieldEnum[]
  }

  /**
   * FailedAttempt create
   */
  export type FailedAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a FailedAttempt.
     */
    data: XOR<FailedAttemptCreateInput, FailedAttemptUncheckedCreateInput>
  }

  /**
   * FailedAttempt createMany
   */
  export type FailedAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FailedAttempts.
     */
    data: FailedAttemptCreateManyInput | FailedAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FailedAttempt createManyAndReturn
   */
  export type FailedAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * The data used to create many FailedAttempts.
     */
    data: FailedAttemptCreateManyInput | FailedAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FailedAttempt update
   */
  export type FailedAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a FailedAttempt.
     */
    data: XOR<FailedAttemptUpdateInput, FailedAttemptUncheckedUpdateInput>
    /**
     * Choose, which FailedAttempt to update.
     */
    where: FailedAttemptWhereUniqueInput
  }

  /**
   * FailedAttempt updateMany
   */
  export type FailedAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FailedAttempts.
     */
    data: XOR<FailedAttemptUpdateManyMutationInput, FailedAttemptUncheckedUpdateManyInput>
    /**
     * Filter which FailedAttempts to update
     */
    where?: FailedAttemptWhereInput
    /**
     * Limit how many FailedAttempts to update.
     */
    limit?: number
  }

  /**
   * FailedAttempt updateManyAndReturn
   */
  export type FailedAttemptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * The data used to update FailedAttempts.
     */
    data: XOR<FailedAttemptUpdateManyMutationInput, FailedAttemptUncheckedUpdateManyInput>
    /**
     * Filter which FailedAttempts to update
     */
    where?: FailedAttemptWhereInput
    /**
     * Limit how many FailedAttempts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FailedAttempt upsert
   */
  export type FailedAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the FailedAttempt to update in case it exists.
     */
    where: FailedAttemptWhereUniqueInput
    /**
     * In case the FailedAttempt found by the `where` argument doesn't exist, create a new FailedAttempt with this data.
     */
    create: XOR<FailedAttemptCreateInput, FailedAttemptUncheckedCreateInput>
    /**
     * In case the FailedAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FailedAttemptUpdateInput, FailedAttemptUncheckedUpdateInput>
  }

  /**
   * FailedAttempt delete
   */
  export type FailedAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
    /**
     * Filter which FailedAttempt to delete.
     */
    where: FailedAttemptWhereUniqueInput
  }

  /**
   * FailedAttempt deleteMany
   */
  export type FailedAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailedAttempts to delete
     */
    where?: FailedAttemptWhereInput
    /**
     * Limit how many FailedAttempts to delete.
     */
    limit?: number
  }

  /**
   * FailedAttempt without action
   */
  export type FailedAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedAttempt
     */
    select?: FailedAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedAttempt
     */
    omit?: FailedAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedAttemptInclude<ExtArgs> | null
  }


  /**
   * Model FailedDeletionAttempt
   */

  export type AggregateFailedDeletionAttempt = {
    _count: FailedDeletionAttemptCountAggregateOutputType | null
    _avg: FailedDeletionAttemptAvgAggregateOutputType | null
    _sum: FailedDeletionAttemptSumAggregateOutputType | null
    _min: FailedDeletionAttemptMinAggregateOutputType | null
    _max: FailedDeletionAttemptMaxAggregateOutputType | null
  }

  export type FailedDeletionAttemptAvgAggregateOutputType = {
    attempts: number | null
  }

  export type FailedDeletionAttemptSumAggregateOutputType = {
    attempts: number | null
  }

  export type FailedDeletionAttemptMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    attempts: number | null
    details: string | null
    createdAt: Date | null
  }

  export type FailedDeletionAttemptMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    attempts: number | null
    details: string | null
    createdAt: Date | null
  }

  export type FailedDeletionAttemptCountAggregateOutputType = {
    id: number
    agentId: number
    action: number
    ipAddress: number
    userAgent: number
    attempts: number
    details: number
    createdAt: number
    _all: number
  }


  export type FailedDeletionAttemptAvgAggregateInputType = {
    attempts?: true
  }

  export type FailedDeletionAttemptSumAggregateInputType = {
    attempts?: true
  }

  export type FailedDeletionAttemptMinAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    attempts?: true
    details?: true
    createdAt?: true
  }

  export type FailedDeletionAttemptMaxAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    attempts?: true
    details?: true
    createdAt?: true
  }

  export type FailedDeletionAttemptCountAggregateInputType = {
    id?: true
    agentId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    attempts?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type FailedDeletionAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailedDeletionAttempt to aggregate.
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedDeletionAttempts to fetch.
     */
    orderBy?: FailedDeletionAttemptOrderByWithRelationInput | FailedDeletionAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FailedDeletionAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedDeletionAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedDeletionAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FailedDeletionAttempts
    **/
    _count?: true | FailedDeletionAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FailedDeletionAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FailedDeletionAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FailedDeletionAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FailedDeletionAttemptMaxAggregateInputType
  }

  export type GetFailedDeletionAttemptAggregateType<T extends FailedDeletionAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateFailedDeletionAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFailedDeletionAttempt[P]>
      : GetScalarType<T[P], AggregateFailedDeletionAttempt[P]>
  }




  export type FailedDeletionAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailedDeletionAttemptWhereInput
    orderBy?: FailedDeletionAttemptOrderByWithAggregationInput | FailedDeletionAttemptOrderByWithAggregationInput[]
    by: FailedDeletionAttemptScalarFieldEnum[] | FailedDeletionAttemptScalarFieldEnum
    having?: FailedDeletionAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FailedDeletionAttemptCountAggregateInputType | true
    _avg?: FailedDeletionAttemptAvgAggregateInputType
    _sum?: FailedDeletionAttemptSumAggregateInputType
    _min?: FailedDeletionAttemptMinAggregateInputType
    _max?: FailedDeletionAttemptMaxAggregateInputType
  }

  export type FailedDeletionAttemptGroupByOutputType = {
    id: string
    agentId: string
    action: string
    ipAddress: string
    userAgent: string | null
    attempts: number
    details: string | null
    createdAt: Date
    _count: FailedDeletionAttemptCountAggregateOutputType | null
    _avg: FailedDeletionAttemptAvgAggregateOutputType | null
    _sum: FailedDeletionAttemptSumAggregateOutputType | null
    _min: FailedDeletionAttemptMinAggregateOutputType | null
    _max: FailedDeletionAttemptMaxAggregateOutputType | null
  }

  type GetFailedDeletionAttemptGroupByPayload<T extends FailedDeletionAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FailedDeletionAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FailedDeletionAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FailedDeletionAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], FailedDeletionAttemptGroupByOutputType[P]>
        }
      >
    >


  export type FailedDeletionAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    attempts?: boolean
    details?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedDeletionAttempt"]>

  export type FailedDeletionAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    attempts?: boolean
    details?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedDeletionAttempt"]>

  export type FailedDeletionAttemptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    attempts?: boolean
    details?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failedDeletionAttempt"]>

  export type FailedDeletionAttemptSelectScalar = {
    id?: boolean
    agentId?: boolean
    action?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    attempts?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type FailedDeletionAttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "action" | "ipAddress" | "userAgent" | "attempts" | "details" | "createdAt", ExtArgs["result"]["failedDeletionAttempt"]>
  export type FailedDeletionAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type FailedDeletionAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type FailedDeletionAttemptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $FailedDeletionAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FailedDeletionAttempt"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      action: string
      ipAddress: string
      userAgent: string | null
      attempts: number
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["failedDeletionAttempt"]>
    composites: {}
  }

  type FailedDeletionAttemptGetPayload<S extends boolean | null | undefined | FailedDeletionAttemptDefaultArgs> = $Result.GetResult<Prisma.$FailedDeletionAttemptPayload, S>

  type FailedDeletionAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FailedDeletionAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FailedDeletionAttemptCountAggregateInputType | true
    }

  export interface FailedDeletionAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FailedDeletionAttempt'], meta: { name: 'FailedDeletionAttempt' } }
    /**
     * Find zero or one FailedDeletionAttempt that matches the filter.
     * @param {FailedDeletionAttemptFindUniqueArgs} args - Arguments to find a FailedDeletionAttempt
     * @example
     * // Get one FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FailedDeletionAttemptFindUniqueArgs>(args: SelectSubset<T, FailedDeletionAttemptFindUniqueArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FailedDeletionAttempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FailedDeletionAttemptFindUniqueOrThrowArgs} args - Arguments to find a FailedDeletionAttempt
     * @example
     * // Get one FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FailedDeletionAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, FailedDeletionAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FailedDeletionAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptFindFirstArgs} args - Arguments to find a FailedDeletionAttempt
     * @example
     * // Get one FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FailedDeletionAttemptFindFirstArgs>(args?: SelectSubset<T, FailedDeletionAttemptFindFirstArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FailedDeletionAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptFindFirstOrThrowArgs} args - Arguments to find a FailedDeletionAttempt
     * @example
     * // Get one FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FailedDeletionAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, FailedDeletionAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FailedDeletionAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FailedDeletionAttempts
     * const failedDeletionAttempts = await prisma.failedDeletionAttempt.findMany()
     * 
     * // Get first 10 FailedDeletionAttempts
     * const failedDeletionAttempts = await prisma.failedDeletionAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const failedDeletionAttemptWithIdOnly = await prisma.failedDeletionAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FailedDeletionAttemptFindManyArgs>(args?: SelectSubset<T, FailedDeletionAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FailedDeletionAttempt.
     * @param {FailedDeletionAttemptCreateArgs} args - Arguments to create a FailedDeletionAttempt.
     * @example
     * // Create one FailedDeletionAttempt
     * const FailedDeletionAttempt = await prisma.failedDeletionAttempt.create({
     *   data: {
     *     // ... data to create a FailedDeletionAttempt
     *   }
     * })
     * 
     */
    create<T extends FailedDeletionAttemptCreateArgs>(args: SelectSubset<T, FailedDeletionAttemptCreateArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FailedDeletionAttempts.
     * @param {FailedDeletionAttemptCreateManyArgs} args - Arguments to create many FailedDeletionAttempts.
     * @example
     * // Create many FailedDeletionAttempts
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FailedDeletionAttemptCreateManyArgs>(args?: SelectSubset<T, FailedDeletionAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FailedDeletionAttempts and returns the data saved in the database.
     * @param {FailedDeletionAttemptCreateManyAndReturnArgs} args - Arguments to create many FailedDeletionAttempts.
     * @example
     * // Create many FailedDeletionAttempts
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FailedDeletionAttempts and only return the `id`
     * const failedDeletionAttemptWithIdOnly = await prisma.failedDeletionAttempt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FailedDeletionAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, FailedDeletionAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FailedDeletionAttempt.
     * @param {FailedDeletionAttemptDeleteArgs} args - Arguments to delete one FailedDeletionAttempt.
     * @example
     * // Delete one FailedDeletionAttempt
     * const FailedDeletionAttempt = await prisma.failedDeletionAttempt.delete({
     *   where: {
     *     // ... filter to delete one FailedDeletionAttempt
     *   }
     * })
     * 
     */
    delete<T extends FailedDeletionAttemptDeleteArgs>(args: SelectSubset<T, FailedDeletionAttemptDeleteArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FailedDeletionAttempt.
     * @param {FailedDeletionAttemptUpdateArgs} args - Arguments to update one FailedDeletionAttempt.
     * @example
     * // Update one FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FailedDeletionAttemptUpdateArgs>(args: SelectSubset<T, FailedDeletionAttemptUpdateArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FailedDeletionAttempts.
     * @param {FailedDeletionAttemptDeleteManyArgs} args - Arguments to filter FailedDeletionAttempts to delete.
     * @example
     * // Delete a few FailedDeletionAttempts
     * const { count } = await prisma.failedDeletionAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FailedDeletionAttemptDeleteManyArgs>(args?: SelectSubset<T, FailedDeletionAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FailedDeletionAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FailedDeletionAttempts
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FailedDeletionAttemptUpdateManyArgs>(args: SelectSubset<T, FailedDeletionAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FailedDeletionAttempts and returns the data updated in the database.
     * @param {FailedDeletionAttemptUpdateManyAndReturnArgs} args - Arguments to update many FailedDeletionAttempts.
     * @example
     * // Update many FailedDeletionAttempts
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FailedDeletionAttempts and only return the `id`
     * const failedDeletionAttemptWithIdOnly = await prisma.failedDeletionAttempt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FailedDeletionAttemptUpdateManyAndReturnArgs>(args: SelectSubset<T, FailedDeletionAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FailedDeletionAttempt.
     * @param {FailedDeletionAttemptUpsertArgs} args - Arguments to update or create a FailedDeletionAttempt.
     * @example
     * // Update or create a FailedDeletionAttempt
     * const failedDeletionAttempt = await prisma.failedDeletionAttempt.upsert({
     *   create: {
     *     // ... data to create a FailedDeletionAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FailedDeletionAttempt we want to update
     *   }
     * })
     */
    upsert<T extends FailedDeletionAttemptUpsertArgs>(args: SelectSubset<T, FailedDeletionAttemptUpsertArgs<ExtArgs>>): Prisma__FailedDeletionAttemptClient<$Result.GetResult<Prisma.$FailedDeletionAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FailedDeletionAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptCountArgs} args - Arguments to filter FailedDeletionAttempts to count.
     * @example
     * // Count the number of FailedDeletionAttempts
     * const count = await prisma.failedDeletionAttempt.count({
     *   where: {
     *     // ... the filter for the FailedDeletionAttempts we want to count
     *   }
     * })
    **/
    count<T extends FailedDeletionAttemptCountArgs>(
      args?: Subset<T, FailedDeletionAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FailedDeletionAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FailedDeletionAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FailedDeletionAttemptAggregateArgs>(args: Subset<T, FailedDeletionAttemptAggregateArgs>): Prisma.PrismaPromise<GetFailedDeletionAttemptAggregateType<T>>

    /**
     * Group by FailedDeletionAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailedDeletionAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FailedDeletionAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FailedDeletionAttemptGroupByArgs['orderBy'] }
        : { orderBy?: FailedDeletionAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FailedDeletionAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFailedDeletionAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FailedDeletionAttempt model
   */
  readonly fields: FailedDeletionAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FailedDeletionAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FailedDeletionAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FailedDeletionAttempt model
   */
  interface FailedDeletionAttemptFieldRefs {
    readonly id: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly agentId: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly action: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly ipAddress: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly userAgent: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly attempts: FieldRef<"FailedDeletionAttempt", 'Int'>
    readonly details: FieldRef<"FailedDeletionAttempt", 'String'>
    readonly createdAt: FieldRef<"FailedDeletionAttempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FailedDeletionAttempt findUnique
   */
  export type FailedDeletionAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedDeletionAttempt to fetch.
     */
    where: FailedDeletionAttemptWhereUniqueInput
  }

  /**
   * FailedDeletionAttempt findUniqueOrThrow
   */
  export type FailedDeletionAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedDeletionAttempt to fetch.
     */
    where: FailedDeletionAttemptWhereUniqueInput
  }

  /**
   * FailedDeletionAttempt findFirst
   */
  export type FailedDeletionAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedDeletionAttempt to fetch.
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedDeletionAttempts to fetch.
     */
    orderBy?: FailedDeletionAttemptOrderByWithRelationInput | FailedDeletionAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailedDeletionAttempts.
     */
    cursor?: FailedDeletionAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedDeletionAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedDeletionAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailedDeletionAttempts.
     */
    distinct?: FailedDeletionAttemptScalarFieldEnum | FailedDeletionAttemptScalarFieldEnum[]
  }

  /**
   * FailedDeletionAttempt findFirstOrThrow
   */
  export type FailedDeletionAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedDeletionAttempt to fetch.
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedDeletionAttempts to fetch.
     */
    orderBy?: FailedDeletionAttemptOrderByWithRelationInput | FailedDeletionAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailedDeletionAttempts.
     */
    cursor?: FailedDeletionAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedDeletionAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedDeletionAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailedDeletionAttempts.
     */
    distinct?: FailedDeletionAttemptScalarFieldEnum | FailedDeletionAttemptScalarFieldEnum[]
  }

  /**
   * FailedDeletionAttempt findMany
   */
  export type FailedDeletionAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter, which FailedDeletionAttempts to fetch.
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailedDeletionAttempts to fetch.
     */
    orderBy?: FailedDeletionAttemptOrderByWithRelationInput | FailedDeletionAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FailedDeletionAttempts.
     */
    cursor?: FailedDeletionAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailedDeletionAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailedDeletionAttempts.
     */
    skip?: number
    distinct?: FailedDeletionAttemptScalarFieldEnum | FailedDeletionAttemptScalarFieldEnum[]
  }

  /**
   * FailedDeletionAttempt create
   */
  export type FailedDeletionAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a FailedDeletionAttempt.
     */
    data: XOR<FailedDeletionAttemptCreateInput, FailedDeletionAttemptUncheckedCreateInput>
  }

  /**
   * FailedDeletionAttempt createMany
   */
  export type FailedDeletionAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FailedDeletionAttempts.
     */
    data: FailedDeletionAttemptCreateManyInput | FailedDeletionAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FailedDeletionAttempt createManyAndReturn
   */
  export type FailedDeletionAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * The data used to create many FailedDeletionAttempts.
     */
    data: FailedDeletionAttemptCreateManyInput | FailedDeletionAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FailedDeletionAttempt update
   */
  export type FailedDeletionAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a FailedDeletionAttempt.
     */
    data: XOR<FailedDeletionAttemptUpdateInput, FailedDeletionAttemptUncheckedUpdateInput>
    /**
     * Choose, which FailedDeletionAttempt to update.
     */
    where: FailedDeletionAttemptWhereUniqueInput
  }

  /**
   * FailedDeletionAttempt updateMany
   */
  export type FailedDeletionAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FailedDeletionAttempts.
     */
    data: XOR<FailedDeletionAttemptUpdateManyMutationInput, FailedDeletionAttemptUncheckedUpdateManyInput>
    /**
     * Filter which FailedDeletionAttempts to update
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * Limit how many FailedDeletionAttempts to update.
     */
    limit?: number
  }

  /**
   * FailedDeletionAttempt updateManyAndReturn
   */
  export type FailedDeletionAttemptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * The data used to update FailedDeletionAttempts.
     */
    data: XOR<FailedDeletionAttemptUpdateManyMutationInput, FailedDeletionAttemptUncheckedUpdateManyInput>
    /**
     * Filter which FailedDeletionAttempts to update
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * Limit how many FailedDeletionAttempts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FailedDeletionAttempt upsert
   */
  export type FailedDeletionAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the FailedDeletionAttempt to update in case it exists.
     */
    where: FailedDeletionAttemptWhereUniqueInput
    /**
     * In case the FailedDeletionAttempt found by the `where` argument doesn't exist, create a new FailedDeletionAttempt with this data.
     */
    create: XOR<FailedDeletionAttemptCreateInput, FailedDeletionAttemptUncheckedCreateInput>
    /**
     * In case the FailedDeletionAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FailedDeletionAttemptUpdateInput, FailedDeletionAttemptUncheckedUpdateInput>
  }

  /**
   * FailedDeletionAttempt delete
   */
  export type FailedDeletionAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
    /**
     * Filter which FailedDeletionAttempt to delete.
     */
    where: FailedDeletionAttemptWhereUniqueInput
  }

  /**
   * FailedDeletionAttempt deleteMany
   */
  export type FailedDeletionAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailedDeletionAttempts to delete
     */
    where?: FailedDeletionAttemptWhereInput
    /**
     * Limit how many FailedDeletionAttempts to delete.
     */
    limit?: number
  }

  /**
   * FailedDeletionAttempt without action
   */
  export type FailedDeletionAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailedDeletionAttempt
     */
    select?: FailedDeletionAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FailedDeletionAttempt
     */
    omit?: FailedDeletionAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailedDeletionAttemptInclude<ExtArgs> | null
  }


  /**
   * Model AccountLock
   */

  export type AggregateAccountLock = {
    _count: AccountLockCountAggregateOutputType | null
    _min: AccountLockMinAggregateOutputType | null
    _max: AccountLockMaxAggregateOutputType | null
  }

  export type AccountLockMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    reason: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    action: string | null
    userAgent: string | null
  }

  export type AccountLockMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    reason: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    action: string | null
    userAgent: string | null
  }

  export type AccountLockCountAggregateOutputType = {
    id: number
    agentId: number
    reason: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    action: number
    userAgent: number
    _all: number
  }


  export type AccountLockMinAggregateInputType = {
    id?: true
    agentId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    action?: true
    userAgent?: true
  }

  export type AccountLockMaxAggregateInputType = {
    id?: true
    agentId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    action?: true
    userAgent?: true
  }

  export type AccountLockCountAggregateInputType = {
    id?: true
    agentId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    action?: true
    userAgent?: true
    _all?: true
  }

  export type AccountLockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountLock to aggregate.
     */
    where?: AccountLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLocks to fetch.
     */
    orderBy?: AccountLockOrderByWithRelationInput | AccountLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountLocks
    **/
    _count?: true | AccountLockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountLockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountLockMaxAggregateInputType
  }

  export type GetAccountLockAggregateType<T extends AccountLockAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountLock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountLock[P]>
      : GetScalarType<T[P], AggregateAccountLock[P]>
  }




  export type AccountLockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountLockWhereInput
    orderBy?: AccountLockOrderByWithAggregationInput | AccountLockOrderByWithAggregationInput[]
    by: AccountLockScalarFieldEnum[] | AccountLockScalarFieldEnum
    having?: AccountLockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountLockCountAggregateInputType | true
    _min?: AccountLockMinAggregateInputType
    _max?: AccountLockMaxAggregateInputType
  }

  export type AccountLockGroupByOutputType = {
    id: string
    agentId: string
    reason: string | null
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    action: string | null
    userAgent: string | null
    _count: AccountLockCountAggregateOutputType | null
    _min: AccountLockMinAggregateOutputType | null
    _max: AccountLockMaxAggregateOutputType | null
  }

  type GetAccountLockGroupByPayload<T extends AccountLockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountLockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountLockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountLockGroupByOutputType[P]>
            : GetScalarType<T[P], AccountLockGroupByOutputType[P]>
        }
      >
    >


  export type AccountLockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    action?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountLock"]>

  export type AccountLockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    action?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountLock"]>

  export type AccountLockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    action?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountLock"]>

  export type AccountLockSelectScalar = {
    id?: boolean
    agentId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    action?: boolean
    userAgent?: boolean
  }

  export type AccountLockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "reason" | "expiresAt" | "createdAt" | "updatedAt" | "ipAddress" | "action" | "userAgent", ExtArgs["result"]["accountLock"]>
  export type AccountLockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AccountLockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type AccountLockIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $AccountLockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountLock"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      reason: string | null
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      action: string | null
      userAgent: string | null
    }, ExtArgs["result"]["accountLock"]>
    composites: {}
  }

  type AccountLockGetPayload<S extends boolean | null | undefined | AccountLockDefaultArgs> = $Result.GetResult<Prisma.$AccountLockPayload, S>

  type AccountLockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountLockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountLockCountAggregateInputType | true
    }

  export interface AccountLockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountLock'], meta: { name: 'AccountLock' } }
    /**
     * Find zero or one AccountLock that matches the filter.
     * @param {AccountLockFindUniqueArgs} args - Arguments to find a AccountLock
     * @example
     * // Get one AccountLock
     * const accountLock = await prisma.accountLock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountLockFindUniqueArgs>(args: SelectSubset<T, AccountLockFindUniqueArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountLock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountLockFindUniqueOrThrowArgs} args - Arguments to find a AccountLock
     * @example
     * // Get one AccountLock
     * const accountLock = await prisma.accountLock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountLockFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountLockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountLock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockFindFirstArgs} args - Arguments to find a AccountLock
     * @example
     * // Get one AccountLock
     * const accountLock = await prisma.accountLock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountLockFindFirstArgs>(args?: SelectSubset<T, AccountLockFindFirstArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountLock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockFindFirstOrThrowArgs} args - Arguments to find a AccountLock
     * @example
     * // Get one AccountLock
     * const accountLock = await prisma.accountLock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountLockFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountLockFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountLocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountLocks
     * const accountLocks = await prisma.accountLock.findMany()
     * 
     * // Get first 10 AccountLocks
     * const accountLocks = await prisma.accountLock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountLockWithIdOnly = await prisma.accountLock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountLockFindManyArgs>(args?: SelectSubset<T, AccountLockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountLock.
     * @param {AccountLockCreateArgs} args - Arguments to create a AccountLock.
     * @example
     * // Create one AccountLock
     * const AccountLock = await prisma.accountLock.create({
     *   data: {
     *     // ... data to create a AccountLock
     *   }
     * })
     * 
     */
    create<T extends AccountLockCreateArgs>(args: SelectSubset<T, AccountLockCreateArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountLocks.
     * @param {AccountLockCreateManyArgs} args - Arguments to create many AccountLocks.
     * @example
     * // Create many AccountLocks
     * const accountLock = await prisma.accountLock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountLockCreateManyArgs>(args?: SelectSubset<T, AccountLockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountLocks and returns the data saved in the database.
     * @param {AccountLockCreateManyAndReturnArgs} args - Arguments to create many AccountLocks.
     * @example
     * // Create many AccountLocks
     * const accountLock = await prisma.accountLock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountLocks and only return the `id`
     * const accountLockWithIdOnly = await prisma.accountLock.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountLockCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountLockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AccountLock.
     * @param {AccountLockDeleteArgs} args - Arguments to delete one AccountLock.
     * @example
     * // Delete one AccountLock
     * const AccountLock = await prisma.accountLock.delete({
     *   where: {
     *     // ... filter to delete one AccountLock
     *   }
     * })
     * 
     */
    delete<T extends AccountLockDeleteArgs>(args: SelectSubset<T, AccountLockDeleteArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountLock.
     * @param {AccountLockUpdateArgs} args - Arguments to update one AccountLock.
     * @example
     * // Update one AccountLock
     * const accountLock = await prisma.accountLock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountLockUpdateArgs>(args: SelectSubset<T, AccountLockUpdateArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountLocks.
     * @param {AccountLockDeleteManyArgs} args - Arguments to filter AccountLocks to delete.
     * @example
     * // Delete a few AccountLocks
     * const { count } = await prisma.accountLock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountLockDeleteManyArgs>(args?: SelectSubset<T, AccountLockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountLocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountLocks
     * const accountLock = await prisma.accountLock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountLockUpdateManyArgs>(args: SelectSubset<T, AccountLockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountLocks and returns the data updated in the database.
     * @param {AccountLockUpdateManyAndReturnArgs} args - Arguments to update many AccountLocks.
     * @example
     * // Update many AccountLocks
     * const accountLock = await prisma.accountLock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AccountLocks and only return the `id`
     * const accountLockWithIdOnly = await prisma.accountLock.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountLockUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountLockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AccountLock.
     * @param {AccountLockUpsertArgs} args - Arguments to update or create a AccountLock.
     * @example
     * // Update or create a AccountLock
     * const accountLock = await prisma.accountLock.upsert({
     *   create: {
     *     // ... data to create a AccountLock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountLock we want to update
     *   }
     * })
     */
    upsert<T extends AccountLockUpsertArgs>(args: SelectSubset<T, AccountLockUpsertArgs<ExtArgs>>): Prisma__AccountLockClient<$Result.GetResult<Prisma.$AccountLockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountLocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockCountArgs} args - Arguments to filter AccountLocks to count.
     * @example
     * // Count the number of AccountLocks
     * const count = await prisma.accountLock.count({
     *   where: {
     *     // ... the filter for the AccountLocks we want to count
     *   }
     * })
    **/
    count<T extends AccountLockCountArgs>(
      args?: Subset<T, AccountLockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountLockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountLock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountLockAggregateArgs>(args: Subset<T, AccountLockAggregateArgs>): Prisma.PrismaPromise<GetAccountLockAggregateType<T>>

    /**
     * Group by AccountLock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountLockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountLockGroupByArgs['orderBy'] }
        : { orderBy?: AccountLockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountLockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountLockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountLock model
   */
  readonly fields: AccountLockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountLock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountLockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountLock model
   */
  interface AccountLockFieldRefs {
    readonly id: FieldRef<"AccountLock", 'String'>
    readonly agentId: FieldRef<"AccountLock", 'String'>
    readonly reason: FieldRef<"AccountLock", 'String'>
    readonly expiresAt: FieldRef<"AccountLock", 'DateTime'>
    readonly createdAt: FieldRef<"AccountLock", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountLock", 'DateTime'>
    readonly ipAddress: FieldRef<"AccountLock", 'String'>
    readonly action: FieldRef<"AccountLock", 'String'>
    readonly userAgent: FieldRef<"AccountLock", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AccountLock findUnique
   */
  export type AccountLockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter, which AccountLock to fetch.
     */
    where: AccountLockWhereUniqueInput
  }

  /**
   * AccountLock findUniqueOrThrow
   */
  export type AccountLockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter, which AccountLock to fetch.
     */
    where: AccountLockWhereUniqueInput
  }

  /**
   * AccountLock findFirst
   */
  export type AccountLockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter, which AccountLock to fetch.
     */
    where?: AccountLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLocks to fetch.
     */
    orderBy?: AccountLockOrderByWithRelationInput | AccountLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountLocks.
     */
    cursor?: AccountLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountLocks.
     */
    distinct?: AccountLockScalarFieldEnum | AccountLockScalarFieldEnum[]
  }

  /**
   * AccountLock findFirstOrThrow
   */
  export type AccountLockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter, which AccountLock to fetch.
     */
    where?: AccountLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLocks to fetch.
     */
    orderBy?: AccountLockOrderByWithRelationInput | AccountLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountLocks.
     */
    cursor?: AccountLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountLocks.
     */
    distinct?: AccountLockScalarFieldEnum | AccountLockScalarFieldEnum[]
  }

  /**
   * AccountLock findMany
   */
  export type AccountLockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter, which AccountLocks to fetch.
     */
    where?: AccountLockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLocks to fetch.
     */
    orderBy?: AccountLockOrderByWithRelationInput | AccountLockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountLocks.
     */
    cursor?: AccountLockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLocks.
     */
    skip?: number
    distinct?: AccountLockScalarFieldEnum | AccountLockScalarFieldEnum[]
  }

  /**
   * AccountLock create
   */
  export type AccountLockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountLock.
     */
    data: XOR<AccountLockCreateInput, AccountLockUncheckedCreateInput>
  }

  /**
   * AccountLock createMany
   */
  export type AccountLockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountLocks.
     */
    data: AccountLockCreateManyInput | AccountLockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountLock createManyAndReturn
   */
  export type AccountLockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * The data used to create many AccountLocks.
     */
    data: AccountLockCreateManyInput | AccountLockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountLock update
   */
  export type AccountLockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountLock.
     */
    data: XOR<AccountLockUpdateInput, AccountLockUncheckedUpdateInput>
    /**
     * Choose, which AccountLock to update.
     */
    where: AccountLockWhereUniqueInput
  }

  /**
   * AccountLock updateMany
   */
  export type AccountLockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountLocks.
     */
    data: XOR<AccountLockUpdateManyMutationInput, AccountLockUncheckedUpdateManyInput>
    /**
     * Filter which AccountLocks to update
     */
    where?: AccountLockWhereInput
    /**
     * Limit how many AccountLocks to update.
     */
    limit?: number
  }

  /**
   * AccountLock updateManyAndReturn
   */
  export type AccountLockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * The data used to update AccountLocks.
     */
    data: XOR<AccountLockUpdateManyMutationInput, AccountLockUncheckedUpdateManyInput>
    /**
     * Filter which AccountLocks to update
     */
    where?: AccountLockWhereInput
    /**
     * Limit how many AccountLocks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountLock upsert
   */
  export type AccountLockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountLock to update in case it exists.
     */
    where: AccountLockWhereUniqueInput
    /**
     * In case the AccountLock found by the `where` argument doesn't exist, create a new AccountLock with this data.
     */
    create: XOR<AccountLockCreateInput, AccountLockUncheckedCreateInput>
    /**
     * In case the AccountLock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountLockUpdateInput, AccountLockUncheckedUpdateInput>
  }

  /**
   * AccountLock delete
   */
  export type AccountLockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
    /**
     * Filter which AccountLock to delete.
     */
    where: AccountLockWhereUniqueInput
  }

  /**
   * AccountLock deleteMany
   */
  export type AccountLockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountLocks to delete
     */
    where?: AccountLockWhereInput
    /**
     * Limit how many AccountLocks to delete.
     */
    limit?: number
  }

  /**
   * AccountLock without action
   */
  export type AccountLockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLock
     */
    select?: AccountLockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLock
     */
    omit?: AccountLockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLockInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    tokenHash: string | null
    agentId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    usedAt: Date | null
    agentProfileId: string | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    tokenHash: string | null
    agentId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    usedAt: Date | null
    agentProfileId: string | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    tokenHash: number
    agentId: number
    createdAt: number
    expiresAt: number
    usedAt: number
    agentProfileId: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    tokenHash?: true
    agentId?: true
    createdAt?: true
    expiresAt?: true
    usedAt?: true
    agentProfileId?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    tokenHash?: true
    agentId?: true
    createdAt?: true
    expiresAt?: true
    usedAt?: true
    agentProfileId?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    tokenHash?: true
    agentId?: true
    createdAt?: true
    expiresAt?: true
    usedAt?: true
    agentProfileId?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    tokenHash: string
    agentId: string
    createdAt: Date
    expiresAt: Date
    usedAt: Date | null
    agentProfileId: string | null
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tokenHash?: boolean
    agentId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agentProfileId?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tokenHash?: boolean
    agentId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agentProfileId?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tokenHash?: boolean
    agentId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agentProfileId?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    tokenHash?: boolean
    agentId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    agentProfileId?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tokenHash" | "agentId" | "createdAt" | "expiresAt" | "usedAt" | "agentProfileId", ExtArgs["result"]["passwordResetToken"]>
  export type PasswordResetTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
    AgentProfile?: boolean | PasswordResetToken$AgentProfileArgs<ExtArgs>
  }

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
      AgentProfile: Prisma.$AgentProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tokenHash: string
      agentId: string
      createdAt: Date
      expiresAt: Date
      usedAt: Date | null
      agentProfileId: string | null
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    AgentProfile<T extends PasswordResetToken$AgentProfileArgs<ExtArgs> = {}>(args?: Subset<T, PasswordResetToken$AgentProfileArgs<ExtArgs>>): Prisma__AgentProfileClient<$Result.GetResult<Prisma.$AgentProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly tokenHash: FieldRef<"PasswordResetToken", 'String'>
    readonly agentId: FieldRef<"PasswordResetToken", 'String'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly expiresAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly usedAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly agentProfileId: FieldRef<"PasswordResetToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken.AgentProfile
   */
  export type PasswordResetToken$AgentProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentProfile
     */
    select?: AgentProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgentProfile
     */
    omit?: AgentProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentProfileInclude<ExtArgs> | null
    where?: AgentProfileWhereInput
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetEvent
   */

  export type AggregatePasswordResetEvent = {
    _count: PasswordResetEventCountAggregateOutputType | null
    _min: PasswordResetEventMinAggregateOutputType | null
    _max: PasswordResetEventMaxAggregateOutputType | null
  }

  export type PasswordResetEventMinAggregateOutputType = {
    id: string | null
    agentId: string | null
    createdAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type PasswordResetEventMaxAggregateOutputType = {
    id: string | null
    agentId: string | null
    createdAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type PasswordResetEventCountAggregateOutputType = {
    id: number
    agentId: number
    createdAt: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type PasswordResetEventMinAggregateInputType = {
    id?: true
    agentId?: true
    createdAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type PasswordResetEventMaxAggregateInputType = {
    id?: true
    agentId?: true
    createdAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type PasswordResetEventCountAggregateInputType = {
    id?: true
    agentId?: true
    createdAt?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type PasswordResetEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetEvent to aggregate.
     */
    where?: PasswordResetEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetEvents to fetch.
     */
    orderBy?: PasswordResetEventOrderByWithRelationInput | PasswordResetEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetEvents
    **/
    _count?: true | PasswordResetEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetEventMaxAggregateInputType
  }

  export type GetPasswordResetEventAggregateType<T extends PasswordResetEventAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetEvent[P]>
      : GetScalarType<T[P], AggregatePasswordResetEvent[P]>
  }




  export type PasswordResetEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetEventWhereInput
    orderBy?: PasswordResetEventOrderByWithAggregationInput | PasswordResetEventOrderByWithAggregationInput[]
    by: PasswordResetEventScalarFieldEnum[] | PasswordResetEventScalarFieldEnum
    having?: PasswordResetEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetEventCountAggregateInputType | true
    _min?: PasswordResetEventMinAggregateInputType
    _max?: PasswordResetEventMaxAggregateInputType
  }

  export type PasswordResetEventGroupByOutputType = {
    id: string
    agentId: string
    createdAt: Date
    ipAddress: string
    userAgent: string | null
    _count: PasswordResetEventCountAggregateOutputType | null
    _min: PasswordResetEventMinAggregateOutputType | null
    _max: PasswordResetEventMaxAggregateOutputType | null
  }

  type GetPasswordResetEventGroupByPayload<T extends PasswordResetEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetEventGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetEventGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetEvent"]>

  export type PasswordResetEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetEvent"]>

  export type PasswordResetEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agentId?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetEvent"]>

  export type PasswordResetEventSelectScalar = {
    id?: boolean
    agentId?: boolean
    createdAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type PasswordResetEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "agentId" | "createdAt" | "ipAddress" | "userAgent", ExtArgs["result"]["passwordResetEvent"]>
  export type PasswordResetEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type PasswordResetEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type PasswordResetEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $PasswordResetEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetEvent"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agentId: string
      createdAt: Date
      ipAddress: string
      userAgent: string | null
    }, ExtArgs["result"]["passwordResetEvent"]>
    composites: {}
  }

  type PasswordResetEventGetPayload<S extends boolean | null | undefined | PasswordResetEventDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetEventPayload, S>

  type PasswordResetEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetEventCountAggregateInputType | true
    }

  export interface PasswordResetEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetEvent'], meta: { name: 'PasswordResetEvent' } }
    /**
     * Find zero or one PasswordResetEvent that matches the filter.
     * @param {PasswordResetEventFindUniqueArgs} args - Arguments to find a PasswordResetEvent
     * @example
     * // Get one PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetEventFindUniqueArgs>(args: SelectSubset<T, PasswordResetEventFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetEventFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetEvent
     * @example
     * // Get one PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetEventFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventFindFirstArgs} args - Arguments to find a PasswordResetEvent
     * @example
     * // Get one PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetEventFindFirstArgs>(args?: SelectSubset<T, PasswordResetEventFindFirstArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventFindFirstOrThrowArgs} args - Arguments to find a PasswordResetEvent
     * @example
     * // Get one PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetEventFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetEvents
     * const passwordResetEvents = await prisma.passwordResetEvent.findMany()
     * 
     * // Get first 10 PasswordResetEvents
     * const passwordResetEvents = await prisma.passwordResetEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetEventWithIdOnly = await prisma.passwordResetEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetEventFindManyArgs>(args?: SelectSubset<T, PasswordResetEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetEvent.
     * @param {PasswordResetEventCreateArgs} args - Arguments to create a PasswordResetEvent.
     * @example
     * // Create one PasswordResetEvent
     * const PasswordResetEvent = await prisma.passwordResetEvent.create({
     *   data: {
     *     // ... data to create a PasswordResetEvent
     *   }
     * })
     * 
     */
    create<T extends PasswordResetEventCreateArgs>(args: SelectSubset<T, PasswordResetEventCreateArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetEvents.
     * @param {PasswordResetEventCreateManyArgs} args - Arguments to create many PasswordResetEvents.
     * @example
     * // Create many PasswordResetEvents
     * const passwordResetEvent = await prisma.passwordResetEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetEventCreateManyArgs>(args?: SelectSubset<T, PasswordResetEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetEvents and returns the data saved in the database.
     * @param {PasswordResetEventCreateManyAndReturnArgs} args - Arguments to create many PasswordResetEvents.
     * @example
     * // Create many PasswordResetEvents
     * const passwordResetEvent = await prisma.passwordResetEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetEvents and only return the `id`
     * const passwordResetEventWithIdOnly = await prisma.passwordResetEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetEventCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetEvent.
     * @param {PasswordResetEventDeleteArgs} args - Arguments to delete one PasswordResetEvent.
     * @example
     * // Delete one PasswordResetEvent
     * const PasswordResetEvent = await prisma.passwordResetEvent.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetEvent
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetEventDeleteArgs>(args: SelectSubset<T, PasswordResetEventDeleteArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetEvent.
     * @param {PasswordResetEventUpdateArgs} args - Arguments to update one PasswordResetEvent.
     * @example
     * // Update one PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetEventUpdateArgs>(args: SelectSubset<T, PasswordResetEventUpdateArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetEvents.
     * @param {PasswordResetEventDeleteManyArgs} args - Arguments to filter PasswordResetEvents to delete.
     * @example
     * // Delete a few PasswordResetEvents
     * const { count } = await prisma.passwordResetEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetEventDeleteManyArgs>(args?: SelectSubset<T, PasswordResetEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetEvents
     * const passwordResetEvent = await prisma.passwordResetEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetEventUpdateManyArgs>(args: SelectSubset<T, PasswordResetEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetEvents and returns the data updated in the database.
     * @param {PasswordResetEventUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetEvents.
     * @example
     * // Update many PasswordResetEvents
     * const passwordResetEvent = await prisma.passwordResetEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetEvents and only return the `id`
     * const passwordResetEventWithIdOnly = await prisma.passwordResetEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetEventUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetEvent.
     * @param {PasswordResetEventUpsertArgs} args - Arguments to update or create a PasswordResetEvent.
     * @example
     * // Update or create a PasswordResetEvent
     * const passwordResetEvent = await prisma.passwordResetEvent.upsert({
     *   create: {
     *     // ... data to create a PasswordResetEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetEvent we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetEventUpsertArgs>(args: SelectSubset<T, PasswordResetEventUpsertArgs<ExtArgs>>): Prisma__PasswordResetEventClient<$Result.GetResult<Prisma.$PasswordResetEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventCountArgs} args - Arguments to filter PasswordResetEvents to count.
     * @example
     * // Count the number of PasswordResetEvents
     * const count = await prisma.passwordResetEvent.count({
     *   where: {
     *     // ... the filter for the PasswordResetEvents we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetEventCountArgs>(
      args?: Subset<T, PasswordResetEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetEventAggregateArgs>(args: Subset<T, PasswordResetEventAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetEventAggregateType<T>>

    /**
     * Group by PasswordResetEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetEventGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetEvent model
   */
  readonly fields: PasswordResetEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetEvent model
   */
  interface PasswordResetEventFieldRefs {
    readonly id: FieldRef<"PasswordResetEvent", 'String'>
    readonly agentId: FieldRef<"PasswordResetEvent", 'String'>
    readonly createdAt: FieldRef<"PasswordResetEvent", 'DateTime'>
    readonly ipAddress: FieldRef<"PasswordResetEvent", 'String'>
    readonly userAgent: FieldRef<"PasswordResetEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetEvent findUnique
   */
  export type PasswordResetEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetEvent to fetch.
     */
    where: PasswordResetEventWhereUniqueInput
  }

  /**
   * PasswordResetEvent findUniqueOrThrow
   */
  export type PasswordResetEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetEvent to fetch.
     */
    where: PasswordResetEventWhereUniqueInput
  }

  /**
   * PasswordResetEvent findFirst
   */
  export type PasswordResetEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetEvent to fetch.
     */
    where?: PasswordResetEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetEvents to fetch.
     */
    orderBy?: PasswordResetEventOrderByWithRelationInput | PasswordResetEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetEvents.
     */
    cursor?: PasswordResetEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetEvents.
     */
    distinct?: PasswordResetEventScalarFieldEnum | PasswordResetEventScalarFieldEnum[]
  }

  /**
   * PasswordResetEvent findFirstOrThrow
   */
  export type PasswordResetEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetEvent to fetch.
     */
    where?: PasswordResetEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetEvents to fetch.
     */
    orderBy?: PasswordResetEventOrderByWithRelationInput | PasswordResetEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetEvents.
     */
    cursor?: PasswordResetEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetEvents.
     */
    distinct?: PasswordResetEventScalarFieldEnum | PasswordResetEventScalarFieldEnum[]
  }

  /**
   * PasswordResetEvent findMany
   */
  export type PasswordResetEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetEvents to fetch.
     */
    where?: PasswordResetEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetEvents to fetch.
     */
    orderBy?: PasswordResetEventOrderByWithRelationInput | PasswordResetEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetEvents.
     */
    cursor?: PasswordResetEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetEvents.
     */
    skip?: number
    distinct?: PasswordResetEventScalarFieldEnum | PasswordResetEventScalarFieldEnum[]
  }

  /**
   * PasswordResetEvent create
   */
  export type PasswordResetEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetEvent.
     */
    data: XOR<PasswordResetEventCreateInput, PasswordResetEventUncheckedCreateInput>
  }

  /**
   * PasswordResetEvent createMany
   */
  export type PasswordResetEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetEvents.
     */
    data: PasswordResetEventCreateManyInput | PasswordResetEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetEvent createManyAndReturn
   */
  export type PasswordResetEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetEvents.
     */
    data: PasswordResetEventCreateManyInput | PasswordResetEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetEvent update
   */
  export type PasswordResetEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetEvent.
     */
    data: XOR<PasswordResetEventUpdateInput, PasswordResetEventUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetEvent to update.
     */
    where: PasswordResetEventWhereUniqueInput
  }

  /**
   * PasswordResetEvent updateMany
   */
  export type PasswordResetEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetEvents.
     */
    data: XOR<PasswordResetEventUpdateManyMutationInput, PasswordResetEventUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetEvents to update
     */
    where?: PasswordResetEventWhereInput
    /**
     * Limit how many PasswordResetEvents to update.
     */
    limit?: number
  }

  /**
   * PasswordResetEvent updateManyAndReturn
   */
  export type PasswordResetEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetEvents.
     */
    data: XOR<PasswordResetEventUpdateManyMutationInput, PasswordResetEventUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetEvents to update
     */
    where?: PasswordResetEventWhereInput
    /**
     * Limit how many PasswordResetEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetEvent upsert
   */
  export type PasswordResetEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetEvent to update in case it exists.
     */
    where: PasswordResetEventWhereUniqueInput
    /**
     * In case the PasswordResetEvent found by the `where` argument doesn't exist, create a new PasswordResetEvent with this data.
     */
    create: XOR<PasswordResetEventCreateInput, PasswordResetEventUncheckedCreateInput>
    /**
     * In case the PasswordResetEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetEventUpdateInput, PasswordResetEventUncheckedUpdateInput>
  }

  /**
   * PasswordResetEvent delete
   */
  export type PasswordResetEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetEvent to delete.
     */
    where: PasswordResetEventWhereUniqueInput
  }

  /**
   * PasswordResetEvent deleteMany
   */
  export type PasswordResetEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetEvents to delete
     */
    where?: PasswordResetEventWhereInput
    /**
     * Limit how many PasswordResetEvents to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetEvent without action
   */
  export type PasswordResetEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetEvent
     */
    select?: PasswordResetEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetEvent
     */
    omit?: PasswordResetEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetEventInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    email: string | null
    verified: boolean | null
    fullName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    bio: string | null
    country: string | null
    state: string | null
    city: string | null
    address: string | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    hasPin: boolean | null
    pinHash: string | null
    isBanned: boolean | null
    passwordChangedAt: Date | null
    role: $Enums.UserRoleEnum | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    email: string | null
    verified: boolean | null
    fullName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    bio: string | null
    country: string | null
    state: string | null
    city: string | null
    address: string | null
    phoneNumber: string | null
    phoneVerified: boolean | null
    hasPin: boolean | null
    pinHash: string | null
    isBanned: boolean | null
    passwordChangedAt: Date | null
    role: $Enums.UserRoleEnum | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    email: number
    verified: number
    fullName: number
    createdAt: number
    updatedAt: number
    bio: number
    country: number
    state: number
    city: number
    address: number
    phoneNumber: number
    phoneVerified: number
    hasPin: number
    pinHash: number
    isBanned: number
    passwordChangedAt: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    verified?: true
    fullName?: true
    createdAt?: true
    updatedAt?: true
    bio?: true
    country?: true
    state?: true
    city?: true
    address?: true
    phoneNumber?: true
    phoneVerified?: true
    hasPin?: true
    pinHash?: true
    isBanned?: true
    passwordChangedAt?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    verified?: true
    fullName?: true
    createdAt?: true
    updatedAt?: true
    bio?: true
    country?: true
    state?: true
    city?: true
    address?: true
    phoneNumber?: true
    phoneVerified?: true
    hasPin?: true
    pinHash?: true
    isBanned?: true
    passwordChangedAt?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    email?: true
    verified?: true
    fullName?: true
    createdAt?: true
    updatedAt?: true
    bio?: true
    country?: true
    state?: true
    city?: true
    address?: true
    phoneNumber?: true
    phoneVerified?: true
    hasPin?: true
    pinHash?: true
    isBanned?: true
    passwordChangedAt?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    passwordHash: string
    email: string
    verified: boolean
    fullName: string
    createdAt: Date
    updatedAt: Date
    bio: string
    country: string
    state: string
    city: string
    address: string
    phoneNumber: string
    phoneVerified: boolean
    hasPin: boolean
    pinHash: string | null
    isBanned: boolean
    passwordChangedAt: Date | null
    role: $Enums.UserRoleEnum
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    verified?: boolean
    fullName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bio?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    address?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: boolean
    isBanned?: boolean
    passwordChangedAt?: boolean
    role?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    verified?: boolean
    fullName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bio?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    address?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: boolean
    isBanned?: boolean
    passwordChangedAt?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    verified?: boolean
    fullName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bio?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    address?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: boolean
    isBanned?: boolean
    passwordChangedAt?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    email?: boolean
    verified?: boolean
    fullName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bio?: boolean
    country?: boolean
    state?: boolean
    city?: boolean
    address?: boolean
    phoneNumber?: boolean
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: boolean
    isBanned?: boolean
    passwordChangedAt?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "passwordHash" | "email" | "verified" | "fullName" | "createdAt" | "updatedAt" | "bio" | "country" | "state" | "city" | "address" | "phoneNumber" | "phoneVerified" | "hasPin" | "pinHash" | "isBanned" | "passwordChangedAt" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      roles: Prisma.$UserRolePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      passwordHash: string
      email: string
      verified: boolean
      fullName: string
      createdAt: Date
      updatedAt: Date
      bio: string
      country: string
      state: string
      city: string
      address: string
      phoneNumber: string
      phoneVerified: boolean
      hasPin: boolean
      pinHash: string | null
      isBanned: boolean
      passwordChangedAt: Date | null
      role: $Enums.UserRoleEnum
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly bio: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
    readonly state: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly phoneVerified: FieldRef<"User", 'Boolean'>
    readonly hasPin: FieldRef<"User", 'Boolean'>
    readonly pinHash: FieldRef<"User", 'String'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
    readonly passwordChangedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'UserRoleEnum'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    role: $Enums.UserRoleEnum | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    role: $Enums.UserRoleEnum | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    role: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    id?: true
    role?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    role?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    role?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    role: $Enums.UserRoleEnum
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    role?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.UserRoleEnum
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly role: FieldRef<"UserRole", 'UserRoleEnum'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revoked: boolean | null
    userAgent: string | null
    ipAddress: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    revoked: boolean | null
    userAgent: string | null
    ipAddress: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    createdAt: number
    expiresAt: number
    revoked: number
    userAgent: number
    ipAddress: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
    revoked?: true
    userAgent?: true
    ipAddress?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
    revoked?: true
    userAgent?: true
    ipAddress?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
    revoked?: true
    userAgent?: true
    ipAddress?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    token: string
    userId: string
    createdAt: Date
    expiresAt: Date
    revoked: boolean
    userAgent: string | null
    ipAddress: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revoked?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revoked?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revoked?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    revoked?: boolean
    userAgent?: boolean
    ipAddress?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "createdAt" | "expiresAt" | "revoked" | "userAgent" | "ipAddress", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      createdAt: Date
      expiresAt: Date
      revoked: boolean
      userAgent: string | null
      ipAddress: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly revoked: FieldRef<"Session", 'Boolean'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model OAuthAccount
   */

  export type AggregateOAuthAccount = {
    _count: OAuthAccountCountAggregateOutputType | null
    _min: OAuthAccountMinAggregateOutputType | null
    _max: OAuthAccountMaxAggregateOutputType | null
  }

  export type OAuthAccountMinAggregateOutputType = {
    id: string | null
    provider: string | null
    providerId: string | null
    agentId: string | null
    createdAt: Date | null
  }

  export type OAuthAccountMaxAggregateOutputType = {
    id: string | null
    provider: string | null
    providerId: string | null
    agentId: string | null
    createdAt: Date | null
  }

  export type OAuthAccountCountAggregateOutputType = {
    id: number
    provider: number
    providerId: number
    agentId: number
    createdAt: number
    _all: number
  }


  export type OAuthAccountMinAggregateInputType = {
    id?: true
    provider?: true
    providerId?: true
    agentId?: true
    createdAt?: true
  }

  export type OAuthAccountMaxAggregateInputType = {
    id?: true
    provider?: true
    providerId?: true
    agentId?: true
    createdAt?: true
  }

  export type OAuthAccountCountAggregateInputType = {
    id?: true
    provider?: true
    providerId?: true
    agentId?: true
    createdAt?: true
    _all?: true
  }

  export type OAuthAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthAccount to aggregate.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OAuthAccounts
    **/
    _count?: true | OAuthAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OAuthAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OAuthAccountMaxAggregateInputType
  }

  export type GetOAuthAccountAggregateType<T extends OAuthAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateOAuthAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOAuthAccount[P]>
      : GetScalarType<T[P], AggregateOAuthAccount[P]>
  }




  export type OAuthAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OAuthAccountWhereInput
    orderBy?: OAuthAccountOrderByWithAggregationInput | OAuthAccountOrderByWithAggregationInput[]
    by: OAuthAccountScalarFieldEnum[] | OAuthAccountScalarFieldEnum
    having?: OAuthAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OAuthAccountCountAggregateInputType | true
    _min?: OAuthAccountMinAggregateInputType
    _max?: OAuthAccountMaxAggregateInputType
  }

  export type OAuthAccountGroupByOutputType = {
    id: string
    provider: string
    providerId: string
    agentId: string
    createdAt: Date
    _count: OAuthAccountCountAggregateOutputType | null
    _min: OAuthAccountMinAggregateOutputType | null
    _max: OAuthAccountMaxAggregateOutputType | null
  }

  type GetOAuthAccountGroupByPayload<T extends OAuthAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OAuthAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OAuthAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OAuthAccountGroupByOutputType[P]>
            : GetScalarType<T[P], OAuthAccountGroupByOutputType[P]>
        }
      >
    >


  export type OAuthAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerId?: boolean
    agentId?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oAuthAccount"]>

  export type OAuthAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerId?: boolean
    agentId?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oAuthAccount"]>

  export type OAuthAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    provider?: boolean
    providerId?: boolean
    agentId?: boolean
    createdAt?: boolean
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oAuthAccount"]>

  export type OAuthAccountSelectScalar = {
    id?: boolean
    provider?: boolean
    providerId?: boolean
    agentId?: boolean
    createdAt?: boolean
  }

  export type OAuthAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "provider" | "providerId" | "agentId" | "createdAt", ExtArgs["result"]["oAuthAccount"]>
  export type OAuthAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type OAuthAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }
  export type OAuthAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | AgentDefaultArgs<ExtArgs>
  }

  export type $OAuthAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OAuthAccount"
    objects: {
      agent: Prisma.$AgentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      provider: string
      providerId: string
      agentId: string
      createdAt: Date
    }, ExtArgs["result"]["oAuthAccount"]>
    composites: {}
  }

  type OAuthAccountGetPayload<S extends boolean | null | undefined | OAuthAccountDefaultArgs> = $Result.GetResult<Prisma.$OAuthAccountPayload, S>

  type OAuthAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OAuthAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OAuthAccountCountAggregateInputType | true
    }

  export interface OAuthAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OAuthAccount'], meta: { name: 'OAuthAccount' } }
    /**
     * Find zero or one OAuthAccount that matches the filter.
     * @param {OAuthAccountFindUniqueArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OAuthAccountFindUniqueArgs>(args: SelectSubset<T, OAuthAccountFindUniqueArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OAuthAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OAuthAccountFindUniqueOrThrowArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OAuthAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, OAuthAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OAuthAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindFirstArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OAuthAccountFindFirstArgs>(args?: SelectSubset<T, OAuthAccountFindFirstArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OAuthAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindFirstOrThrowArgs} args - Arguments to find a OAuthAccount
     * @example
     * // Get one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OAuthAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, OAuthAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OAuthAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OAuthAccounts
     * const oAuthAccounts = await prisma.oAuthAccount.findMany()
     * 
     * // Get first 10 OAuthAccounts
     * const oAuthAccounts = await prisma.oAuthAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oAuthAccountWithIdOnly = await prisma.oAuthAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OAuthAccountFindManyArgs>(args?: SelectSubset<T, OAuthAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OAuthAccount.
     * @param {OAuthAccountCreateArgs} args - Arguments to create a OAuthAccount.
     * @example
     * // Create one OAuthAccount
     * const OAuthAccount = await prisma.oAuthAccount.create({
     *   data: {
     *     // ... data to create a OAuthAccount
     *   }
     * })
     * 
     */
    create<T extends OAuthAccountCreateArgs>(args: SelectSubset<T, OAuthAccountCreateArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OAuthAccounts.
     * @param {OAuthAccountCreateManyArgs} args - Arguments to create many OAuthAccounts.
     * @example
     * // Create many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OAuthAccountCreateManyArgs>(args?: SelectSubset<T, OAuthAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OAuthAccounts and returns the data saved in the database.
     * @param {OAuthAccountCreateManyAndReturnArgs} args - Arguments to create many OAuthAccounts.
     * @example
     * // Create many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OAuthAccounts and only return the `id`
     * const oAuthAccountWithIdOnly = await prisma.oAuthAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OAuthAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, OAuthAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OAuthAccount.
     * @param {OAuthAccountDeleteArgs} args - Arguments to delete one OAuthAccount.
     * @example
     * // Delete one OAuthAccount
     * const OAuthAccount = await prisma.oAuthAccount.delete({
     *   where: {
     *     // ... filter to delete one OAuthAccount
     *   }
     * })
     * 
     */
    delete<T extends OAuthAccountDeleteArgs>(args: SelectSubset<T, OAuthAccountDeleteArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OAuthAccount.
     * @param {OAuthAccountUpdateArgs} args - Arguments to update one OAuthAccount.
     * @example
     * // Update one OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OAuthAccountUpdateArgs>(args: SelectSubset<T, OAuthAccountUpdateArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OAuthAccounts.
     * @param {OAuthAccountDeleteManyArgs} args - Arguments to filter OAuthAccounts to delete.
     * @example
     * // Delete a few OAuthAccounts
     * const { count } = await prisma.oAuthAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OAuthAccountDeleteManyArgs>(args?: SelectSubset<T, OAuthAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OAuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OAuthAccountUpdateManyArgs>(args: SelectSubset<T, OAuthAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OAuthAccounts and returns the data updated in the database.
     * @param {OAuthAccountUpdateManyAndReturnArgs} args - Arguments to update many OAuthAccounts.
     * @example
     * // Update many OAuthAccounts
     * const oAuthAccount = await prisma.oAuthAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OAuthAccounts and only return the `id`
     * const oAuthAccountWithIdOnly = await prisma.oAuthAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OAuthAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, OAuthAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OAuthAccount.
     * @param {OAuthAccountUpsertArgs} args - Arguments to update or create a OAuthAccount.
     * @example
     * // Update or create a OAuthAccount
     * const oAuthAccount = await prisma.oAuthAccount.upsert({
     *   create: {
     *     // ... data to create a OAuthAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OAuthAccount we want to update
     *   }
     * })
     */
    upsert<T extends OAuthAccountUpsertArgs>(args: SelectSubset<T, OAuthAccountUpsertArgs<ExtArgs>>): Prisma__OAuthAccountClient<$Result.GetResult<Prisma.$OAuthAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OAuthAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountCountArgs} args - Arguments to filter OAuthAccounts to count.
     * @example
     * // Count the number of OAuthAccounts
     * const count = await prisma.oAuthAccount.count({
     *   where: {
     *     // ... the filter for the OAuthAccounts we want to count
     *   }
     * })
    **/
    count<T extends OAuthAccountCountArgs>(
      args?: Subset<T, OAuthAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OAuthAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OAuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OAuthAccountAggregateArgs>(args: Subset<T, OAuthAccountAggregateArgs>): Prisma.PrismaPromise<GetOAuthAccountAggregateType<T>>

    /**
     * Group by OAuthAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OAuthAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OAuthAccountGroupByArgs['orderBy'] }
        : { orderBy?: OAuthAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OAuthAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOAuthAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OAuthAccount model
   */
  readonly fields: OAuthAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OAuthAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OAuthAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends AgentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefaultArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OAuthAccount model
   */
  interface OAuthAccountFieldRefs {
    readonly id: FieldRef<"OAuthAccount", 'String'>
    readonly provider: FieldRef<"OAuthAccount", 'String'>
    readonly providerId: FieldRef<"OAuthAccount", 'String'>
    readonly agentId: FieldRef<"OAuthAccount", 'String'>
    readonly createdAt: FieldRef<"OAuthAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OAuthAccount findUnique
   */
  export type OAuthAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount findUniqueOrThrow
   */
  export type OAuthAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount findFirst
   */
  export type OAuthAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthAccounts.
     */
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount findFirstOrThrow
   */
  export type OAuthAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccount to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthAccounts.
     */
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount findMany
   */
  export type OAuthAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter, which OAuthAccounts to fetch.
     */
    where?: OAuthAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthAccounts to fetch.
     */
    orderBy?: OAuthAccountOrderByWithRelationInput | OAuthAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OAuthAccounts.
     */
    cursor?: OAuthAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthAccounts.
     */
    skip?: number
    distinct?: OAuthAccountScalarFieldEnum | OAuthAccountScalarFieldEnum[]
  }

  /**
   * OAuthAccount create
   */
  export type OAuthAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a OAuthAccount.
     */
    data: XOR<OAuthAccountCreateInput, OAuthAccountUncheckedCreateInput>
  }

  /**
   * OAuthAccount createMany
   */
  export type OAuthAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OAuthAccounts.
     */
    data: OAuthAccountCreateManyInput | OAuthAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OAuthAccount createManyAndReturn
   */
  export type OAuthAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * The data used to create many OAuthAccounts.
     */
    data: OAuthAccountCreateManyInput | OAuthAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OAuthAccount update
   */
  export type OAuthAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a OAuthAccount.
     */
    data: XOR<OAuthAccountUpdateInput, OAuthAccountUncheckedUpdateInput>
    /**
     * Choose, which OAuthAccount to update.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount updateMany
   */
  export type OAuthAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OAuthAccounts.
     */
    data: XOR<OAuthAccountUpdateManyMutationInput, OAuthAccountUncheckedUpdateManyInput>
    /**
     * Filter which OAuthAccounts to update
     */
    where?: OAuthAccountWhereInput
    /**
     * Limit how many OAuthAccounts to update.
     */
    limit?: number
  }

  /**
   * OAuthAccount updateManyAndReturn
   */
  export type OAuthAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * The data used to update OAuthAccounts.
     */
    data: XOR<OAuthAccountUpdateManyMutationInput, OAuthAccountUncheckedUpdateManyInput>
    /**
     * Filter which OAuthAccounts to update
     */
    where?: OAuthAccountWhereInput
    /**
     * Limit how many OAuthAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OAuthAccount upsert
   */
  export type OAuthAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the OAuthAccount to update in case it exists.
     */
    where: OAuthAccountWhereUniqueInput
    /**
     * In case the OAuthAccount found by the `where` argument doesn't exist, create a new OAuthAccount with this data.
     */
    create: XOR<OAuthAccountCreateInput, OAuthAccountUncheckedCreateInput>
    /**
     * In case the OAuthAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OAuthAccountUpdateInput, OAuthAccountUncheckedUpdateInput>
  }

  /**
   * OAuthAccount delete
   */
  export type OAuthAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
    /**
     * Filter which OAuthAccount to delete.
     */
    where: OAuthAccountWhereUniqueInput
  }

  /**
   * OAuthAccount deleteMany
   */
  export type OAuthAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthAccounts to delete
     */
    where?: OAuthAccountWhereInput
    /**
     * Limit how many OAuthAccounts to delete.
     */
    limit?: number
  }

  /**
   * OAuthAccount without action
   */
  export type OAuthAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthAccount
     */
    select?: OAuthAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthAccount
     */
    omit?: OAuthAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OAuthAccountInclude<ExtArgs> | null
  }


  /**
   * Model SessionCleanupLog
   */

  export type AggregateSessionCleanupLog = {
    _count: SessionCleanupLogCountAggregateOutputType | null
    _avg: SessionCleanupLogAvgAggregateOutputType | null
    _sum: SessionCleanupLogSumAggregateOutputType | null
    _min: SessionCleanupLogMinAggregateOutputType | null
    _max: SessionCleanupLogMaxAggregateOutputType | null
  }

  export type SessionCleanupLogAvgAggregateOutputType = {
    removed: number | null
  }

  export type SessionCleanupLogSumAggregateOutputType = {
    removed: number | null
  }

  export type SessionCleanupLogMinAggregateOutputType = {
    id: string | null
    removed: number | null
    runAt: Date | null
  }

  export type SessionCleanupLogMaxAggregateOutputType = {
    id: string | null
    removed: number | null
    runAt: Date | null
  }

  export type SessionCleanupLogCountAggregateOutputType = {
    id: number
    removed: number
    runAt: number
    _all: number
  }


  export type SessionCleanupLogAvgAggregateInputType = {
    removed?: true
  }

  export type SessionCleanupLogSumAggregateInputType = {
    removed?: true
  }

  export type SessionCleanupLogMinAggregateInputType = {
    id?: true
    removed?: true
    runAt?: true
  }

  export type SessionCleanupLogMaxAggregateInputType = {
    id?: true
    removed?: true
    runAt?: true
  }

  export type SessionCleanupLogCountAggregateInputType = {
    id?: true
    removed?: true
    runAt?: true
    _all?: true
  }

  export type SessionCleanupLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionCleanupLog to aggregate.
     */
    where?: SessionCleanupLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupLogs to fetch.
     */
    orderBy?: SessionCleanupLogOrderByWithRelationInput | SessionCleanupLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionCleanupLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionCleanupLogs
    **/
    _count?: true | SessionCleanupLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionCleanupLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionCleanupLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionCleanupLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionCleanupLogMaxAggregateInputType
  }

  export type GetSessionCleanupLogAggregateType<T extends SessionCleanupLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionCleanupLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionCleanupLog[P]>
      : GetScalarType<T[P], AggregateSessionCleanupLog[P]>
  }




  export type SessionCleanupLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionCleanupLogWhereInput
    orderBy?: SessionCleanupLogOrderByWithAggregationInput | SessionCleanupLogOrderByWithAggregationInput[]
    by: SessionCleanupLogScalarFieldEnum[] | SessionCleanupLogScalarFieldEnum
    having?: SessionCleanupLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCleanupLogCountAggregateInputType | true
    _avg?: SessionCleanupLogAvgAggregateInputType
    _sum?: SessionCleanupLogSumAggregateInputType
    _min?: SessionCleanupLogMinAggregateInputType
    _max?: SessionCleanupLogMaxAggregateInputType
  }

  export type SessionCleanupLogGroupByOutputType = {
    id: string
    removed: number
    runAt: Date
    _count: SessionCleanupLogCountAggregateOutputType | null
    _avg: SessionCleanupLogAvgAggregateOutputType | null
    _sum: SessionCleanupLogSumAggregateOutputType | null
    _min: SessionCleanupLogMinAggregateOutputType | null
    _max: SessionCleanupLogMaxAggregateOutputType | null
  }

  type GetSessionCleanupLogGroupByPayload<T extends SessionCleanupLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionCleanupLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionCleanupLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionCleanupLogGroupByOutputType[P]>
            : GetScalarType<T[P], SessionCleanupLogGroupByOutputType[P]>
        }
      >
    >


  export type SessionCleanupLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    removed?: boolean
    runAt?: boolean
  }, ExtArgs["result"]["sessionCleanupLog"]>

  export type SessionCleanupLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    removed?: boolean
    runAt?: boolean
  }, ExtArgs["result"]["sessionCleanupLog"]>

  export type SessionCleanupLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    removed?: boolean
    runAt?: boolean
  }, ExtArgs["result"]["sessionCleanupLog"]>

  export type SessionCleanupLogSelectScalar = {
    id?: boolean
    removed?: boolean
    runAt?: boolean
  }

  export type SessionCleanupLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "removed" | "runAt", ExtArgs["result"]["sessionCleanupLog"]>

  export type $SessionCleanupLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionCleanupLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      removed: number
      runAt: Date
    }, ExtArgs["result"]["sessionCleanupLog"]>
    composites: {}
  }

  type SessionCleanupLogGetPayload<S extends boolean | null | undefined | SessionCleanupLogDefaultArgs> = $Result.GetResult<Prisma.$SessionCleanupLogPayload, S>

  type SessionCleanupLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionCleanupLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCleanupLogCountAggregateInputType | true
    }

  export interface SessionCleanupLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionCleanupLog'], meta: { name: 'SessionCleanupLog' } }
    /**
     * Find zero or one SessionCleanupLog that matches the filter.
     * @param {SessionCleanupLogFindUniqueArgs} args - Arguments to find a SessionCleanupLog
     * @example
     * // Get one SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionCleanupLogFindUniqueArgs>(args: SelectSubset<T, SessionCleanupLogFindUniqueArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionCleanupLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionCleanupLogFindUniqueOrThrowArgs} args - Arguments to find a SessionCleanupLog
     * @example
     * // Get one SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionCleanupLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionCleanupLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionCleanupLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogFindFirstArgs} args - Arguments to find a SessionCleanupLog
     * @example
     * // Get one SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionCleanupLogFindFirstArgs>(args?: SelectSubset<T, SessionCleanupLogFindFirstArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionCleanupLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogFindFirstOrThrowArgs} args - Arguments to find a SessionCleanupLog
     * @example
     * // Get one SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionCleanupLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionCleanupLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionCleanupLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionCleanupLogs
     * const sessionCleanupLogs = await prisma.sessionCleanupLog.findMany()
     * 
     * // Get first 10 SessionCleanupLogs
     * const sessionCleanupLogs = await prisma.sessionCleanupLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionCleanupLogWithIdOnly = await prisma.sessionCleanupLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionCleanupLogFindManyArgs>(args?: SelectSubset<T, SessionCleanupLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionCleanupLog.
     * @param {SessionCleanupLogCreateArgs} args - Arguments to create a SessionCleanupLog.
     * @example
     * // Create one SessionCleanupLog
     * const SessionCleanupLog = await prisma.sessionCleanupLog.create({
     *   data: {
     *     // ... data to create a SessionCleanupLog
     *   }
     * })
     * 
     */
    create<T extends SessionCleanupLogCreateArgs>(args: SelectSubset<T, SessionCleanupLogCreateArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionCleanupLogs.
     * @param {SessionCleanupLogCreateManyArgs} args - Arguments to create many SessionCleanupLogs.
     * @example
     * // Create many SessionCleanupLogs
     * const sessionCleanupLog = await prisma.sessionCleanupLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCleanupLogCreateManyArgs>(args?: SelectSubset<T, SessionCleanupLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionCleanupLogs and returns the data saved in the database.
     * @param {SessionCleanupLogCreateManyAndReturnArgs} args - Arguments to create many SessionCleanupLogs.
     * @example
     * // Create many SessionCleanupLogs
     * const sessionCleanupLog = await prisma.sessionCleanupLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionCleanupLogs and only return the `id`
     * const sessionCleanupLogWithIdOnly = await prisma.sessionCleanupLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCleanupLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCleanupLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionCleanupLog.
     * @param {SessionCleanupLogDeleteArgs} args - Arguments to delete one SessionCleanupLog.
     * @example
     * // Delete one SessionCleanupLog
     * const SessionCleanupLog = await prisma.sessionCleanupLog.delete({
     *   where: {
     *     // ... filter to delete one SessionCleanupLog
     *   }
     * })
     * 
     */
    delete<T extends SessionCleanupLogDeleteArgs>(args: SelectSubset<T, SessionCleanupLogDeleteArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionCleanupLog.
     * @param {SessionCleanupLogUpdateArgs} args - Arguments to update one SessionCleanupLog.
     * @example
     * // Update one SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionCleanupLogUpdateArgs>(args: SelectSubset<T, SessionCleanupLogUpdateArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionCleanupLogs.
     * @param {SessionCleanupLogDeleteManyArgs} args - Arguments to filter SessionCleanupLogs to delete.
     * @example
     * // Delete a few SessionCleanupLogs
     * const { count } = await prisma.sessionCleanupLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionCleanupLogDeleteManyArgs>(args?: SelectSubset<T, SessionCleanupLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionCleanupLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionCleanupLogs
     * const sessionCleanupLog = await prisma.sessionCleanupLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionCleanupLogUpdateManyArgs>(args: SelectSubset<T, SessionCleanupLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionCleanupLogs and returns the data updated in the database.
     * @param {SessionCleanupLogUpdateManyAndReturnArgs} args - Arguments to update many SessionCleanupLogs.
     * @example
     * // Update many SessionCleanupLogs
     * const sessionCleanupLog = await prisma.sessionCleanupLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionCleanupLogs and only return the `id`
     * const sessionCleanupLogWithIdOnly = await prisma.sessionCleanupLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionCleanupLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionCleanupLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionCleanupLog.
     * @param {SessionCleanupLogUpsertArgs} args - Arguments to update or create a SessionCleanupLog.
     * @example
     * // Update or create a SessionCleanupLog
     * const sessionCleanupLog = await prisma.sessionCleanupLog.upsert({
     *   create: {
     *     // ... data to create a SessionCleanupLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionCleanupLog we want to update
     *   }
     * })
     */
    upsert<T extends SessionCleanupLogUpsertArgs>(args: SelectSubset<T, SessionCleanupLogUpsertArgs<ExtArgs>>): Prisma__SessionCleanupLogClient<$Result.GetResult<Prisma.$SessionCleanupLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionCleanupLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogCountArgs} args - Arguments to filter SessionCleanupLogs to count.
     * @example
     * // Count the number of SessionCleanupLogs
     * const count = await prisma.sessionCleanupLog.count({
     *   where: {
     *     // ... the filter for the SessionCleanupLogs we want to count
     *   }
     * })
    **/
    count<T extends SessionCleanupLogCountArgs>(
      args?: Subset<T, SessionCleanupLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCleanupLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionCleanupLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionCleanupLogAggregateArgs>(args: Subset<T, SessionCleanupLogAggregateArgs>): Prisma.PrismaPromise<GetSessionCleanupLogAggregateType<T>>

    /**
     * Group by SessionCleanupLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionCleanupLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionCleanupLogGroupByArgs['orderBy'] }
        : { orderBy?: SessionCleanupLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionCleanupLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionCleanupLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionCleanupLog model
   */
  readonly fields: SessionCleanupLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionCleanupLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionCleanupLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionCleanupLog model
   */
  interface SessionCleanupLogFieldRefs {
    readonly id: FieldRef<"SessionCleanupLog", 'String'>
    readonly removed: FieldRef<"SessionCleanupLog", 'Int'>
    readonly runAt: FieldRef<"SessionCleanupLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionCleanupLog findUnique
   */
  export type SessionCleanupLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupLog to fetch.
     */
    where: SessionCleanupLogWhereUniqueInput
  }

  /**
   * SessionCleanupLog findUniqueOrThrow
   */
  export type SessionCleanupLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupLog to fetch.
     */
    where: SessionCleanupLogWhereUniqueInput
  }

  /**
   * SessionCleanupLog findFirst
   */
  export type SessionCleanupLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupLog to fetch.
     */
    where?: SessionCleanupLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupLogs to fetch.
     */
    orderBy?: SessionCleanupLogOrderByWithRelationInput | SessionCleanupLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionCleanupLogs.
     */
    cursor?: SessionCleanupLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionCleanupLogs.
     */
    distinct?: SessionCleanupLogScalarFieldEnum | SessionCleanupLogScalarFieldEnum[]
  }

  /**
   * SessionCleanupLog findFirstOrThrow
   */
  export type SessionCleanupLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupLog to fetch.
     */
    where?: SessionCleanupLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupLogs to fetch.
     */
    orderBy?: SessionCleanupLogOrderByWithRelationInput | SessionCleanupLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionCleanupLogs.
     */
    cursor?: SessionCleanupLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionCleanupLogs.
     */
    distinct?: SessionCleanupLogScalarFieldEnum | SessionCleanupLogScalarFieldEnum[]
  }

  /**
   * SessionCleanupLog findMany
   */
  export type SessionCleanupLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupLogs to fetch.
     */
    where?: SessionCleanupLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupLogs to fetch.
     */
    orderBy?: SessionCleanupLogOrderByWithRelationInput | SessionCleanupLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionCleanupLogs.
     */
    cursor?: SessionCleanupLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupLogs.
     */
    skip?: number
    distinct?: SessionCleanupLogScalarFieldEnum | SessionCleanupLogScalarFieldEnum[]
  }

  /**
   * SessionCleanupLog create
   */
  export type SessionCleanupLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * The data needed to create a SessionCleanupLog.
     */
    data: XOR<SessionCleanupLogCreateInput, SessionCleanupLogUncheckedCreateInput>
  }

  /**
   * SessionCleanupLog createMany
   */
  export type SessionCleanupLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionCleanupLogs.
     */
    data: SessionCleanupLogCreateManyInput | SessionCleanupLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionCleanupLog createManyAndReturn
   */
  export type SessionCleanupLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * The data used to create many SessionCleanupLogs.
     */
    data: SessionCleanupLogCreateManyInput | SessionCleanupLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionCleanupLog update
   */
  export type SessionCleanupLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * The data needed to update a SessionCleanupLog.
     */
    data: XOR<SessionCleanupLogUpdateInput, SessionCleanupLogUncheckedUpdateInput>
    /**
     * Choose, which SessionCleanupLog to update.
     */
    where: SessionCleanupLogWhereUniqueInput
  }

  /**
   * SessionCleanupLog updateMany
   */
  export type SessionCleanupLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionCleanupLogs.
     */
    data: XOR<SessionCleanupLogUpdateManyMutationInput, SessionCleanupLogUncheckedUpdateManyInput>
    /**
     * Filter which SessionCleanupLogs to update
     */
    where?: SessionCleanupLogWhereInput
    /**
     * Limit how many SessionCleanupLogs to update.
     */
    limit?: number
  }

  /**
   * SessionCleanupLog updateManyAndReturn
   */
  export type SessionCleanupLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * The data used to update SessionCleanupLogs.
     */
    data: XOR<SessionCleanupLogUpdateManyMutationInput, SessionCleanupLogUncheckedUpdateManyInput>
    /**
     * Filter which SessionCleanupLogs to update
     */
    where?: SessionCleanupLogWhereInput
    /**
     * Limit how many SessionCleanupLogs to update.
     */
    limit?: number
  }

  /**
   * SessionCleanupLog upsert
   */
  export type SessionCleanupLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * The filter to search for the SessionCleanupLog to update in case it exists.
     */
    where: SessionCleanupLogWhereUniqueInput
    /**
     * In case the SessionCleanupLog found by the `where` argument doesn't exist, create a new SessionCleanupLog with this data.
     */
    create: XOR<SessionCleanupLogCreateInput, SessionCleanupLogUncheckedCreateInput>
    /**
     * In case the SessionCleanupLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionCleanupLogUpdateInput, SessionCleanupLogUncheckedUpdateInput>
  }

  /**
   * SessionCleanupLog delete
   */
  export type SessionCleanupLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
    /**
     * Filter which SessionCleanupLog to delete.
     */
    where: SessionCleanupLogWhereUniqueInput
  }

  /**
   * SessionCleanupLog deleteMany
   */
  export type SessionCleanupLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionCleanupLogs to delete
     */
    where?: SessionCleanupLogWhereInput
    /**
     * Limit how many SessionCleanupLogs to delete.
     */
    limit?: number
  }

  /**
   * SessionCleanupLog without action
   */
  export type SessionCleanupLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupLog
     */
    select?: SessionCleanupLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupLog
     */
    omit?: SessionCleanupLogOmit<ExtArgs> | null
  }


  /**
   * Model SessionCleanupConfig
   */

  export type AggregateSessionCleanupConfig = {
    _count: SessionCleanupConfigCountAggregateOutputType | null
    _avg: SessionCleanupConfigAvgAggregateOutputType | null
    _sum: SessionCleanupConfigSumAggregateOutputType | null
    _min: SessionCleanupConfigMinAggregateOutputType | null
    _max: SessionCleanupConfigMaxAggregateOutputType | null
  }

  export type SessionCleanupConfigAvgAggregateOutputType = {
    cleanupProbability: number | null
    maxLifetimeHours: number | null
  }

  export type SessionCleanupConfigSumAggregateOutputType = {
    cleanupProbability: number | null
    maxLifetimeHours: number | null
  }

  export type SessionCleanupConfigMinAggregateOutputType = {
    id: string | null
    cleanupProbability: number | null
    maxLifetimeHours: number | null
    lastRunAt: Date | null
  }

  export type SessionCleanupConfigMaxAggregateOutputType = {
    id: string | null
    cleanupProbability: number | null
    maxLifetimeHours: number | null
    lastRunAt: Date | null
  }

  export type SessionCleanupConfigCountAggregateOutputType = {
    id: number
    cleanupProbability: number
    maxLifetimeHours: number
    lastRunAt: number
    _all: number
  }


  export type SessionCleanupConfigAvgAggregateInputType = {
    cleanupProbability?: true
    maxLifetimeHours?: true
  }

  export type SessionCleanupConfigSumAggregateInputType = {
    cleanupProbability?: true
    maxLifetimeHours?: true
  }

  export type SessionCleanupConfigMinAggregateInputType = {
    id?: true
    cleanupProbability?: true
    maxLifetimeHours?: true
    lastRunAt?: true
  }

  export type SessionCleanupConfigMaxAggregateInputType = {
    id?: true
    cleanupProbability?: true
    maxLifetimeHours?: true
    lastRunAt?: true
  }

  export type SessionCleanupConfigCountAggregateInputType = {
    id?: true
    cleanupProbability?: true
    maxLifetimeHours?: true
    lastRunAt?: true
    _all?: true
  }

  export type SessionCleanupConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionCleanupConfig to aggregate.
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupConfigs to fetch.
     */
    orderBy?: SessionCleanupConfigOrderByWithRelationInput | SessionCleanupConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionCleanupConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionCleanupConfigs
    **/
    _count?: true | SessionCleanupConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionCleanupConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionCleanupConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionCleanupConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionCleanupConfigMaxAggregateInputType
  }

  export type GetSessionCleanupConfigAggregateType<T extends SessionCleanupConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionCleanupConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionCleanupConfig[P]>
      : GetScalarType<T[P], AggregateSessionCleanupConfig[P]>
  }




  export type SessionCleanupConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionCleanupConfigWhereInput
    orderBy?: SessionCleanupConfigOrderByWithAggregationInput | SessionCleanupConfigOrderByWithAggregationInput[]
    by: SessionCleanupConfigScalarFieldEnum[] | SessionCleanupConfigScalarFieldEnum
    having?: SessionCleanupConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCleanupConfigCountAggregateInputType | true
    _avg?: SessionCleanupConfigAvgAggregateInputType
    _sum?: SessionCleanupConfigSumAggregateInputType
    _min?: SessionCleanupConfigMinAggregateInputType
    _max?: SessionCleanupConfigMaxAggregateInputType
  }

  export type SessionCleanupConfigGroupByOutputType = {
    id: string
    cleanupProbability: number
    maxLifetimeHours: number
    lastRunAt: Date
    _count: SessionCleanupConfigCountAggregateOutputType | null
    _avg: SessionCleanupConfigAvgAggregateOutputType | null
    _sum: SessionCleanupConfigSumAggregateOutputType | null
    _min: SessionCleanupConfigMinAggregateOutputType | null
    _max: SessionCleanupConfigMaxAggregateOutputType | null
  }

  type GetSessionCleanupConfigGroupByPayload<T extends SessionCleanupConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionCleanupConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionCleanupConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionCleanupConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SessionCleanupConfigGroupByOutputType[P]>
        }
      >
    >


  export type SessionCleanupConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cleanupProbability?: boolean
    maxLifetimeHours?: boolean
    lastRunAt?: boolean
  }, ExtArgs["result"]["sessionCleanupConfig"]>

  export type SessionCleanupConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cleanupProbability?: boolean
    maxLifetimeHours?: boolean
    lastRunAt?: boolean
  }, ExtArgs["result"]["sessionCleanupConfig"]>

  export type SessionCleanupConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cleanupProbability?: boolean
    maxLifetimeHours?: boolean
    lastRunAt?: boolean
  }, ExtArgs["result"]["sessionCleanupConfig"]>

  export type SessionCleanupConfigSelectScalar = {
    id?: boolean
    cleanupProbability?: boolean
    maxLifetimeHours?: boolean
    lastRunAt?: boolean
  }

  export type SessionCleanupConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cleanupProbability" | "maxLifetimeHours" | "lastRunAt", ExtArgs["result"]["sessionCleanupConfig"]>

  export type $SessionCleanupConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionCleanupConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cleanupProbability: number
      maxLifetimeHours: number
      lastRunAt: Date
    }, ExtArgs["result"]["sessionCleanupConfig"]>
    composites: {}
  }

  type SessionCleanupConfigGetPayload<S extends boolean | null | undefined | SessionCleanupConfigDefaultArgs> = $Result.GetResult<Prisma.$SessionCleanupConfigPayload, S>

  type SessionCleanupConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionCleanupConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCleanupConfigCountAggregateInputType | true
    }

  export interface SessionCleanupConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionCleanupConfig'], meta: { name: 'SessionCleanupConfig' } }
    /**
     * Find zero or one SessionCleanupConfig that matches the filter.
     * @param {SessionCleanupConfigFindUniqueArgs} args - Arguments to find a SessionCleanupConfig
     * @example
     * // Get one SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionCleanupConfigFindUniqueArgs>(args: SelectSubset<T, SessionCleanupConfigFindUniqueArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionCleanupConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionCleanupConfigFindUniqueOrThrowArgs} args - Arguments to find a SessionCleanupConfig
     * @example
     * // Get one SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionCleanupConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionCleanupConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionCleanupConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigFindFirstArgs} args - Arguments to find a SessionCleanupConfig
     * @example
     * // Get one SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionCleanupConfigFindFirstArgs>(args?: SelectSubset<T, SessionCleanupConfigFindFirstArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionCleanupConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigFindFirstOrThrowArgs} args - Arguments to find a SessionCleanupConfig
     * @example
     * // Get one SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionCleanupConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionCleanupConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionCleanupConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionCleanupConfigs
     * const sessionCleanupConfigs = await prisma.sessionCleanupConfig.findMany()
     * 
     * // Get first 10 SessionCleanupConfigs
     * const sessionCleanupConfigs = await prisma.sessionCleanupConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionCleanupConfigWithIdOnly = await prisma.sessionCleanupConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionCleanupConfigFindManyArgs>(args?: SelectSubset<T, SessionCleanupConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionCleanupConfig.
     * @param {SessionCleanupConfigCreateArgs} args - Arguments to create a SessionCleanupConfig.
     * @example
     * // Create one SessionCleanupConfig
     * const SessionCleanupConfig = await prisma.sessionCleanupConfig.create({
     *   data: {
     *     // ... data to create a SessionCleanupConfig
     *   }
     * })
     * 
     */
    create<T extends SessionCleanupConfigCreateArgs>(args: SelectSubset<T, SessionCleanupConfigCreateArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionCleanupConfigs.
     * @param {SessionCleanupConfigCreateManyArgs} args - Arguments to create many SessionCleanupConfigs.
     * @example
     * // Create many SessionCleanupConfigs
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCleanupConfigCreateManyArgs>(args?: SelectSubset<T, SessionCleanupConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionCleanupConfigs and returns the data saved in the database.
     * @param {SessionCleanupConfigCreateManyAndReturnArgs} args - Arguments to create many SessionCleanupConfigs.
     * @example
     * // Create many SessionCleanupConfigs
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionCleanupConfigs and only return the `id`
     * const sessionCleanupConfigWithIdOnly = await prisma.sessionCleanupConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCleanupConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCleanupConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionCleanupConfig.
     * @param {SessionCleanupConfigDeleteArgs} args - Arguments to delete one SessionCleanupConfig.
     * @example
     * // Delete one SessionCleanupConfig
     * const SessionCleanupConfig = await prisma.sessionCleanupConfig.delete({
     *   where: {
     *     // ... filter to delete one SessionCleanupConfig
     *   }
     * })
     * 
     */
    delete<T extends SessionCleanupConfigDeleteArgs>(args: SelectSubset<T, SessionCleanupConfigDeleteArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionCleanupConfig.
     * @param {SessionCleanupConfigUpdateArgs} args - Arguments to update one SessionCleanupConfig.
     * @example
     * // Update one SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionCleanupConfigUpdateArgs>(args: SelectSubset<T, SessionCleanupConfigUpdateArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionCleanupConfigs.
     * @param {SessionCleanupConfigDeleteManyArgs} args - Arguments to filter SessionCleanupConfigs to delete.
     * @example
     * // Delete a few SessionCleanupConfigs
     * const { count } = await prisma.sessionCleanupConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionCleanupConfigDeleteManyArgs>(args?: SelectSubset<T, SessionCleanupConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionCleanupConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionCleanupConfigs
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionCleanupConfigUpdateManyArgs>(args: SelectSubset<T, SessionCleanupConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionCleanupConfigs and returns the data updated in the database.
     * @param {SessionCleanupConfigUpdateManyAndReturnArgs} args - Arguments to update many SessionCleanupConfigs.
     * @example
     * // Update many SessionCleanupConfigs
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionCleanupConfigs and only return the `id`
     * const sessionCleanupConfigWithIdOnly = await prisma.sessionCleanupConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionCleanupConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionCleanupConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionCleanupConfig.
     * @param {SessionCleanupConfigUpsertArgs} args - Arguments to update or create a SessionCleanupConfig.
     * @example
     * // Update or create a SessionCleanupConfig
     * const sessionCleanupConfig = await prisma.sessionCleanupConfig.upsert({
     *   create: {
     *     // ... data to create a SessionCleanupConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionCleanupConfig we want to update
     *   }
     * })
     */
    upsert<T extends SessionCleanupConfigUpsertArgs>(args: SelectSubset<T, SessionCleanupConfigUpsertArgs<ExtArgs>>): Prisma__SessionCleanupConfigClient<$Result.GetResult<Prisma.$SessionCleanupConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionCleanupConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigCountArgs} args - Arguments to filter SessionCleanupConfigs to count.
     * @example
     * // Count the number of SessionCleanupConfigs
     * const count = await prisma.sessionCleanupConfig.count({
     *   where: {
     *     // ... the filter for the SessionCleanupConfigs we want to count
     *   }
     * })
    **/
    count<T extends SessionCleanupConfigCountArgs>(
      args?: Subset<T, SessionCleanupConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCleanupConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionCleanupConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionCleanupConfigAggregateArgs>(args: Subset<T, SessionCleanupConfigAggregateArgs>): Prisma.PrismaPromise<GetSessionCleanupConfigAggregateType<T>>

    /**
     * Group by SessionCleanupConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCleanupConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionCleanupConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionCleanupConfigGroupByArgs['orderBy'] }
        : { orderBy?: SessionCleanupConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionCleanupConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionCleanupConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionCleanupConfig model
   */
  readonly fields: SessionCleanupConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionCleanupConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionCleanupConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionCleanupConfig model
   */
  interface SessionCleanupConfigFieldRefs {
    readonly id: FieldRef<"SessionCleanupConfig", 'String'>
    readonly cleanupProbability: FieldRef<"SessionCleanupConfig", 'Float'>
    readonly maxLifetimeHours: FieldRef<"SessionCleanupConfig", 'Int'>
    readonly lastRunAt: FieldRef<"SessionCleanupConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionCleanupConfig findUnique
   */
  export type SessionCleanupConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupConfig to fetch.
     */
    where: SessionCleanupConfigWhereUniqueInput
  }

  /**
   * SessionCleanupConfig findUniqueOrThrow
   */
  export type SessionCleanupConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupConfig to fetch.
     */
    where: SessionCleanupConfigWhereUniqueInput
  }

  /**
   * SessionCleanupConfig findFirst
   */
  export type SessionCleanupConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupConfig to fetch.
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupConfigs to fetch.
     */
    orderBy?: SessionCleanupConfigOrderByWithRelationInput | SessionCleanupConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionCleanupConfigs.
     */
    cursor?: SessionCleanupConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionCleanupConfigs.
     */
    distinct?: SessionCleanupConfigScalarFieldEnum | SessionCleanupConfigScalarFieldEnum[]
  }

  /**
   * SessionCleanupConfig findFirstOrThrow
   */
  export type SessionCleanupConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupConfig to fetch.
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupConfigs to fetch.
     */
    orderBy?: SessionCleanupConfigOrderByWithRelationInput | SessionCleanupConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionCleanupConfigs.
     */
    cursor?: SessionCleanupConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionCleanupConfigs.
     */
    distinct?: SessionCleanupConfigScalarFieldEnum | SessionCleanupConfigScalarFieldEnum[]
  }

  /**
   * SessionCleanupConfig findMany
   */
  export type SessionCleanupConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter, which SessionCleanupConfigs to fetch.
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionCleanupConfigs to fetch.
     */
    orderBy?: SessionCleanupConfigOrderByWithRelationInput | SessionCleanupConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionCleanupConfigs.
     */
    cursor?: SessionCleanupConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionCleanupConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionCleanupConfigs.
     */
    skip?: number
    distinct?: SessionCleanupConfigScalarFieldEnum | SessionCleanupConfigScalarFieldEnum[]
  }

  /**
   * SessionCleanupConfig create
   */
  export type SessionCleanupConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SessionCleanupConfig.
     */
    data?: XOR<SessionCleanupConfigCreateInput, SessionCleanupConfigUncheckedCreateInput>
  }

  /**
   * SessionCleanupConfig createMany
   */
  export type SessionCleanupConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionCleanupConfigs.
     */
    data: SessionCleanupConfigCreateManyInput | SessionCleanupConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionCleanupConfig createManyAndReturn
   */
  export type SessionCleanupConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SessionCleanupConfigs.
     */
    data: SessionCleanupConfigCreateManyInput | SessionCleanupConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionCleanupConfig update
   */
  export type SessionCleanupConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SessionCleanupConfig.
     */
    data: XOR<SessionCleanupConfigUpdateInput, SessionCleanupConfigUncheckedUpdateInput>
    /**
     * Choose, which SessionCleanupConfig to update.
     */
    where: SessionCleanupConfigWhereUniqueInput
  }

  /**
   * SessionCleanupConfig updateMany
   */
  export type SessionCleanupConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionCleanupConfigs.
     */
    data: XOR<SessionCleanupConfigUpdateManyMutationInput, SessionCleanupConfigUncheckedUpdateManyInput>
    /**
     * Filter which SessionCleanupConfigs to update
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * Limit how many SessionCleanupConfigs to update.
     */
    limit?: number
  }

  /**
   * SessionCleanupConfig updateManyAndReturn
   */
  export type SessionCleanupConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * The data used to update SessionCleanupConfigs.
     */
    data: XOR<SessionCleanupConfigUpdateManyMutationInput, SessionCleanupConfigUncheckedUpdateManyInput>
    /**
     * Filter which SessionCleanupConfigs to update
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * Limit how many SessionCleanupConfigs to update.
     */
    limit?: number
  }

  /**
   * SessionCleanupConfig upsert
   */
  export type SessionCleanupConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SessionCleanupConfig to update in case it exists.
     */
    where: SessionCleanupConfigWhereUniqueInput
    /**
     * In case the SessionCleanupConfig found by the `where` argument doesn't exist, create a new SessionCleanupConfig with this data.
     */
    create: XOR<SessionCleanupConfigCreateInput, SessionCleanupConfigUncheckedCreateInput>
    /**
     * In case the SessionCleanupConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionCleanupConfigUpdateInput, SessionCleanupConfigUncheckedUpdateInput>
  }

  /**
   * SessionCleanupConfig delete
   */
  export type SessionCleanupConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
    /**
     * Filter which SessionCleanupConfig to delete.
     */
    where: SessionCleanupConfigWhereUniqueInput
  }

  /**
   * SessionCleanupConfig deleteMany
   */
  export type SessionCleanupConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionCleanupConfigs to delete
     */
    where?: SessionCleanupConfigWhereInput
    /**
     * Limit how many SessionCleanupConfigs to delete.
     */
    limit?: number
  }

  /**
   * SessionCleanupConfig without action
   */
  export type SessionCleanupConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCleanupConfig
     */
    select?: SessionCleanupConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionCleanupConfig
     */
    omit?: SessionCleanupConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    status: 'status',
    severity: 'severity',
    metadata: 'metadata',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    agentId: 'agentId',
    targetId: 'targetId',
    targetType: 'targetType'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const AgentScalarFieldEnum: {
    id: 'id',
    fieldId: 'fieldId',
    surname: 'surname',
    firstName: 'firstName',
    otherName: 'otherName',
    gender: 'gender',
    dob: 'dob',
    email: 'email',
    phone: 'phone',
    nin: 'nin',
    bvn: 'bvn',
    state: 'state',
    lga: 'lga',
    address: 'address',
    emailHash: 'emailHash',
    phoneHash: 'phoneHash',
    ninHash: 'ninHash',
    bvnHash: 'bvnHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt',
    lastLoginAttemptIp: 'lastLoginAttemptIp',
    isActive: 'isActive',
    admittedAt: 'admittedAt',
    deletedAt: 'deletedAt',
    deletionReason: 'deletionReason',
    deactivatedAt: 'deactivatedAt',
    deactivationReason: 'deactivationReason',
    avatarUrl: 'avatarUrl',
    status: 'status'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const AgentProfileScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    email: 'email',
    emailHash: 'emailHash',
    phone: 'phone',
    phoneHash: 'phoneHash',
    pin: 'pin',
    pinHash: 'pinHash',
    passwordHash: 'passwordHash',
    emailVerified: 'emailVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    passwordResetAttempts: 'passwordResetAttempts',
    accountLockedUntil: 'accountLockedUntil',
    isLocked: 'isLocked',
    lockoutCount: 'lockoutCount',
    lockedUntil: 'lockedUntil',
    lastPasswordResetAt: 'lastPasswordResetAt',
    avatarUrl: 'avatarUrl',
    failedDeletionAttempts: 'failedDeletionAttempts',
    deletionLockedUntil: 'deletionLockedUntil',
    deletionLockoutCount: 'deletionLockoutCount'
  };

  export type AgentProfileScalarFieldEnum = (typeof AgentProfileScalarFieldEnum)[keyof typeof AgentProfileScalarFieldEnum]


  export const AgentSessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    agentId: 'agentId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    revokedAt: 'revokedAt'
  };

  export type AgentSessionScalarFieldEnum = (typeof AgentSessionScalarFieldEnum)[keyof typeof AgentSessionScalarFieldEnum]


  export const DeletionScheduleScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    scheduledAt: 'scheduledAt',
    deletionType: 'deletionType',
    completedAt: 'completedAt',
    createdAt: 'createdAt'
  };

  export type DeletionScheduleScalarFieldEnum = (typeof DeletionScheduleScalarFieldEnum)[keyof typeof DeletionScheduleScalarFieldEnum]


  export const VerificationStatusScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    emailVerified: 'emailVerified',
    emailVerifiedDate: 'emailVerifiedDate',
    phoneVerified: 'phoneVerified',
    phoneVerifiedDate: 'phoneVerifiedDate',
    ninVerified: 'ninVerified',
    ninVerifiedDate: 'ninVerifiedDate',
    bvnVerified: 'bvnVerified',
    bvnVerifiedDate: 'bvnVerifiedDate',
    documentVerified: 'documentVerified',
    documentVerifiedDate: 'documentVerifiedDate',
    dobVerified: 'dobVerified',
    dobVerifiedDate: 'dobVerifiedDate',
    genderVerified: 'genderVerified',
    genderVerifiedDate: 'genderVerifiedDate',
    nameVerified: 'nameVerified',
    nameVerificationDate: 'nameVerificationDate',
    lastCheckedAt: 'lastCheckedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationStatusScalarFieldEnum = (typeof VerificationStatusScalarFieldEnum)[keyof typeof VerificationStatusScalarFieldEnum]


  export const FailedAttemptScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    action: 'action',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    attempts: 'attempts'
  };

  export type FailedAttemptScalarFieldEnum = (typeof FailedAttemptScalarFieldEnum)[keyof typeof FailedAttemptScalarFieldEnum]


  export const FailedDeletionAttemptScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    action: 'action',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    attempts: 'attempts',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type FailedDeletionAttemptScalarFieldEnum = (typeof FailedDeletionAttemptScalarFieldEnum)[keyof typeof FailedDeletionAttemptScalarFieldEnum]


  export const AccountLockScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    reason: 'reason',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    action: 'action',
    userAgent: 'userAgent'
  };

  export type AccountLockScalarFieldEnum = (typeof AccountLockScalarFieldEnum)[keyof typeof AccountLockScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    tokenHash: 'tokenHash',
    agentId: 'agentId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt',
    agentProfileId: 'agentProfileId'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const PasswordResetEventScalarFieldEnum: {
    id: 'id',
    agentId: 'agentId',
    createdAt: 'createdAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type PasswordResetEventScalarFieldEnum = (typeof PasswordResetEventScalarFieldEnum)[keyof typeof PasswordResetEventScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    email: 'email',
    verified: 'verified',
    fullName: 'fullName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    bio: 'bio',
    country: 'country',
    state: 'state',
    city: 'city',
    address: 'address',
    phoneNumber: 'phoneNumber',
    phoneVerified: 'phoneVerified',
    hasPin: 'hasPin',
    pinHash: 'pinHash',
    isBanned: 'isBanned',
    passwordChangedAt: 'passwordChangedAt',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    role: 'role'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    revoked: 'revoked',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const OAuthAccountScalarFieldEnum: {
    id: 'id',
    provider: 'provider',
    providerId: 'providerId',
    agentId: 'agentId',
    createdAt: 'createdAt'
  };

  export type OAuthAccountScalarFieldEnum = (typeof OAuthAccountScalarFieldEnum)[keyof typeof OAuthAccountScalarFieldEnum]


  export const SessionCleanupLogScalarFieldEnum: {
    id: 'id',
    removed: 'removed',
    runAt: 'runAt'
  };

  export type SessionCleanupLogScalarFieldEnum = (typeof SessionCleanupLogScalarFieldEnum)[keyof typeof SessionCleanupLogScalarFieldEnum]


  export const SessionCleanupConfigScalarFieldEnum: {
    id: 'id',
    cleanupProbability: 'cleanupProbability',
    maxLifetimeHours: 'maxLifetimeHours',
    lastRunAt: 'lastRunAt'
  };

  export type SessionCleanupConfigScalarFieldEnum = (typeof SessionCleanupConfigScalarFieldEnum)[keyof typeof SessionCleanupConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AuditAction'
   */
  export type EnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction'>
    


  /**
   * Reference to a field of type 'AuditAction[]'
   */
  export type ListEnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction[]'>
    


  /**
   * Reference to a field of type 'AuditStatus'
   */
  export type EnumAuditStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditStatus'>
    


  /**
   * Reference to a field of type 'AuditStatus[]'
   */
  export type ListEnumAuditStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditStatus[]'>
    


  /**
   * Reference to a field of type 'Severity'
   */
  export type EnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity'>
    


  /**
   * Reference to a field of type 'Severity[]'
   */
  export type ListEnumSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Severity[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'UserRoleEnum'
   */
  export type EnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum'>
    


  /**
   * Reference to a field of type 'UserRoleEnum[]'
   */
  export type ListEnumUserRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRoleEnum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    details?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    status?: EnumAuditStatusFilter<"AuditLog"> | $Enums.AuditStatus
    severity?: EnumSeverityFilter<"AuditLog"> | $Enums.Severity
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AuditLog"> | Date | string | null
    agentId?: StringNullableFilter<"AuditLog"> | string | null
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    targetType?: StringNullableFilter<"AuditLog"> | string | null
    agent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    agentId?: SortOrderInput | SortOrder
    targetId?: SortOrderInput | SortOrder
    targetType?: SortOrderInput | SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    details?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    status?: EnumAuditStatusFilter<"AuditLog"> | $Enums.AuditStatus
    severity?: EnumSeverityFilter<"AuditLog"> | $Enums.Severity
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AuditLog"> | Date | string | null
    agentId?: StringNullableFilter<"AuditLog"> | string | null
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    targetType?: StringNullableFilter<"AuditLog"> | string | null
    agent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    agentId?: SortOrderInput | SortOrder
    targetId?: SortOrderInput | SortOrder
    targetType?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: EnumAuditActionWithAggregatesFilter<"AuditLog"> | $Enums.AuditAction
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringWithAggregatesFilter<"AuditLog"> | string
    userAgent?: StringWithAggregatesFilter<"AuditLog"> | string
    status?: EnumAuditStatusWithAggregatesFilter<"AuditLog"> | $Enums.AuditStatus
    severity?: EnumSeverityWithAggregatesFilter<"AuditLog"> | $Enums.Severity
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"AuditLog"> | Date | string | null
    agentId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    targetId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    targetType?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type AgentWhereInput = {
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    id?: StringFilter<"Agent"> | string
    fieldId?: StringFilter<"Agent"> | string
    surname?: StringFilter<"Agent"> | string
    firstName?: StringFilter<"Agent"> | string
    otherName?: StringFilter<"Agent"> | string
    gender?: StringNullableFilter<"Agent"> | string | null
    dob?: DateTimeNullableFilter<"Agent"> | Date | string | null
    email?: StringFilter<"Agent"> | string
    phone?: StringFilter<"Agent"> | string
    nin?: StringNullableFilter<"Agent"> | string | null
    bvn?: StringNullableFilter<"Agent"> | string | null
    state?: StringFilter<"Agent"> | string
    lga?: StringFilter<"Agent"> | string
    address?: StringFilter<"Agent"> | string
    emailHash?: StringFilter<"Agent"> | string
    phoneHash?: StringFilter<"Agent"> | string
    ninHash?: StringFilter<"Agent"> | string
    bvnHash?: StringNullableFilter<"Agent"> | string | null
    createdAt?: DateTimeFilter<"Agent"> | Date | string
    updatedAt?: DateTimeFilter<"Agent"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    lastLoginAttemptIp?: StringNullableFilter<"Agent"> | string | null
    isActive?: BoolFilter<"Agent"> | boolean
    admittedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deletionReason?: StringNullableFilter<"Agent"> | string | null
    deactivatedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deactivationReason?: StringNullableFilter<"Agent"> | string | null
    avatarUrl?: StringFilter<"Agent"> | string
    status?: StringFilter<"Agent"> | string
    profile?: XOR<AgentProfileNullableScalarRelationFilter, AgentProfileWhereInput> | null
    sessions?: AgentSessionListRelationFilter
    oauthAccounts?: OAuthAccountListRelationFilter
    PasswordResetToken?: PasswordResetTokenListRelationFilter
    PasswordResetEvent?: PasswordResetEventListRelationFilter
    AuditLog?: AuditLogListRelationFilter
    DeletionSchedule?: DeletionScheduleListRelationFilter
    AccountLock?: XOR<AccountLockNullableScalarRelationFilter, AccountLockWhereInput> | null
    FailedAttempt?: FailedAttemptListRelationFilter
    FailedDeletionAttempt?: FailedDeletionAttemptListRelationFilter
    VerificationStatus?: VerificationStatusListRelationFilter
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    fieldId?: SortOrder
    surname?: SortOrder
    firstName?: SortOrder
    otherName?: SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    nin?: SortOrderInput | SortOrder
    bvn?: SortOrderInput | SortOrder
    state?: SortOrder
    lga?: SortOrder
    address?: SortOrder
    emailHash?: SortOrder
    phoneHash?: SortOrder
    ninHash?: SortOrder
    bvnHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginAttemptIp?: SortOrderInput | SortOrder
    isActive?: SortOrder
    admittedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletionReason?: SortOrderInput | SortOrder
    deactivatedAt?: SortOrderInput | SortOrder
    deactivationReason?: SortOrderInput | SortOrder
    avatarUrl?: SortOrder
    status?: SortOrder
    profile?: AgentProfileOrderByWithRelationInput
    sessions?: AgentSessionOrderByRelationAggregateInput
    oauthAccounts?: OAuthAccountOrderByRelationAggregateInput
    PasswordResetToken?: PasswordResetTokenOrderByRelationAggregateInput
    PasswordResetEvent?: PasswordResetEventOrderByRelationAggregateInput
    AuditLog?: AuditLogOrderByRelationAggregateInput
    DeletionSchedule?: DeletionScheduleOrderByRelationAggregateInput
    AccountLock?: AccountLockOrderByWithRelationInput
    FailedAttempt?: FailedAttemptOrderByRelationAggregateInput
    FailedDeletionAttempt?: FailedDeletionAttemptOrderByRelationAggregateInput
    VerificationStatus?: VerificationStatusOrderByRelationAggregateInput
  }

  export type AgentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    nin?: string
    bvn?: string
    emailHash?: string
    phoneHash?: string
    ninHash?: string
    bvnHash?: string
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    fieldId?: StringFilter<"Agent"> | string
    surname?: StringFilter<"Agent"> | string
    firstName?: StringFilter<"Agent"> | string
    otherName?: StringFilter<"Agent"> | string
    gender?: StringNullableFilter<"Agent"> | string | null
    dob?: DateTimeNullableFilter<"Agent"> | Date | string | null
    state?: StringFilter<"Agent"> | string
    lga?: StringFilter<"Agent"> | string
    address?: StringFilter<"Agent"> | string
    createdAt?: DateTimeFilter<"Agent"> | Date | string
    updatedAt?: DateTimeFilter<"Agent"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    lastLoginAttemptIp?: StringNullableFilter<"Agent"> | string | null
    isActive?: BoolFilter<"Agent"> | boolean
    admittedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deletionReason?: StringNullableFilter<"Agent"> | string | null
    deactivatedAt?: DateTimeNullableFilter<"Agent"> | Date | string | null
    deactivationReason?: StringNullableFilter<"Agent"> | string | null
    avatarUrl?: StringFilter<"Agent"> | string
    status?: StringFilter<"Agent"> | string
    profile?: XOR<AgentProfileNullableScalarRelationFilter, AgentProfileWhereInput> | null
    sessions?: AgentSessionListRelationFilter
    oauthAccounts?: OAuthAccountListRelationFilter
    PasswordResetToken?: PasswordResetTokenListRelationFilter
    PasswordResetEvent?: PasswordResetEventListRelationFilter
    AuditLog?: AuditLogListRelationFilter
    DeletionSchedule?: DeletionScheduleListRelationFilter
    AccountLock?: XOR<AccountLockNullableScalarRelationFilter, AccountLockWhereInput> | null
    FailedAttempt?: FailedAttemptListRelationFilter
    FailedDeletionAttempt?: FailedDeletionAttemptListRelationFilter
    VerificationStatus?: VerificationStatusListRelationFilter
  }, "id" | "email" | "phone" | "nin" | "bvn" | "emailHash" | "phoneHash" | "ninHash" | "bvnHash">

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    fieldId?: SortOrder
    surname?: SortOrder
    firstName?: SortOrder
    otherName?: SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    nin?: SortOrderInput | SortOrder
    bvn?: SortOrderInput | SortOrder
    state?: SortOrder
    lga?: SortOrder
    address?: SortOrder
    emailHash?: SortOrder
    phoneHash?: SortOrder
    ninHash?: SortOrder
    bvnHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    lastLoginAttemptIp?: SortOrderInput | SortOrder
    isActive?: SortOrder
    admittedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletionReason?: SortOrderInput | SortOrder
    deactivatedAt?: SortOrderInput | SortOrder
    deactivationReason?: SortOrderInput | SortOrder
    avatarUrl?: SortOrder
    status?: SortOrder
    _count?: AgentCountOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    OR?: AgentScalarWhereWithAggregatesInput[]
    NOT?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agent"> | string
    fieldId?: StringWithAggregatesFilter<"Agent"> | string
    surname?: StringWithAggregatesFilter<"Agent"> | string
    firstName?: StringWithAggregatesFilter<"Agent"> | string
    otherName?: StringWithAggregatesFilter<"Agent"> | string
    gender?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    email?: StringWithAggregatesFilter<"Agent"> | string
    phone?: StringWithAggregatesFilter<"Agent"> | string
    nin?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    bvn?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    state?: StringWithAggregatesFilter<"Agent"> | string
    lga?: StringWithAggregatesFilter<"Agent"> | string
    address?: StringWithAggregatesFilter<"Agent"> | string
    emailHash?: StringWithAggregatesFilter<"Agent"> | string
    phoneHash?: StringWithAggregatesFilter<"Agent"> | string
    ninHash?: StringWithAggregatesFilter<"Agent"> | string
    bvnHash?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    lastLoginAttemptIp?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    isActive?: BoolWithAggregatesFilter<"Agent"> | boolean
    admittedAt?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    deletionReason?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    deactivatedAt?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    deactivationReason?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    avatarUrl?: StringWithAggregatesFilter<"Agent"> | string
    status?: StringWithAggregatesFilter<"Agent"> | string
  }

  export type AgentProfileWhereInput = {
    AND?: AgentProfileWhereInput | AgentProfileWhereInput[]
    OR?: AgentProfileWhereInput[]
    NOT?: AgentProfileWhereInput | AgentProfileWhereInput[]
    id?: StringFilter<"AgentProfile"> | string
    agentId?: StringFilter<"AgentProfile"> | string
    email?: StringFilter<"AgentProfile"> | string
    emailHash?: StringFilter<"AgentProfile"> | string
    phone?: StringFilter<"AgentProfile"> | string
    phoneHash?: StringFilter<"AgentProfile"> | string
    pin?: StringFilter<"AgentProfile"> | string
    pinHash?: StringFilter<"AgentProfile"> | string
    passwordHash?: StringFilter<"AgentProfile"> | string
    emailVerified?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"AgentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"AgentProfile"> | Date | string
    passwordResetAttempts?: IntNullableFilter<"AgentProfile"> | number | null
    accountLockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    isLocked?: BoolFilter<"AgentProfile"> | boolean
    lockoutCount?: IntFilter<"AgentProfile"> | number
    lockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    lastPasswordResetAt?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    avatarUrl?: StringFilter<"AgentProfile"> | string
    failedDeletionAttempts?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    deletionLockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    deletionLockoutCount?: IntFilter<"AgentProfile"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
    PasswordResetToken?: PasswordResetTokenListRelationFilter
  }

  export type AgentProfileOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    phone?: SortOrder
    phoneHash?: SortOrder
    pin?: SortOrder
    pinHash?: SortOrder
    passwordHash?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetAttempts?: SortOrderInput | SortOrder
    accountLockedUntil?: SortOrderInput | SortOrder
    isLocked?: SortOrder
    lockoutCount?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    lastPasswordResetAt?: SortOrderInput | SortOrder
    avatarUrl?: SortOrder
    failedDeletionAttempts?: SortOrderInput | SortOrder
    deletionLockedUntil?: SortOrderInput | SortOrder
    deletionLockoutCount?: SortOrder
    agent?: AgentOrderByWithRelationInput
    PasswordResetToken?: PasswordResetTokenOrderByRelationAggregateInput
  }

  export type AgentProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    agentId?: string
    emailHash?: string
    phoneHash?: string
    AND?: AgentProfileWhereInput | AgentProfileWhereInput[]
    OR?: AgentProfileWhereInput[]
    NOT?: AgentProfileWhereInput | AgentProfileWhereInput[]
    email?: StringFilter<"AgentProfile"> | string
    phone?: StringFilter<"AgentProfile"> | string
    pin?: StringFilter<"AgentProfile"> | string
    pinHash?: StringFilter<"AgentProfile"> | string
    passwordHash?: StringFilter<"AgentProfile"> | string
    emailVerified?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    createdAt?: DateTimeFilter<"AgentProfile"> | Date | string
    updatedAt?: DateTimeFilter<"AgentProfile"> | Date | string
    passwordResetAttempts?: IntNullableFilter<"AgentProfile"> | number | null
    accountLockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    isLocked?: BoolFilter<"AgentProfile"> | boolean
    lockoutCount?: IntFilter<"AgentProfile"> | number
    lockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    lastPasswordResetAt?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    avatarUrl?: StringFilter<"AgentProfile"> | string
    failedDeletionAttempts?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    deletionLockedUntil?: DateTimeNullableFilter<"AgentProfile"> | Date | string | null
    deletionLockoutCount?: IntFilter<"AgentProfile"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
    PasswordResetToken?: PasswordResetTokenListRelationFilter
  }, "id" | "agentId" | "emailHash" | "phoneHash">

  export type AgentProfileOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    phone?: SortOrder
    phoneHash?: SortOrder
    pin?: SortOrder
    pinHash?: SortOrder
    passwordHash?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetAttempts?: SortOrderInput | SortOrder
    accountLockedUntil?: SortOrderInput | SortOrder
    isLocked?: SortOrder
    lockoutCount?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    lastPasswordResetAt?: SortOrderInput | SortOrder
    avatarUrl?: SortOrder
    failedDeletionAttempts?: SortOrderInput | SortOrder
    deletionLockedUntil?: SortOrderInput | SortOrder
    deletionLockoutCount?: SortOrder
    _count?: AgentProfileCountOrderByAggregateInput
    _avg?: AgentProfileAvgOrderByAggregateInput
    _max?: AgentProfileMaxOrderByAggregateInput
    _min?: AgentProfileMinOrderByAggregateInput
    _sum?: AgentProfileSumOrderByAggregateInput
  }

  export type AgentProfileScalarWhereWithAggregatesInput = {
    AND?: AgentProfileScalarWhereWithAggregatesInput | AgentProfileScalarWhereWithAggregatesInput[]
    OR?: AgentProfileScalarWhereWithAggregatesInput[]
    NOT?: AgentProfileScalarWhereWithAggregatesInput | AgentProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgentProfile"> | string
    agentId?: StringWithAggregatesFilter<"AgentProfile"> | string
    email?: StringWithAggregatesFilter<"AgentProfile"> | string
    emailHash?: StringWithAggregatesFilter<"AgentProfile"> | string
    phone?: StringWithAggregatesFilter<"AgentProfile"> | string
    phoneHash?: StringWithAggregatesFilter<"AgentProfile"> | string
    pin?: StringWithAggregatesFilter<"AgentProfile"> | string
    pinHash?: StringWithAggregatesFilter<"AgentProfile"> | string
    passwordHash?: StringWithAggregatesFilter<"AgentProfile"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AgentProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AgentProfile"> | Date | string
    passwordResetAttempts?: IntNullableWithAggregatesFilter<"AgentProfile"> | number | null
    accountLockedUntil?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    isLocked?: BoolWithAggregatesFilter<"AgentProfile"> | boolean
    lockoutCount?: IntWithAggregatesFilter<"AgentProfile"> | number
    lockedUntil?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    lastPasswordResetAt?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    avatarUrl?: StringWithAggregatesFilter<"AgentProfile"> | string
    failedDeletionAttempts?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    deletionLockedUntil?: DateTimeNullableWithAggregatesFilter<"AgentProfile"> | Date | string | null
    deletionLockoutCount?: IntWithAggregatesFilter<"AgentProfile"> | number
  }

  export type AgentSessionWhereInput = {
    AND?: AgentSessionWhereInput | AgentSessionWhereInput[]
    OR?: AgentSessionWhereInput[]
    NOT?: AgentSessionWhereInput | AgentSessionWhereInput[]
    id?: StringFilter<"AgentSession"> | string
    token?: StringFilter<"AgentSession"> | string
    agentId?: StringFilter<"AgentSession"> | string
    ipAddress?: StringNullableFilter<"AgentSession"> | string | null
    userAgent?: StringNullableFilter<"AgentSession"> | string | null
    createdAt?: DateTimeFilter<"AgentSession"> | Date | string
    expiresAt?: DateTimeFilter<"AgentSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"AgentSession"> | Date | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type AgentSessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    agentId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AgentSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: AgentSessionWhereInput | AgentSessionWhereInput[]
    OR?: AgentSessionWhereInput[]
    NOT?: AgentSessionWhereInput | AgentSessionWhereInput[]
    agentId?: StringFilter<"AgentSession"> | string
    ipAddress?: StringNullableFilter<"AgentSession"> | string | null
    userAgent?: StringNullableFilter<"AgentSession"> | string | null
    createdAt?: DateTimeFilter<"AgentSession"> | Date | string
    expiresAt?: DateTimeFilter<"AgentSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"AgentSession"> | Date | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id" | "token">

  export type AgentSessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    agentId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    _count?: AgentSessionCountOrderByAggregateInput
    _max?: AgentSessionMaxOrderByAggregateInput
    _min?: AgentSessionMinOrderByAggregateInput
  }

  export type AgentSessionScalarWhereWithAggregatesInput = {
    AND?: AgentSessionScalarWhereWithAggregatesInput | AgentSessionScalarWhereWithAggregatesInput[]
    OR?: AgentSessionScalarWhereWithAggregatesInput[]
    NOT?: AgentSessionScalarWhereWithAggregatesInput | AgentSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgentSession"> | string
    token?: StringWithAggregatesFilter<"AgentSession"> | string
    agentId?: StringWithAggregatesFilter<"AgentSession"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"AgentSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AgentSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AgentSession"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"AgentSession"> | Date | string
    revokedAt?: DateTimeNullableWithAggregatesFilter<"AgentSession"> | Date | string | null
  }

  export type DeletionScheduleWhereInput = {
    AND?: DeletionScheduleWhereInput | DeletionScheduleWhereInput[]
    OR?: DeletionScheduleWhereInput[]
    NOT?: DeletionScheduleWhereInput | DeletionScheduleWhereInput[]
    id?: StringFilter<"DeletionSchedule"> | string
    agentId?: StringFilter<"DeletionSchedule"> | string
    scheduledAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
    deletionType?: StringFilter<"DeletionSchedule"> | string
    completedAt?: DateTimeNullableFilter<"DeletionSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type DeletionScheduleOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    scheduledAt?: SortOrder
    deletionType?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type DeletionScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DeletionScheduleWhereInput | DeletionScheduleWhereInput[]
    OR?: DeletionScheduleWhereInput[]
    NOT?: DeletionScheduleWhereInput | DeletionScheduleWhereInput[]
    agentId?: StringFilter<"DeletionSchedule"> | string
    scheduledAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
    deletionType?: StringFilter<"DeletionSchedule"> | string
    completedAt?: DateTimeNullableFilter<"DeletionSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type DeletionScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    scheduledAt?: SortOrder
    deletionType?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DeletionScheduleCountOrderByAggregateInput
    _max?: DeletionScheduleMaxOrderByAggregateInput
    _min?: DeletionScheduleMinOrderByAggregateInput
  }

  export type DeletionScheduleScalarWhereWithAggregatesInput = {
    AND?: DeletionScheduleScalarWhereWithAggregatesInput | DeletionScheduleScalarWhereWithAggregatesInput[]
    OR?: DeletionScheduleScalarWhereWithAggregatesInput[]
    NOT?: DeletionScheduleScalarWhereWithAggregatesInput | DeletionScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DeletionSchedule"> | string
    agentId?: StringWithAggregatesFilter<"DeletionSchedule"> | string
    scheduledAt?: DateTimeWithAggregatesFilter<"DeletionSchedule"> | Date | string
    deletionType?: StringWithAggregatesFilter<"DeletionSchedule"> | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"DeletionSchedule"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DeletionSchedule"> | Date | string
  }

  export type VerificationStatusWhereInput = {
    AND?: VerificationStatusWhereInput | VerificationStatusWhereInput[]
    OR?: VerificationStatusWhereInput[]
    NOT?: VerificationStatusWhereInput | VerificationStatusWhereInput[]
    id?: StringFilter<"VerificationStatus"> | string
    agentId?: StringFilter<"VerificationStatus"> | string
    emailVerified?: BoolFilter<"VerificationStatus"> | boolean
    emailVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    phoneVerified?: BoolFilter<"VerificationStatus"> | boolean
    phoneVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    ninVerified?: BoolFilter<"VerificationStatus"> | boolean
    ninVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    bvnVerified?: BoolFilter<"VerificationStatus"> | boolean
    bvnVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    documentVerified?: BoolFilter<"VerificationStatus"> | boolean
    documentVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    dobVerified?: BoolFilter<"VerificationStatus"> | boolean
    dobVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    genderVerified?: BoolFilter<"VerificationStatus"> | boolean
    genderVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    nameVerified?: BoolFilter<"VerificationStatus"> | boolean
    nameVerificationDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    lastCheckedAt?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"VerificationStatus"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationStatus"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type VerificationStatusOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedDate?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    phoneVerifiedDate?: SortOrderInput | SortOrder
    ninVerified?: SortOrder
    ninVerifiedDate?: SortOrderInput | SortOrder
    bvnVerified?: SortOrder
    bvnVerifiedDate?: SortOrderInput | SortOrder
    documentVerified?: SortOrder
    documentVerifiedDate?: SortOrderInput | SortOrder
    dobVerified?: SortOrder
    dobVerifiedDate?: SortOrderInput | SortOrder
    genderVerified?: SortOrder
    genderVerifiedDate?: SortOrderInput | SortOrder
    nameVerified?: SortOrder
    nameVerificationDate?: SortOrderInput | SortOrder
    lastCheckedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type VerificationStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationStatusWhereInput | VerificationStatusWhereInput[]
    OR?: VerificationStatusWhereInput[]
    NOT?: VerificationStatusWhereInput | VerificationStatusWhereInput[]
    agentId?: StringFilter<"VerificationStatus"> | string
    emailVerified?: BoolFilter<"VerificationStatus"> | boolean
    emailVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    phoneVerified?: BoolFilter<"VerificationStatus"> | boolean
    phoneVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    ninVerified?: BoolFilter<"VerificationStatus"> | boolean
    ninVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    bvnVerified?: BoolFilter<"VerificationStatus"> | boolean
    bvnVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    documentVerified?: BoolFilter<"VerificationStatus"> | boolean
    documentVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    dobVerified?: BoolFilter<"VerificationStatus"> | boolean
    dobVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    genderVerified?: BoolFilter<"VerificationStatus"> | boolean
    genderVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    nameVerified?: BoolFilter<"VerificationStatus"> | boolean
    nameVerificationDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    lastCheckedAt?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"VerificationStatus"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationStatus"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type VerificationStatusOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedDate?: SortOrderInput | SortOrder
    phoneVerified?: SortOrder
    phoneVerifiedDate?: SortOrderInput | SortOrder
    ninVerified?: SortOrder
    ninVerifiedDate?: SortOrderInput | SortOrder
    bvnVerified?: SortOrder
    bvnVerifiedDate?: SortOrderInput | SortOrder
    documentVerified?: SortOrder
    documentVerifiedDate?: SortOrderInput | SortOrder
    dobVerified?: SortOrder
    dobVerifiedDate?: SortOrderInput | SortOrder
    genderVerified?: SortOrder
    genderVerifiedDate?: SortOrderInput | SortOrder
    nameVerified?: SortOrder
    nameVerificationDate?: SortOrderInput | SortOrder
    lastCheckedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationStatusCountOrderByAggregateInput
    _max?: VerificationStatusMaxOrderByAggregateInput
    _min?: VerificationStatusMinOrderByAggregateInput
  }

  export type VerificationStatusScalarWhereWithAggregatesInput = {
    AND?: VerificationStatusScalarWhereWithAggregatesInput | VerificationStatusScalarWhereWithAggregatesInput[]
    OR?: VerificationStatusScalarWhereWithAggregatesInput[]
    NOT?: VerificationStatusScalarWhereWithAggregatesInput | VerificationStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationStatus"> | string
    agentId?: StringWithAggregatesFilter<"VerificationStatus"> | string
    emailVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    emailVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    phoneVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    phoneVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    ninVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    ninVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    bvnVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    bvnVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    documentVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    documentVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    dobVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    dobVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    genderVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    genderVerifiedDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    nameVerified?: BoolWithAggregatesFilter<"VerificationStatus"> | boolean
    nameVerificationDate?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    lastCheckedAt?: DateTimeNullableWithAggregatesFilter<"VerificationStatus"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VerificationStatus"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VerificationStatus"> | Date | string
  }

  export type FailedAttemptWhereInput = {
    AND?: FailedAttemptWhereInput | FailedAttemptWhereInput[]
    OR?: FailedAttemptWhereInput[]
    NOT?: FailedAttemptWhereInput | FailedAttemptWhereInput[]
    id?: StringFilter<"FailedAttempt"> | string
    agentId?: StringFilter<"FailedAttempt"> | string
    action?: StringFilter<"FailedAttempt"> | string
    details?: StringNullableFilter<"FailedAttempt"> | string | null
    ipAddress?: StringFilter<"FailedAttempt"> | string
    userAgent?: StringNullableFilter<"FailedAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedAttempt"> | Date | string
    attempts?: IntFilter<"FailedAttempt"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type FailedAttemptOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    attempts?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type FailedAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FailedAttemptWhereInput | FailedAttemptWhereInput[]
    OR?: FailedAttemptWhereInput[]
    NOT?: FailedAttemptWhereInput | FailedAttemptWhereInput[]
    agentId?: StringFilter<"FailedAttempt"> | string
    action?: StringFilter<"FailedAttempt"> | string
    details?: StringNullableFilter<"FailedAttempt"> | string | null
    ipAddress?: StringFilter<"FailedAttempt"> | string
    userAgent?: StringNullableFilter<"FailedAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedAttempt"> | Date | string
    attempts?: IntFilter<"FailedAttempt"> | number
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type FailedAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    attempts?: SortOrder
    _count?: FailedAttemptCountOrderByAggregateInput
    _avg?: FailedAttemptAvgOrderByAggregateInput
    _max?: FailedAttemptMaxOrderByAggregateInput
    _min?: FailedAttemptMinOrderByAggregateInput
    _sum?: FailedAttemptSumOrderByAggregateInput
  }

  export type FailedAttemptScalarWhereWithAggregatesInput = {
    AND?: FailedAttemptScalarWhereWithAggregatesInput | FailedAttemptScalarWhereWithAggregatesInput[]
    OR?: FailedAttemptScalarWhereWithAggregatesInput[]
    NOT?: FailedAttemptScalarWhereWithAggregatesInput | FailedAttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FailedAttempt"> | string
    agentId?: StringWithAggregatesFilter<"FailedAttempt"> | string
    action?: StringWithAggregatesFilter<"FailedAttempt"> | string
    details?: StringNullableWithAggregatesFilter<"FailedAttempt"> | string | null
    ipAddress?: StringWithAggregatesFilter<"FailedAttempt"> | string
    userAgent?: StringNullableWithAggregatesFilter<"FailedAttempt"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FailedAttempt"> | Date | string
    attempts?: IntWithAggregatesFilter<"FailedAttempt"> | number
  }

  export type FailedDeletionAttemptWhereInput = {
    AND?: FailedDeletionAttemptWhereInput | FailedDeletionAttemptWhereInput[]
    OR?: FailedDeletionAttemptWhereInput[]
    NOT?: FailedDeletionAttemptWhereInput | FailedDeletionAttemptWhereInput[]
    id?: StringFilter<"FailedDeletionAttempt"> | string
    agentId?: StringFilter<"FailedDeletionAttempt"> | string
    action?: StringFilter<"FailedDeletionAttempt"> | string
    ipAddress?: StringFilter<"FailedDeletionAttempt"> | string
    userAgent?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    attempts?: IntFilter<"FailedDeletionAttempt"> | number
    details?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedDeletionAttempt"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type FailedDeletionAttemptOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    attempts?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type FailedDeletionAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FailedDeletionAttemptWhereInput | FailedDeletionAttemptWhereInput[]
    OR?: FailedDeletionAttemptWhereInput[]
    NOT?: FailedDeletionAttemptWhereInput | FailedDeletionAttemptWhereInput[]
    agentId?: StringFilter<"FailedDeletionAttempt"> | string
    action?: StringFilter<"FailedDeletionAttempt"> | string
    ipAddress?: StringFilter<"FailedDeletionAttempt"> | string
    userAgent?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    attempts?: IntFilter<"FailedDeletionAttempt"> | number
    details?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedDeletionAttempt"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type FailedDeletionAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    attempts?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FailedDeletionAttemptCountOrderByAggregateInput
    _avg?: FailedDeletionAttemptAvgOrderByAggregateInput
    _max?: FailedDeletionAttemptMaxOrderByAggregateInput
    _min?: FailedDeletionAttemptMinOrderByAggregateInput
    _sum?: FailedDeletionAttemptSumOrderByAggregateInput
  }

  export type FailedDeletionAttemptScalarWhereWithAggregatesInput = {
    AND?: FailedDeletionAttemptScalarWhereWithAggregatesInput | FailedDeletionAttemptScalarWhereWithAggregatesInput[]
    OR?: FailedDeletionAttemptScalarWhereWithAggregatesInput[]
    NOT?: FailedDeletionAttemptScalarWhereWithAggregatesInput | FailedDeletionAttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FailedDeletionAttempt"> | string
    agentId?: StringWithAggregatesFilter<"FailedDeletionAttempt"> | string
    action?: StringWithAggregatesFilter<"FailedDeletionAttempt"> | string
    ipAddress?: StringWithAggregatesFilter<"FailedDeletionAttempt"> | string
    userAgent?: StringNullableWithAggregatesFilter<"FailedDeletionAttempt"> | string | null
    attempts?: IntWithAggregatesFilter<"FailedDeletionAttempt"> | number
    details?: StringNullableWithAggregatesFilter<"FailedDeletionAttempt"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FailedDeletionAttempt"> | Date | string
  }

  export type AccountLockWhereInput = {
    AND?: AccountLockWhereInput | AccountLockWhereInput[]
    OR?: AccountLockWhereInput[]
    NOT?: AccountLockWhereInput | AccountLockWhereInput[]
    id?: StringFilter<"AccountLock"> | string
    agentId?: StringFilter<"AccountLock"> | string
    reason?: StringNullableFilter<"AccountLock"> | string | null
    expiresAt?: DateTimeFilter<"AccountLock"> | Date | string
    createdAt?: DateTimeFilter<"AccountLock"> | Date | string
    updatedAt?: DateTimeFilter<"AccountLock"> | Date | string
    ipAddress?: StringNullableFilter<"AccountLock"> | string | null
    action?: StringNullableFilter<"AccountLock"> | string | null
    userAgent?: StringNullableFilter<"AccountLock"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type AccountLockOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    reason?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    action?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type AccountLockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    agentId?: string
    AND?: AccountLockWhereInput | AccountLockWhereInput[]
    OR?: AccountLockWhereInput[]
    NOT?: AccountLockWhereInput | AccountLockWhereInput[]
    reason?: StringNullableFilter<"AccountLock"> | string | null
    expiresAt?: DateTimeFilter<"AccountLock"> | Date | string
    createdAt?: DateTimeFilter<"AccountLock"> | Date | string
    updatedAt?: DateTimeFilter<"AccountLock"> | Date | string
    ipAddress?: StringNullableFilter<"AccountLock"> | string | null
    action?: StringNullableFilter<"AccountLock"> | string | null
    userAgent?: StringNullableFilter<"AccountLock"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id" | "agentId">

  export type AccountLockOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    reason?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    action?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: AccountLockCountOrderByAggregateInput
    _max?: AccountLockMaxOrderByAggregateInput
    _min?: AccountLockMinOrderByAggregateInput
  }

  export type AccountLockScalarWhereWithAggregatesInput = {
    AND?: AccountLockScalarWhereWithAggregatesInput | AccountLockScalarWhereWithAggregatesInput[]
    OR?: AccountLockScalarWhereWithAggregatesInput[]
    NOT?: AccountLockScalarWhereWithAggregatesInput | AccountLockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountLock"> | string
    agentId?: StringWithAggregatesFilter<"AccountLock"> | string
    reason?: StringNullableWithAggregatesFilter<"AccountLock"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"AccountLock"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"AccountLock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountLock"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"AccountLock"> | string | null
    action?: StringNullableWithAggregatesFilter<"AccountLock"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AccountLock"> | string | null
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    tokenHash?: StringFilter<"PasswordResetToken"> | string
    agentId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordResetToken"> | Date | string | null
    agentProfileId?: StringNullableFilter<"PasswordResetToken"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
    AgentProfile?: XOR<AgentProfileNullableScalarRelationFilter, AgentProfileWhereInput> | null
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    tokenHash?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    agentProfileId?: SortOrderInput | SortOrder
    agent?: AgentOrderByWithRelationInput
    AgentProfile?: AgentProfileOrderByWithRelationInput
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tokenHash?: string
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    agentId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordResetToken"> | Date | string | null
    agentProfileId?: StringNullableFilter<"PasswordResetToken"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
    AgentProfile?: XOR<AgentProfileNullableScalarRelationFilter, AgentProfileWhereInput> | null
  }, "id" | "tokenHash">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    tokenHash?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    agentProfileId?: SortOrderInput | SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    tokenHash?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    agentId?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"PasswordResetToken"> | Date | string | null
    agentProfileId?: StringNullableWithAggregatesFilter<"PasswordResetToken"> | string | null
  }

  export type PasswordResetEventWhereInput = {
    AND?: PasswordResetEventWhereInput | PasswordResetEventWhereInput[]
    OR?: PasswordResetEventWhereInput[]
    NOT?: PasswordResetEventWhereInput | PasswordResetEventWhereInput[]
    id?: StringFilter<"PasswordResetEvent"> | string
    agentId?: StringFilter<"PasswordResetEvent"> | string
    createdAt?: DateTimeFilter<"PasswordResetEvent"> | Date | string
    ipAddress?: StringFilter<"PasswordResetEvent"> | string
    userAgent?: StringNullableFilter<"PasswordResetEvent"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type PasswordResetEventOrderByWithRelationInput = {
    id?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type PasswordResetEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PasswordResetEventWhereInput | PasswordResetEventWhereInput[]
    OR?: PasswordResetEventWhereInput[]
    NOT?: PasswordResetEventWhereInput | PasswordResetEventWhereInput[]
    agentId?: StringFilter<"PasswordResetEvent"> | string
    createdAt?: DateTimeFilter<"PasswordResetEvent"> | Date | string
    ipAddress?: StringFilter<"PasswordResetEvent"> | string
    userAgent?: StringNullableFilter<"PasswordResetEvent"> | string | null
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id">

  export type PasswordResetEventOrderByWithAggregationInput = {
    id?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: PasswordResetEventCountOrderByAggregateInput
    _max?: PasswordResetEventMaxOrderByAggregateInput
    _min?: PasswordResetEventMinOrderByAggregateInput
  }

  export type PasswordResetEventScalarWhereWithAggregatesInput = {
    AND?: PasswordResetEventScalarWhereWithAggregatesInput | PasswordResetEventScalarWhereWithAggregatesInput[]
    OR?: PasswordResetEventScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetEventScalarWhereWithAggregatesInput | PasswordResetEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetEvent"> | string
    agentId?: StringWithAggregatesFilter<"PasswordResetEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetEvent"> | Date | string
    ipAddress?: StringWithAggregatesFilter<"PasswordResetEvent"> | string
    userAgent?: StringNullableWithAggregatesFilter<"PasswordResetEvent"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    verified?: BoolFilter<"User"> | boolean
    fullName?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    bio?: StringFilter<"User"> | string
    country?: StringFilter<"User"> | string
    state?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    phoneVerified?: BoolFilter<"User"> | boolean
    hasPin?: BoolFilter<"User"> | boolean
    pinHash?: StringNullableFilter<"User"> | string | null
    isBanned?: BoolFilter<"User"> | boolean
    passwordChangedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumUserRoleEnumFilter<"User"> | $Enums.UserRoleEnum
    sessions?: SessionListRelationFilter
    roles?: XOR<UserRoleNullableScalarRelationFilter, UserRoleWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    fullName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bio?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    hasPin?: SortOrder
    pinHash?: SortOrderInput | SortOrder
    isBanned?: SortOrder
    passwordChangedAt?: SortOrderInput | SortOrder
    role?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    roles?: UserRoleOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    verified?: BoolFilter<"User"> | boolean
    fullName?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    bio?: StringFilter<"User"> | string
    country?: StringFilter<"User"> | string
    state?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    phoneVerified?: BoolFilter<"User"> | boolean
    hasPin?: BoolFilter<"User"> | boolean
    pinHash?: StringNullableFilter<"User"> | string | null
    isBanned?: BoolFilter<"User"> | boolean
    passwordChangedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumUserRoleEnumFilter<"User"> | $Enums.UserRoleEnum
    sessions?: SessionListRelationFilter
    roles?: XOR<UserRoleNullableScalarRelationFilter, UserRoleWhereInput> | null
  }, "id" | "username" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    fullName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bio?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    hasPin?: SortOrder
    pinHash?: SortOrderInput | SortOrder
    isBanned?: SortOrder
    passwordChangedAt?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    fullName?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    bio?: StringWithAggregatesFilter<"User"> | string
    country?: StringWithAggregatesFilter<"User"> | string
    state?: StringWithAggregatesFilter<"User"> | string
    city?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    phoneVerified?: BoolWithAggregatesFilter<"User"> | boolean
    hasPin?: BoolWithAggregatesFilter<"User"> | boolean
    pinHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
    passwordChangedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    role?: EnumUserRoleEnumWithAggregatesFilter<"User"> | $Enums.UserRoleEnum
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    role?: EnumUserRoleEnumFilter<"UserRole"> | $Enums.UserRoleEnum
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    role?: EnumUserRoleEnumFilter<"UserRole"> | $Enums.UserRoleEnum
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    role?: EnumUserRoleEnumWithAggregatesFilter<"UserRole"> | $Enums.UserRoleEnum
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    revoked?: BoolWithAggregatesFilter<"Session"> | boolean
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type OAuthAccountWhereInput = {
    AND?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    OR?: OAuthAccountWhereInput[]
    NOT?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    id?: StringFilter<"OAuthAccount"> | string
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    agentId?: StringFilter<"OAuthAccount"> | string
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }

  export type OAuthAccountOrderByWithRelationInput = {
    id?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    agent?: AgentOrderByWithRelationInput
  }

  export type OAuthAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerId?: OAuthAccountProviderProviderIdCompoundUniqueInput
    AND?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    OR?: OAuthAccountWhereInput[]
    NOT?: OAuthAccountWhereInput | OAuthAccountWhereInput[]
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    agentId?: StringFilter<"OAuthAccount"> | string
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
    agent?: XOR<AgentScalarRelationFilter, AgentWhereInput>
  }, "id" | "provider_providerId">

  export type OAuthAccountOrderByWithAggregationInput = {
    id?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    _count?: OAuthAccountCountOrderByAggregateInput
    _max?: OAuthAccountMaxOrderByAggregateInput
    _min?: OAuthAccountMinOrderByAggregateInput
  }

  export type OAuthAccountScalarWhereWithAggregatesInput = {
    AND?: OAuthAccountScalarWhereWithAggregatesInput | OAuthAccountScalarWhereWithAggregatesInput[]
    OR?: OAuthAccountScalarWhereWithAggregatesInput[]
    NOT?: OAuthAccountScalarWhereWithAggregatesInput | OAuthAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OAuthAccount"> | string
    provider?: StringWithAggregatesFilter<"OAuthAccount"> | string
    providerId?: StringWithAggregatesFilter<"OAuthAccount"> | string
    agentId?: StringWithAggregatesFilter<"OAuthAccount"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OAuthAccount"> | Date | string
  }

  export type SessionCleanupLogWhereInput = {
    AND?: SessionCleanupLogWhereInput | SessionCleanupLogWhereInput[]
    OR?: SessionCleanupLogWhereInput[]
    NOT?: SessionCleanupLogWhereInput | SessionCleanupLogWhereInput[]
    id?: StringFilter<"SessionCleanupLog"> | string
    removed?: IntFilter<"SessionCleanupLog"> | number
    runAt?: DateTimeFilter<"SessionCleanupLog"> | Date | string
  }

  export type SessionCleanupLogOrderByWithRelationInput = {
    id?: SortOrder
    removed?: SortOrder
    runAt?: SortOrder
  }

  export type SessionCleanupLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionCleanupLogWhereInput | SessionCleanupLogWhereInput[]
    OR?: SessionCleanupLogWhereInput[]
    NOT?: SessionCleanupLogWhereInput | SessionCleanupLogWhereInput[]
    removed?: IntFilter<"SessionCleanupLog"> | number
    runAt?: DateTimeFilter<"SessionCleanupLog"> | Date | string
  }, "id">

  export type SessionCleanupLogOrderByWithAggregationInput = {
    id?: SortOrder
    removed?: SortOrder
    runAt?: SortOrder
    _count?: SessionCleanupLogCountOrderByAggregateInput
    _avg?: SessionCleanupLogAvgOrderByAggregateInput
    _max?: SessionCleanupLogMaxOrderByAggregateInput
    _min?: SessionCleanupLogMinOrderByAggregateInput
    _sum?: SessionCleanupLogSumOrderByAggregateInput
  }

  export type SessionCleanupLogScalarWhereWithAggregatesInput = {
    AND?: SessionCleanupLogScalarWhereWithAggregatesInput | SessionCleanupLogScalarWhereWithAggregatesInput[]
    OR?: SessionCleanupLogScalarWhereWithAggregatesInput[]
    NOT?: SessionCleanupLogScalarWhereWithAggregatesInput | SessionCleanupLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionCleanupLog"> | string
    removed?: IntWithAggregatesFilter<"SessionCleanupLog"> | number
    runAt?: DateTimeWithAggregatesFilter<"SessionCleanupLog"> | Date | string
  }

  export type SessionCleanupConfigWhereInput = {
    AND?: SessionCleanupConfigWhereInput | SessionCleanupConfigWhereInput[]
    OR?: SessionCleanupConfigWhereInput[]
    NOT?: SessionCleanupConfigWhereInput | SessionCleanupConfigWhereInput[]
    id?: StringFilter<"SessionCleanupConfig"> | string
    cleanupProbability?: FloatFilter<"SessionCleanupConfig"> | number
    maxLifetimeHours?: IntFilter<"SessionCleanupConfig"> | number
    lastRunAt?: DateTimeFilter<"SessionCleanupConfig"> | Date | string
  }

  export type SessionCleanupConfigOrderByWithRelationInput = {
    id?: SortOrder
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
    lastRunAt?: SortOrder
  }

  export type SessionCleanupConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionCleanupConfigWhereInput | SessionCleanupConfigWhereInput[]
    OR?: SessionCleanupConfigWhereInput[]
    NOT?: SessionCleanupConfigWhereInput | SessionCleanupConfigWhereInput[]
    cleanupProbability?: FloatFilter<"SessionCleanupConfig"> | number
    maxLifetimeHours?: IntFilter<"SessionCleanupConfig"> | number
    lastRunAt?: DateTimeFilter<"SessionCleanupConfig"> | Date | string
  }, "id">

  export type SessionCleanupConfigOrderByWithAggregationInput = {
    id?: SortOrder
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
    lastRunAt?: SortOrder
    _count?: SessionCleanupConfigCountOrderByAggregateInput
    _avg?: SessionCleanupConfigAvgOrderByAggregateInput
    _max?: SessionCleanupConfigMaxOrderByAggregateInput
    _min?: SessionCleanupConfigMinOrderByAggregateInput
    _sum?: SessionCleanupConfigSumOrderByAggregateInput
  }

  export type SessionCleanupConfigScalarWhereWithAggregatesInput = {
    AND?: SessionCleanupConfigScalarWhereWithAggregatesInput | SessionCleanupConfigScalarWhereWithAggregatesInput[]
    OR?: SessionCleanupConfigScalarWhereWithAggregatesInput[]
    NOT?: SessionCleanupConfigScalarWhereWithAggregatesInput | SessionCleanupConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionCleanupConfig"> | string
    cleanupProbability?: FloatWithAggregatesFilter<"SessionCleanupConfig"> | number
    maxLifetimeHours?: IntWithAggregatesFilter<"SessionCleanupConfig"> | number
    lastRunAt?: DateTimeWithAggregatesFilter<"SessionCleanupConfig"> | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    targetId?: string | null
    targetType?: string | null
    agent?: AgentCreateNestedOneWithoutAuditLogInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    agentId?: string | null
    targetId?: string | null
    targetType?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: AgentUpdateOneWithoutAuditLogNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    agentId?: string | null
    targetId?: string | null
    targetType?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentCreateInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateManyInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
  }

  export type AgentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AgentProfileCreateInput = {
    id?: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
    agent: AgentCreateNestedOneWithoutProfileInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentProfileInput
  }

  export type AgentProfileUncheckedCreateInput = {
    id?: string
    agentId: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentProfileInput
  }

  export type AgentProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
    agent?: AgentUpdateOneRequiredWithoutProfileNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentProfileNestedInput
  }

  export type AgentProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentProfileNestedInput
  }

  export type AgentProfileCreateManyInput = {
    id?: string
    agentId: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
  }

  export type AgentProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
  }

  export type AgentProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
  }

  export type AgentSessionCreateInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
    agent: AgentCreateNestedOneWithoutSessionsInput
  }

  export type AgentSessionUncheckedCreateInput = {
    id?: string
    token: string
    agentId: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type AgentSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: AgentUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type AgentSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentSessionCreateManyInput = {
    id?: string
    token: string
    agentId: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type AgentSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DeletionScheduleCreateInput = {
    id?: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    agent: AgentCreateNestedOneWithoutDeletionScheduleInput
  }

  export type DeletionScheduleUncheckedCreateInput = {
    id?: string
    agentId: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type DeletionScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutDeletionScheduleNestedInput
  }

  export type DeletionScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeletionScheduleCreateManyInput = {
    id?: string
    agentId: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type DeletionScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeletionScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusCreateInput = {
    id?: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agent: AgentCreateNestedOneWithoutVerificationStatusInput
  }

  export type VerificationStatusUncheckedCreateInput = {
    id?: string
    agentId: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationStatusUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutVerificationStatusNestedInput
  }

  export type VerificationStatusUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusCreateManyInput = {
    id?: string
    agentId: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationStatusUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedAttemptCreateInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
    agent: AgentCreateNestedOneWithoutFailedAttemptInput
  }

  export type FailedAttemptUncheckedCreateInput = {
    id?: string
    agentId: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
  }

  export type FailedAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
    agent?: AgentUpdateOneRequiredWithoutFailedAttemptNestedInput
  }

  export type FailedAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedAttemptCreateManyInput = {
    id?: string
    agentId: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
  }

  export type FailedAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedDeletionAttemptCreateInput = {
    id?: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
    agent: AgentCreateNestedOneWithoutFailedDeletionAttemptInput
  }

  export type FailedDeletionAttemptUncheckedCreateInput = {
    id?: string
    agentId: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
  }

  export type FailedDeletionAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutFailedDeletionAttemptNestedInput
  }

  export type FailedDeletionAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedDeletionAttemptCreateManyInput = {
    id?: string
    agentId: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
  }

  export type FailedDeletionAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedDeletionAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountLockCreateInput = {
    id?: string
    reason?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    action?: string | null
    userAgent?: string | null
    agent: AgentCreateNestedOneWithoutAccountLockInput
  }

  export type AccountLockUncheckedCreateInput = {
    id?: string
    agentId: string
    reason?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    action?: string | null
    userAgent?: string | null
  }

  export type AccountLockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: AgentUpdateOneRequiredWithoutAccountLockNestedInput
  }

  export type AccountLockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountLockCreateManyInput = {
    id?: string
    agentId: string
    reason?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    action?: string | null
    userAgent?: string | null
  }

  export type AccountLockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountLockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    tokenHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agent: AgentCreateNestedOneWithoutPasswordResetTokenInput
    AgentProfile?: AgentProfileCreateNestedOneWithoutPasswordResetTokenInput
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    tokenHash: string
    agentId: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agentProfileId?: string | null
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: AgentUpdateOneRequiredWithoutPasswordResetTokenNestedInput
    AgentProfile?: AgentProfileUpdateOneWithoutPasswordResetTokenNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentProfileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    tokenHash: string
    agentId: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agentProfileId?: string | null
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentProfileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventCreateInput = {
    id?: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
    agent: AgentCreateNestedOneWithoutPasswordResetEventInput
  }

  export type PasswordResetEventUncheckedCreateInput = {
    id?: string
    agentId: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
  }

  export type PasswordResetEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: AgentUpdateOneRequiredWithoutPasswordResetEventNestedInput
  }

  export type PasswordResetEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventCreateManyInput = {
    id?: string
    agentId: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
  }

  export type PasswordResetEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    sessions?: SessionCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    sessions?: SessionUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserRoleCreateInput = {
    role?: $Enums.UserRoleEnum
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateInput = {
    id: string
    role?: $Enums.UserRoleEnum
  }

  export type UserRoleUpdateInput = {
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserRoleCreateManyInput = {
    id: string
    role?: $Enums.UserRoleEnum
  }

  export type UserRoleUpdateManyMutationInput = {
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    token: string
    userId: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OAuthAccountCreateInput = {
    id?: string
    provider: string
    providerId: string
    createdAt?: Date | string
    agent: AgentCreateNestedOneWithoutOauthAccountsInput
  }

  export type OAuthAccountUncheckedCreateInput = {
    id?: string
    provider: string
    providerId: string
    agentId: string
    createdAt?: Date | string
  }

  export type OAuthAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: AgentUpdateOneRequiredWithoutOauthAccountsNestedInput
  }

  export type OAuthAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountCreateManyInput = {
    id?: string
    provider: string
    providerId: string
    agentId: string
    createdAt?: Date | string
  }

  export type OAuthAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupLogCreateInput = {
    id?: string
    removed: number
    runAt?: Date | string
  }

  export type SessionCleanupLogUncheckedCreateInput = {
    id?: string
    removed: number
    runAt?: Date | string
  }

  export type SessionCleanupLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    removed?: IntFieldUpdateOperationsInput | number
    runAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    removed?: IntFieldUpdateOperationsInput | number
    runAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupLogCreateManyInput = {
    id?: string
    removed: number
    runAt?: Date | string
  }

  export type SessionCleanupLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    removed?: IntFieldUpdateOperationsInput | number
    runAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    removed?: IntFieldUpdateOperationsInput | number
    runAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupConfigCreateInput = {
    id?: string
    cleanupProbability?: number
    maxLifetimeHours?: number
    lastRunAt?: Date | string
  }

  export type SessionCleanupConfigUncheckedCreateInput = {
    id?: string
    cleanupProbability?: number
    maxLifetimeHours?: number
    lastRunAt?: Date | string
  }

  export type SessionCleanupConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cleanupProbability?: FloatFieldUpdateOperationsInput | number
    maxLifetimeHours?: IntFieldUpdateOperationsInput | number
    lastRunAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cleanupProbability?: FloatFieldUpdateOperationsInput | number
    maxLifetimeHours?: IntFieldUpdateOperationsInput | number
    lastRunAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupConfigCreateManyInput = {
    id?: string
    cleanupProbability?: number
    maxLifetimeHours?: number
    lastRunAt?: Date | string
  }

  export type SessionCleanupConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cleanupProbability?: FloatFieldUpdateOperationsInput | number
    maxLifetimeHours?: IntFieldUpdateOperationsInput | number
    lastRunAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCleanupConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cleanupProbability?: FloatFieldUpdateOperationsInput | number
    maxLifetimeHours?: IntFieldUpdateOperationsInput | number
    lastRunAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumAuditStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusFilter<$PrismaModel> | $Enums.AuditStatus
  }

  export type EnumSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityFilter<$PrismaModel> | $Enums.Severity
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AgentNullableScalarRelationFilter = {
    is?: AgentWhereInput | null
    isNot?: AgentWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    agentId?: SortOrder
    targetId?: SortOrder
    targetType?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    agentId?: SortOrder
    targetId?: SortOrder
    targetType?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    agentId?: SortOrder
    targetId?: SortOrder
    targetType?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAuditStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuditStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditStatusFilter<$PrismaModel>
    _max?: NestedEnumAuditStatusFilter<$PrismaModel>
  }

  export type EnumSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityWithAggregatesFilter<$PrismaModel> | $Enums.Severity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeverityFilter<$PrismaModel>
    _max?: NestedEnumSeverityFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AgentProfileNullableScalarRelationFilter = {
    is?: AgentProfileWhereInput | null
    isNot?: AgentProfileWhereInput | null
  }

  export type AgentSessionListRelationFilter = {
    every?: AgentSessionWhereInput
    some?: AgentSessionWhereInput
    none?: AgentSessionWhereInput
  }

  export type OAuthAccountListRelationFilter = {
    every?: OAuthAccountWhereInput
    some?: OAuthAccountWhereInput
    none?: OAuthAccountWhereInput
  }

  export type PasswordResetTokenListRelationFilter = {
    every?: PasswordResetTokenWhereInput
    some?: PasswordResetTokenWhereInput
    none?: PasswordResetTokenWhereInput
  }

  export type PasswordResetEventListRelationFilter = {
    every?: PasswordResetEventWhereInput
    some?: PasswordResetEventWhereInput
    none?: PasswordResetEventWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type DeletionScheduleListRelationFilter = {
    every?: DeletionScheduleWhereInput
    some?: DeletionScheduleWhereInput
    none?: DeletionScheduleWhereInput
  }

  export type AccountLockNullableScalarRelationFilter = {
    is?: AccountLockWhereInput | null
    isNot?: AccountLockWhereInput | null
  }

  export type FailedAttemptListRelationFilter = {
    every?: FailedAttemptWhereInput
    some?: FailedAttemptWhereInput
    none?: FailedAttemptWhereInput
  }

  export type FailedDeletionAttemptListRelationFilter = {
    every?: FailedDeletionAttemptWhereInput
    some?: FailedDeletionAttemptWhereInput
    none?: FailedDeletionAttemptWhereInput
  }

  export type VerificationStatusListRelationFilter = {
    every?: VerificationStatusWhereInput
    some?: VerificationStatusWhereInput
    none?: VerificationStatusWhereInput
  }

  export type AgentSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OAuthAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeletionScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FailedAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FailedDeletionAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    surname?: SortOrder
    firstName?: SortOrder
    otherName?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nin?: SortOrder
    bvn?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    address?: SortOrder
    emailHash?: SortOrder
    phoneHash?: SortOrder
    ninHash?: SortOrder
    bvnHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginAttemptIp?: SortOrder
    isActive?: SortOrder
    admittedAt?: SortOrder
    deletedAt?: SortOrder
    deletionReason?: SortOrder
    deactivatedAt?: SortOrder
    deactivationReason?: SortOrder
    avatarUrl?: SortOrder
    status?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    surname?: SortOrder
    firstName?: SortOrder
    otherName?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nin?: SortOrder
    bvn?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    address?: SortOrder
    emailHash?: SortOrder
    phoneHash?: SortOrder
    ninHash?: SortOrder
    bvnHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginAttemptIp?: SortOrder
    isActive?: SortOrder
    admittedAt?: SortOrder
    deletedAt?: SortOrder
    deletionReason?: SortOrder
    deactivatedAt?: SortOrder
    deactivationReason?: SortOrder
    avatarUrl?: SortOrder
    status?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    surname?: SortOrder
    firstName?: SortOrder
    otherName?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nin?: SortOrder
    bvn?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    address?: SortOrder
    emailHash?: SortOrder
    phoneHash?: SortOrder
    ninHash?: SortOrder
    bvnHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    lastLoginAttemptIp?: SortOrder
    isActive?: SortOrder
    admittedAt?: SortOrder
    deletedAt?: SortOrder
    deletionReason?: SortOrder
    deactivatedAt?: SortOrder
    deactivationReason?: SortOrder
    avatarUrl?: SortOrder
    status?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AgentScalarRelationFilter = {
    is?: AgentWhereInput
    isNot?: AgentWhereInput
  }

  export type AgentProfileCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    phone?: SortOrder
    phoneHash?: SortOrder
    pin?: SortOrder
    pinHash?: SortOrder
    passwordHash?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    isLocked?: SortOrder
    lockoutCount?: SortOrder
    lockedUntil?: SortOrder
    lastPasswordResetAt?: SortOrder
    avatarUrl?: SortOrder
    failedDeletionAttempts?: SortOrder
    deletionLockedUntil?: SortOrder
    deletionLockoutCount?: SortOrder
  }

  export type AgentProfileAvgOrderByAggregateInput = {
    passwordResetAttempts?: SortOrder
    lockoutCount?: SortOrder
    deletionLockoutCount?: SortOrder
  }

  export type AgentProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    phone?: SortOrder
    phoneHash?: SortOrder
    pin?: SortOrder
    pinHash?: SortOrder
    passwordHash?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    isLocked?: SortOrder
    lockoutCount?: SortOrder
    lockedUntil?: SortOrder
    lastPasswordResetAt?: SortOrder
    avatarUrl?: SortOrder
    failedDeletionAttempts?: SortOrder
    deletionLockedUntil?: SortOrder
    deletionLockoutCount?: SortOrder
  }

  export type AgentProfileMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    email?: SortOrder
    emailHash?: SortOrder
    phone?: SortOrder
    phoneHash?: SortOrder
    pin?: SortOrder
    pinHash?: SortOrder
    passwordHash?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    isLocked?: SortOrder
    lockoutCount?: SortOrder
    lockedUntil?: SortOrder
    lastPasswordResetAt?: SortOrder
    avatarUrl?: SortOrder
    failedDeletionAttempts?: SortOrder
    deletionLockedUntil?: SortOrder
    deletionLockoutCount?: SortOrder
  }

  export type AgentProfileSumOrderByAggregateInput = {
    passwordResetAttempts?: SortOrder
    lockoutCount?: SortOrder
    deletionLockoutCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AgentSessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    agentId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type AgentSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    agentId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type AgentSessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    agentId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type DeletionScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    scheduledAt?: SortOrder
    deletionType?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type DeletionScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    scheduledAt?: SortOrder
    deletionType?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type DeletionScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    scheduledAt?: SortOrder
    deletionType?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationStatusCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedDate?: SortOrder
    phoneVerified?: SortOrder
    phoneVerifiedDate?: SortOrder
    ninVerified?: SortOrder
    ninVerifiedDate?: SortOrder
    bvnVerified?: SortOrder
    bvnVerifiedDate?: SortOrder
    documentVerified?: SortOrder
    documentVerifiedDate?: SortOrder
    dobVerified?: SortOrder
    dobVerifiedDate?: SortOrder
    genderVerified?: SortOrder
    genderVerifiedDate?: SortOrder
    nameVerified?: SortOrder
    nameVerificationDate?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedDate?: SortOrder
    phoneVerified?: SortOrder
    phoneVerifiedDate?: SortOrder
    ninVerified?: SortOrder
    ninVerifiedDate?: SortOrder
    bvnVerified?: SortOrder
    bvnVerifiedDate?: SortOrder
    documentVerified?: SortOrder
    documentVerifiedDate?: SortOrder
    dobVerified?: SortOrder
    dobVerifiedDate?: SortOrder
    genderVerified?: SortOrder
    genderVerifiedDate?: SortOrder
    nameVerified?: SortOrder
    nameVerificationDate?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationStatusMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    emailVerified?: SortOrder
    emailVerifiedDate?: SortOrder
    phoneVerified?: SortOrder
    phoneVerifiedDate?: SortOrder
    ninVerified?: SortOrder
    ninVerifiedDate?: SortOrder
    bvnVerified?: SortOrder
    bvnVerifiedDate?: SortOrder
    documentVerified?: SortOrder
    documentVerifiedDate?: SortOrder
    dobVerified?: SortOrder
    dobVerifiedDate?: SortOrder
    genderVerified?: SortOrder
    genderVerifiedDate?: SortOrder
    nameVerified?: SortOrder
    nameVerificationDate?: SortOrder
    lastCheckedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FailedAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    attempts?: SortOrder
  }

  export type FailedAttemptAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type FailedAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    attempts?: SortOrder
  }

  export type FailedAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    attempts?: SortOrder
  }

  export type FailedAttemptSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type FailedDeletionAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    attempts?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type FailedDeletionAttemptAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type FailedDeletionAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    attempts?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type FailedDeletionAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    attempts?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type FailedDeletionAttemptSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type AccountLockCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    action?: SortOrder
    userAgent?: SortOrder
  }

  export type AccountLockMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    action?: SortOrder
    userAgent?: SortOrder
  }

  export type AccountLockMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    action?: SortOrder
    userAgent?: SortOrder
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    tokenHash?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    agentProfileId?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    tokenHash?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    agentProfileId?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    tokenHash?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    agentProfileId?: SortOrder
  }

  export type PasswordResetEventCountOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type PasswordResetEventMaxOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type PasswordResetEventMinOrderByAggregateInput = {
    id?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type EnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserRoleNullableScalarRelationFilter = {
    is?: UserRoleWhereInput | null
    isNot?: UserRoleWhereInput | null
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    fullName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bio?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    hasPin?: SortOrder
    pinHash?: SortOrder
    isBanned?: SortOrder
    passwordChangedAt?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    fullName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bio?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    hasPin?: SortOrder
    pinHash?: SortOrder
    isBanned?: SortOrder
    passwordChangedAt?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    fullName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bio?: SortOrder
    country?: SortOrder
    state?: SortOrder
    city?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    phoneVerified?: SortOrder
    hasPin?: SortOrder
    pinHash?: SortOrder
    isBanned?: SortOrder
    passwordChangedAt?: SortOrder
    role?: SortOrder
  }

  export type EnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    revoked?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
  }

  export type OAuthAccountProviderProviderIdCompoundUniqueInput = {
    provider: string
    providerId: string
  }

  export type OAuthAccountCountOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
  }

  export type OAuthAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
  }

  export type OAuthAccountMinOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    agentId?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionCleanupLogCountOrderByAggregateInput = {
    id?: SortOrder
    removed?: SortOrder
    runAt?: SortOrder
  }

  export type SessionCleanupLogAvgOrderByAggregateInput = {
    removed?: SortOrder
  }

  export type SessionCleanupLogMaxOrderByAggregateInput = {
    id?: SortOrder
    removed?: SortOrder
    runAt?: SortOrder
  }

  export type SessionCleanupLogMinOrderByAggregateInput = {
    id?: SortOrder
    removed?: SortOrder
    runAt?: SortOrder
  }

  export type SessionCleanupLogSumOrderByAggregateInput = {
    removed?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SessionCleanupConfigCountOrderByAggregateInput = {
    id?: SortOrder
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
    lastRunAt?: SortOrder
  }

  export type SessionCleanupConfigAvgOrderByAggregateInput = {
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
  }

  export type SessionCleanupConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
    lastRunAt?: SortOrder
  }

  export type SessionCleanupConfigMinOrderByAggregateInput = {
    id?: SortOrder
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
    lastRunAt?: SortOrder
  }

  export type SessionCleanupConfigSumOrderByAggregateInput = {
    cleanupProbability?: SortOrder
    maxLifetimeHours?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AgentCreateNestedOneWithoutAuditLogInput = {
    create?: XOR<AgentCreateWithoutAuditLogInput, AgentUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAuditLogInput
    connect?: AgentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAuditActionFieldUpdateOperationsInput = {
    set?: $Enums.AuditAction
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumAuditStatusFieldUpdateOperationsInput = {
    set?: $Enums.AuditStatus
  }

  export type EnumSeverityFieldUpdateOperationsInput = {
    set?: $Enums.Severity
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AgentUpdateOneWithoutAuditLogNestedInput = {
    create?: XOR<AgentCreateWithoutAuditLogInput, AgentUncheckedCreateWithoutAuditLogInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAuditLogInput
    upsert?: AgentUpsertWithoutAuditLogInput
    disconnect?: AgentWhereInput | boolean
    delete?: AgentWhereInput | boolean
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutAuditLogInput, AgentUpdateWithoutAuditLogInput>, AgentUncheckedUpdateWithoutAuditLogInput>
  }

  export type AgentProfileCreateNestedOneWithoutAgentInput = {
    create?: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutAgentInput
    connect?: AgentProfileWhereUniqueInput
  }

  export type AgentSessionCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput> | AgentSessionCreateWithoutAgentInput[] | AgentSessionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSessionCreateOrConnectWithoutAgentInput | AgentSessionCreateOrConnectWithoutAgentInput[]
    createMany?: AgentSessionCreateManyAgentInputEnvelope
    connect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
  }

  export type OAuthAccountCreateNestedManyWithoutAgentInput = {
    create?: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput> | OAuthAccountCreateWithoutAgentInput[] | OAuthAccountUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutAgentInput | OAuthAccountCreateOrConnectWithoutAgentInput[]
    createMany?: OAuthAccountCreateManyAgentInputEnvelope
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
  }

  export type PasswordResetTokenCreateNestedManyWithoutAgentInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput> | PasswordResetTokenCreateWithoutAgentInput[] | PasswordResetTokenUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentInput | PasswordResetTokenCreateOrConnectWithoutAgentInput[]
    createMany?: PasswordResetTokenCreateManyAgentInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type PasswordResetEventCreateNestedManyWithoutAgentInput = {
    create?: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput> | PasswordResetEventCreateWithoutAgentInput[] | PasswordResetEventUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetEventCreateOrConnectWithoutAgentInput | PasswordResetEventCreateOrConnectWithoutAgentInput[]
    createMany?: PasswordResetEventCreateManyAgentInputEnvelope
    connect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutAgentInput = {
    create?: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput> | AuditLogCreateWithoutAgentInput[] | AuditLogUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgentInput | AuditLogCreateOrConnectWithoutAgentInput[]
    createMany?: AuditLogCreateManyAgentInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DeletionScheduleCreateNestedManyWithoutAgentInput = {
    create?: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput> | DeletionScheduleCreateWithoutAgentInput[] | DeletionScheduleUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: DeletionScheduleCreateOrConnectWithoutAgentInput | DeletionScheduleCreateOrConnectWithoutAgentInput[]
    createMany?: DeletionScheduleCreateManyAgentInputEnvelope
    connect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
  }

  export type AccountLockCreateNestedOneWithoutAgentInput = {
    create?: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AccountLockCreateOrConnectWithoutAgentInput
    connect?: AccountLockWhereUniqueInput
  }

  export type FailedAttemptCreateNestedManyWithoutAgentInput = {
    create?: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput> | FailedAttemptCreateWithoutAgentInput[] | FailedAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedAttemptCreateOrConnectWithoutAgentInput | FailedAttemptCreateOrConnectWithoutAgentInput[]
    createMany?: FailedAttemptCreateManyAgentInputEnvelope
    connect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
  }

  export type FailedDeletionAttemptCreateNestedManyWithoutAgentInput = {
    create?: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput> | FailedDeletionAttemptCreateWithoutAgentInput[] | FailedDeletionAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedDeletionAttemptCreateOrConnectWithoutAgentInput | FailedDeletionAttemptCreateOrConnectWithoutAgentInput[]
    createMany?: FailedDeletionAttemptCreateManyAgentInputEnvelope
    connect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
  }

  export type VerificationStatusCreateNestedManyWithoutAgentInput = {
    create?: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput> | VerificationStatusCreateWithoutAgentInput[] | VerificationStatusUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: VerificationStatusCreateOrConnectWithoutAgentInput | VerificationStatusCreateOrConnectWithoutAgentInput[]
    createMany?: VerificationStatusCreateManyAgentInputEnvelope
    connect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
  }

  export type AgentProfileUncheckedCreateNestedOneWithoutAgentInput = {
    create?: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutAgentInput
    connect?: AgentProfileWhereUniqueInput
  }

  export type AgentSessionUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput> | AgentSessionCreateWithoutAgentInput[] | AgentSessionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSessionCreateOrConnectWithoutAgentInput | AgentSessionCreateOrConnectWithoutAgentInput[]
    createMany?: AgentSessionCreateManyAgentInputEnvelope
    connect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
  }

  export type OAuthAccountUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput> | OAuthAccountCreateWithoutAgentInput[] | OAuthAccountUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutAgentInput | OAuthAccountCreateOrConnectWithoutAgentInput[]
    createMany?: OAuthAccountCreateManyAgentInputEnvelope
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
  }

  export type PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput> | PasswordResetTokenCreateWithoutAgentInput[] | PasswordResetTokenUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentInput | PasswordResetTokenCreateOrConnectWithoutAgentInput[]
    createMany?: PasswordResetTokenCreateManyAgentInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput> | PasswordResetEventCreateWithoutAgentInput[] | PasswordResetEventUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetEventCreateOrConnectWithoutAgentInput | PasswordResetEventCreateOrConnectWithoutAgentInput[]
    createMany?: PasswordResetEventCreateManyAgentInputEnvelope
    connect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput> | AuditLogCreateWithoutAgentInput[] | AuditLogUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgentInput | AuditLogCreateOrConnectWithoutAgentInput[]
    createMany?: AuditLogCreateManyAgentInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput> | DeletionScheduleCreateWithoutAgentInput[] | DeletionScheduleUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: DeletionScheduleCreateOrConnectWithoutAgentInput | DeletionScheduleCreateOrConnectWithoutAgentInput[]
    createMany?: DeletionScheduleCreateManyAgentInputEnvelope
    connect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
  }

  export type AccountLockUncheckedCreateNestedOneWithoutAgentInput = {
    create?: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AccountLockCreateOrConnectWithoutAgentInput
    connect?: AccountLockWhereUniqueInput
  }

  export type FailedAttemptUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput> | FailedAttemptCreateWithoutAgentInput[] | FailedAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedAttemptCreateOrConnectWithoutAgentInput | FailedAttemptCreateOrConnectWithoutAgentInput[]
    createMany?: FailedAttemptCreateManyAgentInputEnvelope
    connect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
  }

  export type FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput> | FailedDeletionAttemptCreateWithoutAgentInput[] | FailedDeletionAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedDeletionAttemptCreateOrConnectWithoutAgentInput | FailedDeletionAttemptCreateOrConnectWithoutAgentInput[]
    createMany?: FailedDeletionAttemptCreateManyAgentInputEnvelope
    connect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
  }

  export type VerificationStatusUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput> | VerificationStatusCreateWithoutAgentInput[] | VerificationStatusUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: VerificationStatusCreateOrConnectWithoutAgentInput | VerificationStatusCreateOrConnectWithoutAgentInput[]
    createMany?: VerificationStatusCreateManyAgentInputEnvelope
    connect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AgentProfileUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutAgentInput
    upsert?: AgentProfileUpsertWithoutAgentInput
    disconnect?: AgentProfileWhereInput | boolean
    delete?: AgentProfileWhereInput | boolean
    connect?: AgentProfileWhereUniqueInput
    update?: XOR<XOR<AgentProfileUpdateToOneWithWhereWithoutAgentInput, AgentProfileUpdateWithoutAgentInput>, AgentProfileUncheckedUpdateWithoutAgentInput>
  }

  export type AgentSessionUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput> | AgentSessionCreateWithoutAgentInput[] | AgentSessionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSessionCreateOrConnectWithoutAgentInput | AgentSessionCreateOrConnectWithoutAgentInput[]
    upsert?: AgentSessionUpsertWithWhereUniqueWithoutAgentInput | AgentSessionUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentSessionCreateManyAgentInputEnvelope
    set?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    disconnect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    delete?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    connect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    update?: AgentSessionUpdateWithWhereUniqueWithoutAgentInput | AgentSessionUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentSessionUpdateManyWithWhereWithoutAgentInput | AgentSessionUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentSessionScalarWhereInput | AgentSessionScalarWhereInput[]
  }

  export type OAuthAccountUpdateManyWithoutAgentNestedInput = {
    create?: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput> | OAuthAccountCreateWithoutAgentInput[] | OAuthAccountUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutAgentInput | OAuthAccountCreateOrConnectWithoutAgentInput[]
    upsert?: OAuthAccountUpsertWithWhereUniqueWithoutAgentInput | OAuthAccountUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: OAuthAccountCreateManyAgentInputEnvelope
    set?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    disconnect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    delete?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    update?: OAuthAccountUpdateWithWhereUniqueWithoutAgentInput | OAuthAccountUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: OAuthAccountUpdateManyWithWhereWithoutAgentInput | OAuthAccountUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
  }

  export type PasswordResetTokenUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput> | PasswordResetTokenCreateWithoutAgentInput[] | PasswordResetTokenUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentInput | PasswordResetTokenCreateOrConnectWithoutAgentInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutAgentInput | PasswordResetTokenUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PasswordResetTokenCreateManyAgentInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutAgentInput | PasswordResetTokenUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutAgentInput | PasswordResetTokenUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type PasswordResetEventUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput> | PasswordResetEventCreateWithoutAgentInput[] | PasswordResetEventUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetEventCreateOrConnectWithoutAgentInput | PasswordResetEventCreateOrConnectWithoutAgentInput[]
    upsert?: PasswordResetEventUpsertWithWhereUniqueWithoutAgentInput | PasswordResetEventUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PasswordResetEventCreateManyAgentInputEnvelope
    set?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    disconnect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    delete?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    connect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    update?: PasswordResetEventUpdateWithWhereUniqueWithoutAgentInput | PasswordResetEventUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PasswordResetEventUpdateManyWithWhereWithoutAgentInput | PasswordResetEventUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PasswordResetEventScalarWhereInput | PasswordResetEventScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput> | AuditLogCreateWithoutAgentInput[] | AuditLogUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgentInput | AuditLogCreateOrConnectWithoutAgentInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAgentInput | AuditLogUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AuditLogCreateManyAgentInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAgentInput | AuditLogUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAgentInput | AuditLogUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DeletionScheduleUpdateManyWithoutAgentNestedInput = {
    create?: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput> | DeletionScheduleCreateWithoutAgentInput[] | DeletionScheduleUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: DeletionScheduleCreateOrConnectWithoutAgentInput | DeletionScheduleCreateOrConnectWithoutAgentInput[]
    upsert?: DeletionScheduleUpsertWithWhereUniqueWithoutAgentInput | DeletionScheduleUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: DeletionScheduleCreateManyAgentInputEnvelope
    set?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    disconnect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    delete?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    connect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    update?: DeletionScheduleUpdateWithWhereUniqueWithoutAgentInput | DeletionScheduleUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: DeletionScheduleUpdateManyWithWhereWithoutAgentInput | DeletionScheduleUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: DeletionScheduleScalarWhereInput | DeletionScheduleScalarWhereInput[]
  }

  export type AccountLockUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AccountLockCreateOrConnectWithoutAgentInput
    upsert?: AccountLockUpsertWithoutAgentInput
    disconnect?: AccountLockWhereInput | boolean
    delete?: AccountLockWhereInput | boolean
    connect?: AccountLockWhereUniqueInput
    update?: XOR<XOR<AccountLockUpdateToOneWithWhereWithoutAgentInput, AccountLockUpdateWithoutAgentInput>, AccountLockUncheckedUpdateWithoutAgentInput>
  }

  export type FailedAttemptUpdateManyWithoutAgentNestedInput = {
    create?: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput> | FailedAttemptCreateWithoutAgentInput[] | FailedAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedAttemptCreateOrConnectWithoutAgentInput | FailedAttemptCreateOrConnectWithoutAgentInput[]
    upsert?: FailedAttemptUpsertWithWhereUniqueWithoutAgentInput | FailedAttemptUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: FailedAttemptCreateManyAgentInputEnvelope
    set?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    disconnect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    delete?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    connect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    update?: FailedAttemptUpdateWithWhereUniqueWithoutAgentInput | FailedAttemptUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: FailedAttemptUpdateManyWithWhereWithoutAgentInput | FailedAttemptUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: FailedAttemptScalarWhereInput | FailedAttemptScalarWhereInput[]
  }

  export type FailedDeletionAttemptUpdateManyWithoutAgentNestedInput = {
    create?: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput> | FailedDeletionAttemptCreateWithoutAgentInput[] | FailedDeletionAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedDeletionAttemptCreateOrConnectWithoutAgentInput | FailedDeletionAttemptCreateOrConnectWithoutAgentInput[]
    upsert?: FailedDeletionAttemptUpsertWithWhereUniqueWithoutAgentInput | FailedDeletionAttemptUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: FailedDeletionAttemptCreateManyAgentInputEnvelope
    set?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    disconnect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    delete?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    connect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    update?: FailedDeletionAttemptUpdateWithWhereUniqueWithoutAgentInput | FailedDeletionAttemptUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: FailedDeletionAttemptUpdateManyWithWhereWithoutAgentInput | FailedDeletionAttemptUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: FailedDeletionAttemptScalarWhereInput | FailedDeletionAttemptScalarWhereInput[]
  }

  export type VerificationStatusUpdateManyWithoutAgentNestedInput = {
    create?: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput> | VerificationStatusCreateWithoutAgentInput[] | VerificationStatusUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: VerificationStatusCreateOrConnectWithoutAgentInput | VerificationStatusCreateOrConnectWithoutAgentInput[]
    upsert?: VerificationStatusUpsertWithWhereUniqueWithoutAgentInput | VerificationStatusUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: VerificationStatusCreateManyAgentInputEnvelope
    set?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    disconnect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    delete?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    connect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    update?: VerificationStatusUpdateWithWhereUniqueWithoutAgentInput | VerificationStatusUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: VerificationStatusUpdateManyWithWhereWithoutAgentInput | VerificationStatusUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: VerificationStatusScalarWhereInput | VerificationStatusScalarWhereInput[]
  }

  export type AgentProfileUncheckedUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutAgentInput
    upsert?: AgentProfileUpsertWithoutAgentInput
    disconnect?: AgentProfileWhereInput | boolean
    delete?: AgentProfileWhereInput | boolean
    connect?: AgentProfileWhereUniqueInput
    update?: XOR<XOR<AgentProfileUpdateToOneWithWhereWithoutAgentInput, AgentProfileUpdateWithoutAgentInput>, AgentProfileUncheckedUpdateWithoutAgentInput>
  }

  export type AgentSessionUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput> | AgentSessionCreateWithoutAgentInput[] | AgentSessionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AgentSessionCreateOrConnectWithoutAgentInput | AgentSessionCreateOrConnectWithoutAgentInput[]
    upsert?: AgentSessionUpsertWithWhereUniqueWithoutAgentInput | AgentSessionUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AgentSessionCreateManyAgentInputEnvelope
    set?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    disconnect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    delete?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    connect?: AgentSessionWhereUniqueInput | AgentSessionWhereUniqueInput[]
    update?: AgentSessionUpdateWithWhereUniqueWithoutAgentInput | AgentSessionUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AgentSessionUpdateManyWithWhereWithoutAgentInput | AgentSessionUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AgentSessionScalarWhereInput | AgentSessionScalarWhereInput[]
  }

  export type OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput> | OAuthAccountCreateWithoutAgentInput[] | OAuthAccountUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: OAuthAccountCreateOrConnectWithoutAgentInput | OAuthAccountCreateOrConnectWithoutAgentInput[]
    upsert?: OAuthAccountUpsertWithWhereUniqueWithoutAgentInput | OAuthAccountUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: OAuthAccountCreateManyAgentInputEnvelope
    set?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    disconnect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    delete?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    connect?: OAuthAccountWhereUniqueInput | OAuthAccountWhereUniqueInput[]
    update?: OAuthAccountUpdateWithWhereUniqueWithoutAgentInput | OAuthAccountUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: OAuthAccountUpdateManyWithWhereWithoutAgentInput | OAuthAccountUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput> | PasswordResetTokenCreateWithoutAgentInput[] | PasswordResetTokenUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentInput | PasswordResetTokenCreateOrConnectWithoutAgentInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutAgentInput | PasswordResetTokenUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PasswordResetTokenCreateManyAgentInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutAgentInput | PasswordResetTokenUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutAgentInput | PasswordResetTokenUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput> | PasswordResetEventCreateWithoutAgentInput[] | PasswordResetEventUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: PasswordResetEventCreateOrConnectWithoutAgentInput | PasswordResetEventCreateOrConnectWithoutAgentInput[]
    upsert?: PasswordResetEventUpsertWithWhereUniqueWithoutAgentInput | PasswordResetEventUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: PasswordResetEventCreateManyAgentInputEnvelope
    set?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    disconnect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    delete?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    connect?: PasswordResetEventWhereUniqueInput | PasswordResetEventWhereUniqueInput[]
    update?: PasswordResetEventUpdateWithWhereUniqueWithoutAgentInput | PasswordResetEventUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: PasswordResetEventUpdateManyWithWhereWithoutAgentInput | PasswordResetEventUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: PasswordResetEventScalarWhereInput | PasswordResetEventScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput> | AuditLogCreateWithoutAgentInput[] | AuditLogUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgentInput | AuditLogCreateOrConnectWithoutAgentInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAgentInput | AuditLogUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AuditLogCreateManyAgentInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAgentInput | AuditLogUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAgentInput | AuditLogUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput> | DeletionScheduleCreateWithoutAgentInput[] | DeletionScheduleUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: DeletionScheduleCreateOrConnectWithoutAgentInput | DeletionScheduleCreateOrConnectWithoutAgentInput[]
    upsert?: DeletionScheduleUpsertWithWhereUniqueWithoutAgentInput | DeletionScheduleUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: DeletionScheduleCreateManyAgentInputEnvelope
    set?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    disconnect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    delete?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    connect?: DeletionScheduleWhereUniqueInput | DeletionScheduleWhereUniqueInput[]
    update?: DeletionScheduleUpdateWithWhereUniqueWithoutAgentInput | DeletionScheduleUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: DeletionScheduleUpdateManyWithWhereWithoutAgentInput | DeletionScheduleUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: DeletionScheduleScalarWhereInput | DeletionScheduleScalarWhereInput[]
  }

  export type AccountLockUncheckedUpdateOneWithoutAgentNestedInput = {
    create?: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
    connectOrCreate?: AccountLockCreateOrConnectWithoutAgentInput
    upsert?: AccountLockUpsertWithoutAgentInput
    disconnect?: AccountLockWhereInput | boolean
    delete?: AccountLockWhereInput | boolean
    connect?: AccountLockWhereUniqueInput
    update?: XOR<XOR<AccountLockUpdateToOneWithWhereWithoutAgentInput, AccountLockUpdateWithoutAgentInput>, AccountLockUncheckedUpdateWithoutAgentInput>
  }

  export type FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput> | FailedAttemptCreateWithoutAgentInput[] | FailedAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedAttemptCreateOrConnectWithoutAgentInput | FailedAttemptCreateOrConnectWithoutAgentInput[]
    upsert?: FailedAttemptUpsertWithWhereUniqueWithoutAgentInput | FailedAttemptUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: FailedAttemptCreateManyAgentInputEnvelope
    set?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    disconnect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    delete?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    connect?: FailedAttemptWhereUniqueInput | FailedAttemptWhereUniqueInput[]
    update?: FailedAttemptUpdateWithWhereUniqueWithoutAgentInput | FailedAttemptUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: FailedAttemptUpdateManyWithWhereWithoutAgentInput | FailedAttemptUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: FailedAttemptScalarWhereInput | FailedAttemptScalarWhereInput[]
  }

  export type FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput> | FailedDeletionAttemptCreateWithoutAgentInput[] | FailedDeletionAttemptUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: FailedDeletionAttemptCreateOrConnectWithoutAgentInput | FailedDeletionAttemptCreateOrConnectWithoutAgentInput[]
    upsert?: FailedDeletionAttemptUpsertWithWhereUniqueWithoutAgentInput | FailedDeletionAttemptUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: FailedDeletionAttemptCreateManyAgentInputEnvelope
    set?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    disconnect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    delete?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    connect?: FailedDeletionAttemptWhereUniqueInput | FailedDeletionAttemptWhereUniqueInput[]
    update?: FailedDeletionAttemptUpdateWithWhereUniqueWithoutAgentInput | FailedDeletionAttemptUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: FailedDeletionAttemptUpdateManyWithWhereWithoutAgentInput | FailedDeletionAttemptUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: FailedDeletionAttemptScalarWhereInput | FailedDeletionAttemptScalarWhereInput[]
  }

  export type VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput> | VerificationStatusCreateWithoutAgentInput[] | VerificationStatusUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: VerificationStatusCreateOrConnectWithoutAgentInput | VerificationStatusCreateOrConnectWithoutAgentInput[]
    upsert?: VerificationStatusUpsertWithWhereUniqueWithoutAgentInput | VerificationStatusUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: VerificationStatusCreateManyAgentInputEnvelope
    set?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    disconnect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    delete?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    connect?: VerificationStatusWhereUniqueInput | VerificationStatusWhereUniqueInput[]
    update?: VerificationStatusUpdateWithWhereUniqueWithoutAgentInput | VerificationStatusUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: VerificationStatusUpdateManyWithWhereWithoutAgentInput | VerificationStatusUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: VerificationStatusScalarWhereInput | VerificationStatusScalarWhereInput[]
  }

  export type AgentCreateNestedOneWithoutProfileInput = {
    create?: XOR<AgentCreateWithoutProfileInput, AgentUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AgentCreateOrConnectWithoutProfileInput
    connect?: AgentWhereUniqueInput
  }

  export type PasswordResetTokenCreateNestedManyWithoutAgentProfileInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput> | PasswordResetTokenCreateWithoutAgentProfileInput[] | PasswordResetTokenUncheckedCreateWithoutAgentProfileInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentProfileInput | PasswordResetTokenCreateOrConnectWithoutAgentProfileInput[]
    createMany?: PasswordResetTokenCreateManyAgentProfileInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type PasswordResetTokenUncheckedCreateNestedManyWithoutAgentProfileInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput> | PasswordResetTokenCreateWithoutAgentProfileInput[] | PasswordResetTokenUncheckedCreateWithoutAgentProfileInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentProfileInput | PasswordResetTokenCreateOrConnectWithoutAgentProfileInput[]
    createMany?: PasswordResetTokenCreateManyAgentProfileInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgentUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<AgentCreateWithoutProfileInput, AgentUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AgentCreateOrConnectWithoutProfileInput
    upsert?: AgentUpsertWithoutProfileInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutProfileInput, AgentUpdateWithoutProfileInput>, AgentUncheckedUpdateWithoutProfileInput>
  }

  export type PasswordResetTokenUpdateManyWithoutAgentProfileNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput> | PasswordResetTokenCreateWithoutAgentProfileInput[] | PasswordResetTokenUncheckedCreateWithoutAgentProfileInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentProfileInput | PasswordResetTokenCreateOrConnectWithoutAgentProfileInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutAgentProfileInput | PasswordResetTokenUpsertWithWhereUniqueWithoutAgentProfileInput[]
    createMany?: PasswordResetTokenCreateManyAgentProfileInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutAgentProfileInput | PasswordResetTokenUpdateWithWhereUniqueWithoutAgentProfileInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutAgentProfileInput | PasswordResetTokenUpdateManyWithWhereWithoutAgentProfileInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutAgentProfileNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput> | PasswordResetTokenCreateWithoutAgentProfileInput[] | PasswordResetTokenUncheckedCreateWithoutAgentProfileInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutAgentProfileInput | PasswordResetTokenCreateOrConnectWithoutAgentProfileInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutAgentProfileInput | PasswordResetTokenUpsertWithWhereUniqueWithoutAgentProfileInput[]
    createMany?: PasswordResetTokenCreateManyAgentProfileInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutAgentProfileInput | PasswordResetTokenUpdateWithWhereUniqueWithoutAgentProfileInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutAgentProfileInput | PasswordResetTokenUpdateManyWithWhereWithoutAgentProfileInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type AgentCreateNestedOneWithoutSessionsInput = {
    create?: XOR<AgentCreateWithoutSessionsInput, AgentUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutSessionsInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<AgentCreateWithoutSessionsInput, AgentUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutSessionsInput
    upsert?: AgentUpsertWithoutSessionsInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutSessionsInput, AgentUpdateWithoutSessionsInput>, AgentUncheckedUpdateWithoutSessionsInput>
  }

  export type AgentCreateNestedOneWithoutDeletionScheduleInput = {
    create?: XOR<AgentCreateWithoutDeletionScheduleInput, AgentUncheckedCreateWithoutDeletionScheduleInput>
    connectOrCreate?: AgentCreateOrConnectWithoutDeletionScheduleInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutDeletionScheduleNestedInput = {
    create?: XOR<AgentCreateWithoutDeletionScheduleInput, AgentUncheckedCreateWithoutDeletionScheduleInput>
    connectOrCreate?: AgentCreateOrConnectWithoutDeletionScheduleInput
    upsert?: AgentUpsertWithoutDeletionScheduleInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutDeletionScheduleInput, AgentUpdateWithoutDeletionScheduleInput>, AgentUncheckedUpdateWithoutDeletionScheduleInput>
  }

  export type AgentCreateNestedOneWithoutVerificationStatusInput = {
    create?: XOR<AgentCreateWithoutVerificationStatusInput, AgentUncheckedCreateWithoutVerificationStatusInput>
    connectOrCreate?: AgentCreateOrConnectWithoutVerificationStatusInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutVerificationStatusNestedInput = {
    create?: XOR<AgentCreateWithoutVerificationStatusInput, AgentUncheckedCreateWithoutVerificationStatusInput>
    connectOrCreate?: AgentCreateOrConnectWithoutVerificationStatusInput
    upsert?: AgentUpsertWithoutVerificationStatusInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutVerificationStatusInput, AgentUpdateWithoutVerificationStatusInput>, AgentUncheckedUpdateWithoutVerificationStatusInput>
  }

  export type AgentCreateNestedOneWithoutFailedAttemptInput = {
    create?: XOR<AgentCreateWithoutFailedAttemptInput, AgentUncheckedCreateWithoutFailedAttemptInput>
    connectOrCreate?: AgentCreateOrConnectWithoutFailedAttemptInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutFailedAttemptNestedInput = {
    create?: XOR<AgentCreateWithoutFailedAttemptInput, AgentUncheckedCreateWithoutFailedAttemptInput>
    connectOrCreate?: AgentCreateOrConnectWithoutFailedAttemptInput
    upsert?: AgentUpsertWithoutFailedAttemptInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutFailedAttemptInput, AgentUpdateWithoutFailedAttemptInput>, AgentUncheckedUpdateWithoutFailedAttemptInput>
  }

  export type AgentCreateNestedOneWithoutFailedDeletionAttemptInput = {
    create?: XOR<AgentCreateWithoutFailedDeletionAttemptInput, AgentUncheckedCreateWithoutFailedDeletionAttemptInput>
    connectOrCreate?: AgentCreateOrConnectWithoutFailedDeletionAttemptInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutFailedDeletionAttemptNestedInput = {
    create?: XOR<AgentCreateWithoutFailedDeletionAttemptInput, AgentUncheckedCreateWithoutFailedDeletionAttemptInput>
    connectOrCreate?: AgentCreateOrConnectWithoutFailedDeletionAttemptInput
    upsert?: AgentUpsertWithoutFailedDeletionAttemptInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutFailedDeletionAttemptInput, AgentUpdateWithoutFailedDeletionAttemptInput>, AgentUncheckedUpdateWithoutFailedDeletionAttemptInput>
  }

  export type AgentCreateNestedOneWithoutAccountLockInput = {
    create?: XOR<AgentCreateWithoutAccountLockInput, AgentUncheckedCreateWithoutAccountLockInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAccountLockInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutAccountLockNestedInput = {
    create?: XOR<AgentCreateWithoutAccountLockInput, AgentUncheckedCreateWithoutAccountLockInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAccountLockInput
    upsert?: AgentUpsertWithoutAccountLockInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutAccountLockInput, AgentUpdateWithoutAccountLockInput>, AgentUncheckedUpdateWithoutAccountLockInput>
  }

  export type AgentCreateNestedOneWithoutPasswordResetTokenInput = {
    create?: XOR<AgentCreateWithoutPasswordResetTokenInput, AgentUncheckedCreateWithoutPasswordResetTokenInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPasswordResetTokenInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentProfileCreateNestedOneWithoutPasswordResetTokenInput = {
    create?: XOR<AgentProfileCreateWithoutPasswordResetTokenInput, AgentProfileUncheckedCreateWithoutPasswordResetTokenInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutPasswordResetTokenInput
    connect?: AgentProfileWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutPasswordResetTokenNestedInput = {
    create?: XOR<AgentCreateWithoutPasswordResetTokenInput, AgentUncheckedCreateWithoutPasswordResetTokenInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPasswordResetTokenInput
    upsert?: AgentUpsertWithoutPasswordResetTokenInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutPasswordResetTokenInput, AgentUpdateWithoutPasswordResetTokenInput>, AgentUncheckedUpdateWithoutPasswordResetTokenInput>
  }

  export type AgentProfileUpdateOneWithoutPasswordResetTokenNestedInput = {
    create?: XOR<AgentProfileCreateWithoutPasswordResetTokenInput, AgentProfileUncheckedCreateWithoutPasswordResetTokenInput>
    connectOrCreate?: AgentProfileCreateOrConnectWithoutPasswordResetTokenInput
    upsert?: AgentProfileUpsertWithoutPasswordResetTokenInput
    disconnect?: AgentProfileWhereInput | boolean
    delete?: AgentProfileWhereInput | boolean
    connect?: AgentProfileWhereUniqueInput
    update?: XOR<XOR<AgentProfileUpdateToOneWithWhereWithoutPasswordResetTokenInput, AgentProfileUpdateWithoutPasswordResetTokenInput>, AgentProfileUncheckedUpdateWithoutPasswordResetTokenInput>
  }

  export type AgentCreateNestedOneWithoutPasswordResetEventInput = {
    create?: XOR<AgentCreateWithoutPasswordResetEventInput, AgentUncheckedCreateWithoutPasswordResetEventInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPasswordResetEventInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutPasswordResetEventNestedInput = {
    create?: XOR<AgentCreateWithoutPasswordResetEventInput, AgentUncheckedCreateWithoutPasswordResetEventInput>
    connectOrCreate?: AgentCreateOrConnectWithoutPasswordResetEventInput
    upsert?: AgentUpsertWithoutPasswordResetEventInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutPasswordResetEventInput, AgentUpdateWithoutPasswordResetEventInput>, AgentUncheckedUpdateWithoutPasswordResetEventInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserRoleCreateNestedOneWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    connect?: UserRoleWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    connect?: UserRoleWhereUniqueInput
  }

  export type EnumUserRoleEnumFieldUpdateOperationsInput = {
    set?: $Enums.UserRoleEnum
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserRoleUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    upsert?: UserRoleUpsertWithoutUserInput
    disconnect?: UserRoleWhereInput | boolean
    delete?: UserRoleWhereInput | boolean
    connect?: UserRoleWhereUniqueInput
    update?: XOR<XOR<UserRoleUpdateToOneWithWhereWithoutUserInput, UserRoleUpdateWithoutUserInput>, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    upsert?: UserRoleUpsertWithoutUserInput
    disconnect?: UserRoleWhereInput | boolean
    delete?: UserRoleWhereInput | boolean
    connect?: UserRoleWhereUniqueInput
    update?: XOR<XOR<UserRoleUpdateToOneWithWhereWithoutUserInput, UserRoleUpdateWithoutUserInput>, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AgentCreateNestedOneWithoutOauthAccountsInput = {
    create?: XOR<AgentCreateWithoutOauthAccountsInput, AgentUncheckedCreateWithoutOauthAccountsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutOauthAccountsInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentUpdateOneRequiredWithoutOauthAccountsNestedInput = {
    create?: XOR<AgentCreateWithoutOauthAccountsInput, AgentUncheckedCreateWithoutOauthAccountsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutOauthAccountsInput
    upsert?: AgentUpsertWithoutOauthAccountsInput
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutOauthAccountsInput, AgentUpdateWithoutOauthAccountsInput>, AgentUncheckedUpdateWithoutOauthAccountsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumAuditStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusFilter<$PrismaModel> | $Enums.AuditStatus
  }

  export type NestedEnumSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityFilter<$PrismaModel> | $Enums.Severity
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditStatus | EnumAuditStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditStatus[] | ListEnumAuditStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuditStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditStatusFilter<$PrismaModel>
    _max?: NestedEnumAuditStatusFilter<$PrismaModel>
  }

  export type NestedEnumSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Severity | EnumSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Severity[] | ListEnumSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumSeverityWithAggregatesFilter<$PrismaModel> | $Enums.Severity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeverityFilter<$PrismaModel>
    _max?: NestedEnumSeverityFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumFilter<$PrismaModel> | $Enums.UserRoleEnum
  }

  export type NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRoleEnum | EnumUserRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRoleEnum[] | ListEnumUserRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.UserRoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumUserRoleEnumFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AgentCreateWithoutAuditLogInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutAuditLogInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutAuditLogInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutAuditLogInput, AgentUncheckedCreateWithoutAuditLogInput>
  }

  export type AgentUpsertWithoutAuditLogInput = {
    update: XOR<AgentUpdateWithoutAuditLogInput, AgentUncheckedUpdateWithoutAuditLogInput>
    create: XOR<AgentCreateWithoutAuditLogInput, AgentUncheckedCreateWithoutAuditLogInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutAuditLogInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutAuditLogInput, AgentUncheckedUpdateWithoutAuditLogInput>
  }

  export type AgentUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentProfileCreateWithoutAgentInput = {
    id?: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentProfileInput
  }

  export type AgentProfileUncheckedCreateWithoutAgentInput = {
    id?: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentProfileInput
  }

  export type AgentProfileCreateOrConnectWithoutAgentInput = {
    where: AgentProfileWhereUniqueInput
    create: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
  }

  export type AgentSessionCreateWithoutAgentInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type AgentSessionUncheckedCreateWithoutAgentInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type AgentSessionCreateOrConnectWithoutAgentInput = {
    where: AgentSessionWhereUniqueInput
    create: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput>
  }

  export type AgentSessionCreateManyAgentInputEnvelope = {
    data: AgentSessionCreateManyAgentInput | AgentSessionCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type OAuthAccountCreateWithoutAgentInput = {
    id?: string
    provider: string
    providerId: string
    createdAt?: Date | string
  }

  export type OAuthAccountUncheckedCreateWithoutAgentInput = {
    id?: string
    provider: string
    providerId: string
    createdAt?: Date | string
  }

  export type OAuthAccountCreateOrConnectWithoutAgentInput = {
    where: OAuthAccountWhereUniqueInput
    create: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput>
  }

  export type OAuthAccountCreateManyAgentInputEnvelope = {
    data: OAuthAccountCreateManyAgentInput | OAuthAccountCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetTokenCreateWithoutAgentInput = {
    id?: string
    tokenHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    AgentProfile?: AgentProfileCreateNestedOneWithoutPasswordResetTokenInput
  }

  export type PasswordResetTokenUncheckedCreateWithoutAgentInput = {
    id?: string
    tokenHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agentProfileId?: string | null
  }

  export type PasswordResetTokenCreateOrConnectWithoutAgentInput = {
    where: PasswordResetTokenWhereUniqueInput
    create: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput>
  }

  export type PasswordResetTokenCreateManyAgentInputEnvelope = {
    data: PasswordResetTokenCreateManyAgentInput | PasswordResetTokenCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetEventCreateWithoutAgentInput = {
    id?: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
  }

  export type PasswordResetEventUncheckedCreateWithoutAgentInput = {
    id?: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
  }

  export type PasswordResetEventCreateOrConnectWithoutAgentInput = {
    where: PasswordResetEventWhereUniqueInput
    create: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput>
  }

  export type PasswordResetEventCreateManyAgentInputEnvelope = {
    data: PasswordResetEventCreateManyAgentInput | PasswordResetEventCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutAgentInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    targetId?: string | null
    targetType?: string | null
  }

  export type AuditLogUncheckedCreateWithoutAgentInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    targetId?: string | null
    targetType?: string | null
  }

  export type AuditLogCreateOrConnectWithoutAgentInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput>
  }

  export type AuditLogCreateManyAgentInputEnvelope = {
    data: AuditLogCreateManyAgentInput | AuditLogCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type DeletionScheduleCreateWithoutAgentInput = {
    id?: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type DeletionScheduleUncheckedCreateWithoutAgentInput = {
    id?: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type DeletionScheduleCreateOrConnectWithoutAgentInput = {
    where: DeletionScheduleWhereUniqueInput
    create: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput>
  }

  export type DeletionScheduleCreateManyAgentInputEnvelope = {
    data: DeletionScheduleCreateManyAgentInput | DeletionScheduleCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AccountLockCreateWithoutAgentInput = {
    id?: string
    reason?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    action?: string | null
    userAgent?: string | null
  }

  export type AccountLockUncheckedCreateWithoutAgentInput = {
    id?: string
    reason?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    action?: string | null
    userAgent?: string | null
  }

  export type AccountLockCreateOrConnectWithoutAgentInput = {
    where: AccountLockWhereUniqueInput
    create: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
  }

  export type FailedAttemptCreateWithoutAgentInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
  }

  export type FailedAttemptUncheckedCreateWithoutAgentInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
  }

  export type FailedAttemptCreateOrConnectWithoutAgentInput = {
    where: FailedAttemptWhereUniqueInput
    create: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput>
  }

  export type FailedAttemptCreateManyAgentInputEnvelope = {
    data: FailedAttemptCreateManyAgentInput | FailedAttemptCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type FailedDeletionAttemptCreateWithoutAgentInput = {
    id?: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
  }

  export type FailedDeletionAttemptUncheckedCreateWithoutAgentInput = {
    id?: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
  }

  export type FailedDeletionAttemptCreateOrConnectWithoutAgentInput = {
    where: FailedDeletionAttemptWhereUniqueInput
    create: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput>
  }

  export type FailedDeletionAttemptCreateManyAgentInputEnvelope = {
    data: FailedDeletionAttemptCreateManyAgentInput | FailedDeletionAttemptCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type VerificationStatusCreateWithoutAgentInput = {
    id?: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationStatusUncheckedCreateWithoutAgentInput = {
    id?: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationStatusCreateOrConnectWithoutAgentInput = {
    where: VerificationStatusWhereUniqueInput
    create: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput>
  }

  export type VerificationStatusCreateManyAgentInputEnvelope = {
    data: VerificationStatusCreateManyAgentInput | VerificationStatusCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type AgentProfileUpsertWithoutAgentInput = {
    update: XOR<AgentProfileUpdateWithoutAgentInput, AgentProfileUncheckedUpdateWithoutAgentInput>
    create: XOR<AgentProfileCreateWithoutAgentInput, AgentProfileUncheckedCreateWithoutAgentInput>
    where?: AgentProfileWhereInput
  }

  export type AgentProfileUpdateToOneWithWhereWithoutAgentInput = {
    where?: AgentProfileWhereInput
    data: XOR<AgentProfileUpdateWithoutAgentInput, AgentProfileUncheckedUpdateWithoutAgentInput>
  }

  export type AgentProfileUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentProfileNestedInput
  }

  export type AgentProfileUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentProfileNestedInput
  }

  export type AgentSessionUpsertWithWhereUniqueWithoutAgentInput = {
    where: AgentSessionWhereUniqueInput
    update: XOR<AgentSessionUpdateWithoutAgentInput, AgentSessionUncheckedUpdateWithoutAgentInput>
    create: XOR<AgentSessionCreateWithoutAgentInput, AgentSessionUncheckedCreateWithoutAgentInput>
  }

  export type AgentSessionUpdateWithWhereUniqueWithoutAgentInput = {
    where: AgentSessionWhereUniqueInput
    data: XOR<AgentSessionUpdateWithoutAgentInput, AgentSessionUncheckedUpdateWithoutAgentInput>
  }

  export type AgentSessionUpdateManyWithWhereWithoutAgentInput = {
    where: AgentSessionScalarWhereInput
    data: XOR<AgentSessionUpdateManyMutationInput, AgentSessionUncheckedUpdateManyWithoutAgentInput>
  }

  export type AgentSessionScalarWhereInput = {
    AND?: AgentSessionScalarWhereInput | AgentSessionScalarWhereInput[]
    OR?: AgentSessionScalarWhereInput[]
    NOT?: AgentSessionScalarWhereInput | AgentSessionScalarWhereInput[]
    id?: StringFilter<"AgentSession"> | string
    token?: StringFilter<"AgentSession"> | string
    agentId?: StringFilter<"AgentSession"> | string
    ipAddress?: StringNullableFilter<"AgentSession"> | string | null
    userAgent?: StringNullableFilter<"AgentSession"> | string | null
    createdAt?: DateTimeFilter<"AgentSession"> | Date | string
    expiresAt?: DateTimeFilter<"AgentSession"> | Date | string
    revokedAt?: DateTimeNullableFilter<"AgentSession"> | Date | string | null
  }

  export type OAuthAccountUpsertWithWhereUniqueWithoutAgentInput = {
    where: OAuthAccountWhereUniqueInput
    update: XOR<OAuthAccountUpdateWithoutAgentInput, OAuthAccountUncheckedUpdateWithoutAgentInput>
    create: XOR<OAuthAccountCreateWithoutAgentInput, OAuthAccountUncheckedCreateWithoutAgentInput>
  }

  export type OAuthAccountUpdateWithWhereUniqueWithoutAgentInput = {
    where: OAuthAccountWhereUniqueInput
    data: XOR<OAuthAccountUpdateWithoutAgentInput, OAuthAccountUncheckedUpdateWithoutAgentInput>
  }

  export type OAuthAccountUpdateManyWithWhereWithoutAgentInput = {
    where: OAuthAccountScalarWhereInput
    data: XOR<OAuthAccountUpdateManyMutationInput, OAuthAccountUncheckedUpdateManyWithoutAgentInput>
  }

  export type OAuthAccountScalarWhereInput = {
    AND?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
    OR?: OAuthAccountScalarWhereInput[]
    NOT?: OAuthAccountScalarWhereInput | OAuthAccountScalarWhereInput[]
    id?: StringFilter<"OAuthAccount"> | string
    provider?: StringFilter<"OAuthAccount"> | string
    providerId?: StringFilter<"OAuthAccount"> | string
    agentId?: StringFilter<"OAuthAccount"> | string
    createdAt?: DateTimeFilter<"OAuthAccount"> | Date | string
  }

  export type PasswordResetTokenUpsertWithWhereUniqueWithoutAgentInput = {
    where: PasswordResetTokenWhereUniqueInput
    update: XOR<PasswordResetTokenUpdateWithoutAgentInput, PasswordResetTokenUncheckedUpdateWithoutAgentInput>
    create: XOR<PasswordResetTokenCreateWithoutAgentInput, PasswordResetTokenUncheckedCreateWithoutAgentInput>
  }

  export type PasswordResetTokenUpdateWithWhereUniqueWithoutAgentInput = {
    where: PasswordResetTokenWhereUniqueInput
    data: XOR<PasswordResetTokenUpdateWithoutAgentInput, PasswordResetTokenUncheckedUpdateWithoutAgentInput>
  }

  export type PasswordResetTokenUpdateManyWithWhereWithoutAgentInput = {
    where: PasswordResetTokenScalarWhereInput
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyWithoutAgentInput>
  }

  export type PasswordResetTokenScalarWhereInput = {
    AND?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    OR?: PasswordResetTokenScalarWhereInput[]
    NOT?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    tokenHash?: StringFilter<"PasswordResetToken"> | string
    agentId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordResetToken"> | Date | string | null
    agentProfileId?: StringNullableFilter<"PasswordResetToken"> | string | null
  }

  export type PasswordResetEventUpsertWithWhereUniqueWithoutAgentInput = {
    where: PasswordResetEventWhereUniqueInput
    update: XOR<PasswordResetEventUpdateWithoutAgentInput, PasswordResetEventUncheckedUpdateWithoutAgentInput>
    create: XOR<PasswordResetEventCreateWithoutAgentInput, PasswordResetEventUncheckedCreateWithoutAgentInput>
  }

  export type PasswordResetEventUpdateWithWhereUniqueWithoutAgentInput = {
    where: PasswordResetEventWhereUniqueInput
    data: XOR<PasswordResetEventUpdateWithoutAgentInput, PasswordResetEventUncheckedUpdateWithoutAgentInput>
  }

  export type PasswordResetEventUpdateManyWithWhereWithoutAgentInput = {
    where: PasswordResetEventScalarWhereInput
    data: XOR<PasswordResetEventUpdateManyMutationInput, PasswordResetEventUncheckedUpdateManyWithoutAgentInput>
  }

  export type PasswordResetEventScalarWhereInput = {
    AND?: PasswordResetEventScalarWhereInput | PasswordResetEventScalarWhereInput[]
    OR?: PasswordResetEventScalarWhereInput[]
    NOT?: PasswordResetEventScalarWhereInput | PasswordResetEventScalarWhereInput[]
    id?: StringFilter<"PasswordResetEvent"> | string
    agentId?: StringFilter<"PasswordResetEvent"> | string
    createdAt?: DateTimeFilter<"PasswordResetEvent"> | Date | string
    ipAddress?: StringFilter<"PasswordResetEvent"> | string
    userAgent?: StringNullableFilter<"PasswordResetEvent"> | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutAgentInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutAgentInput, AuditLogUncheckedUpdateWithoutAgentInput>
    create: XOR<AuditLogCreateWithoutAgentInput, AuditLogUncheckedCreateWithoutAgentInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutAgentInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutAgentInput, AuditLogUncheckedUpdateWithoutAgentInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutAgentInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutAgentInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    details?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringFilter<"AuditLog"> | string
    userAgent?: StringFilter<"AuditLog"> | string
    status?: EnumAuditStatusFilter<"AuditLog"> | $Enums.AuditStatus
    severity?: EnumSeverityFilter<"AuditLog"> | $Enums.Severity
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AuditLog"> | Date | string | null
    agentId?: StringNullableFilter<"AuditLog"> | string | null
    targetId?: StringNullableFilter<"AuditLog"> | string | null
    targetType?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type DeletionScheduleUpsertWithWhereUniqueWithoutAgentInput = {
    where: DeletionScheduleWhereUniqueInput
    update: XOR<DeletionScheduleUpdateWithoutAgentInput, DeletionScheduleUncheckedUpdateWithoutAgentInput>
    create: XOR<DeletionScheduleCreateWithoutAgentInput, DeletionScheduleUncheckedCreateWithoutAgentInput>
  }

  export type DeletionScheduleUpdateWithWhereUniqueWithoutAgentInput = {
    where: DeletionScheduleWhereUniqueInput
    data: XOR<DeletionScheduleUpdateWithoutAgentInput, DeletionScheduleUncheckedUpdateWithoutAgentInput>
  }

  export type DeletionScheduleUpdateManyWithWhereWithoutAgentInput = {
    where: DeletionScheduleScalarWhereInput
    data: XOR<DeletionScheduleUpdateManyMutationInput, DeletionScheduleUncheckedUpdateManyWithoutAgentInput>
  }

  export type DeletionScheduleScalarWhereInput = {
    AND?: DeletionScheduleScalarWhereInput | DeletionScheduleScalarWhereInput[]
    OR?: DeletionScheduleScalarWhereInput[]
    NOT?: DeletionScheduleScalarWhereInput | DeletionScheduleScalarWhereInput[]
    id?: StringFilter<"DeletionSchedule"> | string
    agentId?: StringFilter<"DeletionSchedule"> | string
    scheduledAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
    deletionType?: StringFilter<"DeletionSchedule"> | string
    completedAt?: DateTimeNullableFilter<"DeletionSchedule"> | Date | string | null
    createdAt?: DateTimeFilter<"DeletionSchedule"> | Date | string
  }

  export type AccountLockUpsertWithoutAgentInput = {
    update: XOR<AccountLockUpdateWithoutAgentInput, AccountLockUncheckedUpdateWithoutAgentInput>
    create: XOR<AccountLockCreateWithoutAgentInput, AccountLockUncheckedCreateWithoutAgentInput>
    where?: AccountLockWhereInput
  }

  export type AccountLockUpdateToOneWithWhereWithoutAgentInput = {
    where?: AccountLockWhereInput
    data: XOR<AccountLockUpdateWithoutAgentInput, AccountLockUncheckedUpdateWithoutAgentInput>
  }

  export type AccountLockUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountLockUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FailedAttemptUpsertWithWhereUniqueWithoutAgentInput = {
    where: FailedAttemptWhereUniqueInput
    update: XOR<FailedAttemptUpdateWithoutAgentInput, FailedAttemptUncheckedUpdateWithoutAgentInput>
    create: XOR<FailedAttemptCreateWithoutAgentInput, FailedAttemptUncheckedCreateWithoutAgentInput>
  }

  export type FailedAttemptUpdateWithWhereUniqueWithoutAgentInput = {
    where: FailedAttemptWhereUniqueInput
    data: XOR<FailedAttemptUpdateWithoutAgentInput, FailedAttemptUncheckedUpdateWithoutAgentInput>
  }

  export type FailedAttemptUpdateManyWithWhereWithoutAgentInput = {
    where: FailedAttemptScalarWhereInput
    data: XOR<FailedAttemptUpdateManyMutationInput, FailedAttemptUncheckedUpdateManyWithoutAgentInput>
  }

  export type FailedAttemptScalarWhereInput = {
    AND?: FailedAttemptScalarWhereInput | FailedAttemptScalarWhereInput[]
    OR?: FailedAttemptScalarWhereInput[]
    NOT?: FailedAttemptScalarWhereInput | FailedAttemptScalarWhereInput[]
    id?: StringFilter<"FailedAttempt"> | string
    agentId?: StringFilter<"FailedAttempt"> | string
    action?: StringFilter<"FailedAttempt"> | string
    details?: StringNullableFilter<"FailedAttempt"> | string | null
    ipAddress?: StringFilter<"FailedAttempt"> | string
    userAgent?: StringNullableFilter<"FailedAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedAttempt"> | Date | string
    attempts?: IntFilter<"FailedAttempt"> | number
  }

  export type FailedDeletionAttemptUpsertWithWhereUniqueWithoutAgentInput = {
    where: FailedDeletionAttemptWhereUniqueInput
    update: XOR<FailedDeletionAttemptUpdateWithoutAgentInput, FailedDeletionAttemptUncheckedUpdateWithoutAgentInput>
    create: XOR<FailedDeletionAttemptCreateWithoutAgentInput, FailedDeletionAttemptUncheckedCreateWithoutAgentInput>
  }

  export type FailedDeletionAttemptUpdateWithWhereUniqueWithoutAgentInput = {
    where: FailedDeletionAttemptWhereUniqueInput
    data: XOR<FailedDeletionAttemptUpdateWithoutAgentInput, FailedDeletionAttemptUncheckedUpdateWithoutAgentInput>
  }

  export type FailedDeletionAttemptUpdateManyWithWhereWithoutAgentInput = {
    where: FailedDeletionAttemptScalarWhereInput
    data: XOR<FailedDeletionAttemptUpdateManyMutationInput, FailedDeletionAttemptUncheckedUpdateManyWithoutAgentInput>
  }

  export type FailedDeletionAttemptScalarWhereInput = {
    AND?: FailedDeletionAttemptScalarWhereInput | FailedDeletionAttemptScalarWhereInput[]
    OR?: FailedDeletionAttemptScalarWhereInput[]
    NOT?: FailedDeletionAttemptScalarWhereInput | FailedDeletionAttemptScalarWhereInput[]
    id?: StringFilter<"FailedDeletionAttempt"> | string
    agentId?: StringFilter<"FailedDeletionAttempt"> | string
    action?: StringFilter<"FailedDeletionAttempt"> | string
    ipAddress?: StringFilter<"FailedDeletionAttempt"> | string
    userAgent?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    attempts?: IntFilter<"FailedDeletionAttempt"> | number
    details?: StringNullableFilter<"FailedDeletionAttempt"> | string | null
    createdAt?: DateTimeFilter<"FailedDeletionAttempt"> | Date | string
  }

  export type VerificationStatusUpsertWithWhereUniqueWithoutAgentInput = {
    where: VerificationStatusWhereUniqueInput
    update: XOR<VerificationStatusUpdateWithoutAgentInput, VerificationStatusUncheckedUpdateWithoutAgentInput>
    create: XOR<VerificationStatusCreateWithoutAgentInput, VerificationStatusUncheckedCreateWithoutAgentInput>
  }

  export type VerificationStatusUpdateWithWhereUniqueWithoutAgentInput = {
    where: VerificationStatusWhereUniqueInput
    data: XOR<VerificationStatusUpdateWithoutAgentInput, VerificationStatusUncheckedUpdateWithoutAgentInput>
  }

  export type VerificationStatusUpdateManyWithWhereWithoutAgentInput = {
    where: VerificationStatusScalarWhereInput
    data: XOR<VerificationStatusUpdateManyMutationInput, VerificationStatusUncheckedUpdateManyWithoutAgentInput>
  }

  export type VerificationStatusScalarWhereInput = {
    AND?: VerificationStatusScalarWhereInput | VerificationStatusScalarWhereInput[]
    OR?: VerificationStatusScalarWhereInput[]
    NOT?: VerificationStatusScalarWhereInput | VerificationStatusScalarWhereInput[]
    id?: StringFilter<"VerificationStatus"> | string
    agentId?: StringFilter<"VerificationStatus"> | string
    emailVerified?: BoolFilter<"VerificationStatus"> | boolean
    emailVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    phoneVerified?: BoolFilter<"VerificationStatus"> | boolean
    phoneVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    ninVerified?: BoolFilter<"VerificationStatus"> | boolean
    ninVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    bvnVerified?: BoolFilter<"VerificationStatus"> | boolean
    bvnVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    documentVerified?: BoolFilter<"VerificationStatus"> | boolean
    documentVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    dobVerified?: BoolFilter<"VerificationStatus"> | boolean
    dobVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    genderVerified?: BoolFilter<"VerificationStatus"> | boolean
    genderVerifiedDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    nameVerified?: BoolFilter<"VerificationStatus"> | boolean
    nameVerificationDate?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    lastCheckedAt?: DateTimeNullableFilter<"VerificationStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"VerificationStatus"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationStatus"> | Date | string
  }

  export type AgentCreateWithoutProfileInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutProfileInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutProfileInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutProfileInput, AgentUncheckedCreateWithoutProfileInput>
  }

  export type PasswordResetTokenCreateWithoutAgentProfileInput = {
    id?: string
    tokenHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agent: AgentCreateNestedOneWithoutPasswordResetTokenInput
  }

  export type PasswordResetTokenUncheckedCreateWithoutAgentProfileInput = {
    id?: string
    tokenHash: string
    agentId: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
  }

  export type PasswordResetTokenCreateOrConnectWithoutAgentProfileInput = {
    where: PasswordResetTokenWhereUniqueInput
    create: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput>
  }

  export type PasswordResetTokenCreateManyAgentProfileInputEnvelope = {
    data: PasswordResetTokenCreateManyAgentProfileInput | PasswordResetTokenCreateManyAgentProfileInput[]
    skipDuplicates?: boolean
  }

  export type AgentUpsertWithoutProfileInput = {
    update: XOR<AgentUpdateWithoutProfileInput, AgentUncheckedUpdateWithoutProfileInput>
    create: XOR<AgentCreateWithoutProfileInput, AgentUncheckedCreateWithoutProfileInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutProfileInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutProfileInput, AgentUncheckedUpdateWithoutProfileInput>
  }

  export type AgentUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type PasswordResetTokenUpsertWithWhereUniqueWithoutAgentProfileInput = {
    where: PasswordResetTokenWhereUniqueInput
    update: XOR<PasswordResetTokenUpdateWithoutAgentProfileInput, PasswordResetTokenUncheckedUpdateWithoutAgentProfileInput>
    create: XOR<PasswordResetTokenCreateWithoutAgentProfileInput, PasswordResetTokenUncheckedCreateWithoutAgentProfileInput>
  }

  export type PasswordResetTokenUpdateWithWhereUniqueWithoutAgentProfileInput = {
    where: PasswordResetTokenWhereUniqueInput
    data: XOR<PasswordResetTokenUpdateWithoutAgentProfileInput, PasswordResetTokenUncheckedUpdateWithoutAgentProfileInput>
  }

  export type PasswordResetTokenUpdateManyWithWhereWithoutAgentProfileInput = {
    where: PasswordResetTokenScalarWhereInput
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyWithoutAgentProfileInput>
  }

  export type AgentCreateWithoutSessionsInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutSessionsInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutSessionsInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutSessionsInput, AgentUncheckedCreateWithoutSessionsInput>
  }

  export type AgentUpsertWithoutSessionsInput = {
    update: XOR<AgentUpdateWithoutSessionsInput, AgentUncheckedUpdateWithoutSessionsInput>
    create: XOR<AgentCreateWithoutSessionsInput, AgentUncheckedCreateWithoutSessionsInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutSessionsInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutSessionsInput, AgentUncheckedUpdateWithoutSessionsInput>
  }

  export type AgentUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutDeletionScheduleInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutDeletionScheduleInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutDeletionScheduleInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutDeletionScheduleInput, AgentUncheckedCreateWithoutDeletionScheduleInput>
  }

  export type AgentUpsertWithoutDeletionScheduleInput = {
    update: XOR<AgentUpdateWithoutDeletionScheduleInput, AgentUncheckedUpdateWithoutDeletionScheduleInput>
    create: XOR<AgentCreateWithoutDeletionScheduleInput, AgentUncheckedCreateWithoutDeletionScheduleInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutDeletionScheduleInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutDeletionScheduleInput, AgentUncheckedUpdateWithoutDeletionScheduleInput>
  }

  export type AgentUpdateWithoutDeletionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutDeletionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutVerificationStatusInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutVerificationStatusInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutVerificationStatusInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutVerificationStatusInput, AgentUncheckedCreateWithoutVerificationStatusInput>
  }

  export type AgentUpsertWithoutVerificationStatusInput = {
    update: XOR<AgentUpdateWithoutVerificationStatusInput, AgentUncheckedUpdateWithoutVerificationStatusInput>
    create: XOR<AgentCreateWithoutVerificationStatusInput, AgentUncheckedCreateWithoutVerificationStatusInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutVerificationStatusInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutVerificationStatusInput, AgentUncheckedUpdateWithoutVerificationStatusInput>
  }

  export type AgentUpdateWithoutVerificationStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutVerificationStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutFailedAttemptInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutFailedAttemptInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutFailedAttemptInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutFailedAttemptInput, AgentUncheckedCreateWithoutFailedAttemptInput>
  }

  export type AgentUpsertWithoutFailedAttemptInput = {
    update: XOR<AgentUpdateWithoutFailedAttemptInput, AgentUncheckedUpdateWithoutFailedAttemptInput>
    create: XOR<AgentCreateWithoutFailedAttemptInput, AgentUncheckedCreateWithoutFailedAttemptInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutFailedAttemptInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutFailedAttemptInput, AgentUncheckedUpdateWithoutFailedAttemptInput>
  }

  export type AgentUpdateWithoutFailedAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutFailedAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutFailedDeletionAttemptInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutFailedDeletionAttemptInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutFailedDeletionAttemptInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutFailedDeletionAttemptInput, AgentUncheckedCreateWithoutFailedDeletionAttemptInput>
  }

  export type AgentUpsertWithoutFailedDeletionAttemptInput = {
    update: XOR<AgentUpdateWithoutFailedDeletionAttemptInput, AgentUncheckedUpdateWithoutFailedDeletionAttemptInput>
    create: XOR<AgentCreateWithoutFailedDeletionAttemptInput, AgentUncheckedCreateWithoutFailedDeletionAttemptInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutFailedDeletionAttemptInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutFailedDeletionAttemptInput, AgentUncheckedUpdateWithoutFailedDeletionAttemptInput>
  }

  export type AgentUpdateWithoutFailedDeletionAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutFailedDeletionAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutAccountLockInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutAccountLockInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutAccountLockInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutAccountLockInput, AgentUncheckedCreateWithoutAccountLockInput>
  }

  export type AgentUpsertWithoutAccountLockInput = {
    update: XOR<AgentUpdateWithoutAccountLockInput, AgentUncheckedUpdateWithoutAccountLockInput>
    create: XOR<AgentCreateWithoutAccountLockInput, AgentUncheckedCreateWithoutAccountLockInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutAccountLockInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutAccountLockInput, AgentUncheckedUpdateWithoutAccountLockInput>
  }

  export type AgentUpdateWithoutAccountLockInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutAccountLockInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentCreateWithoutPasswordResetTokenInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutPasswordResetTokenInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutPasswordResetTokenInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutPasswordResetTokenInput, AgentUncheckedCreateWithoutPasswordResetTokenInput>
  }

  export type AgentProfileCreateWithoutPasswordResetTokenInput = {
    id?: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
    agent: AgentCreateNestedOneWithoutProfileInput
  }

  export type AgentProfileUncheckedCreateWithoutPasswordResetTokenInput = {
    id?: string
    agentId: string
    email: string
    emailHash: string
    phone: string
    phoneHash: string
    pin?: string
    pinHash?: string
    passwordHash: string
    emailVerified?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetAttempts?: number | null
    accountLockedUntil?: Date | string | null
    isLocked?: boolean
    lockoutCount?: number
    lockedUntil?: Date | string | null
    lastPasswordResetAt?: Date | string | null
    avatarUrl?: string
    failedDeletionAttempts?: Date | string | null
    deletionLockedUntil?: Date | string | null
    deletionLockoutCount?: number
  }

  export type AgentProfileCreateOrConnectWithoutPasswordResetTokenInput = {
    where: AgentProfileWhereUniqueInput
    create: XOR<AgentProfileCreateWithoutPasswordResetTokenInput, AgentProfileUncheckedCreateWithoutPasswordResetTokenInput>
  }

  export type AgentUpsertWithoutPasswordResetTokenInput = {
    update: XOR<AgentUpdateWithoutPasswordResetTokenInput, AgentUncheckedUpdateWithoutPasswordResetTokenInput>
    create: XOR<AgentCreateWithoutPasswordResetTokenInput, AgentUncheckedCreateWithoutPasswordResetTokenInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutPasswordResetTokenInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutPasswordResetTokenInput, AgentUncheckedUpdateWithoutPasswordResetTokenInput>
  }

  export type AgentUpdateWithoutPasswordResetTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutPasswordResetTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentProfileUpsertWithoutPasswordResetTokenInput = {
    update: XOR<AgentProfileUpdateWithoutPasswordResetTokenInput, AgentProfileUncheckedUpdateWithoutPasswordResetTokenInput>
    create: XOR<AgentProfileCreateWithoutPasswordResetTokenInput, AgentProfileUncheckedCreateWithoutPasswordResetTokenInput>
    where?: AgentProfileWhereInput
  }

  export type AgentProfileUpdateToOneWithWhereWithoutPasswordResetTokenInput = {
    where?: AgentProfileWhereInput
    data: XOR<AgentProfileUpdateWithoutPasswordResetTokenInput, AgentProfileUncheckedUpdateWithoutPasswordResetTokenInput>
  }

  export type AgentProfileUpdateWithoutPasswordResetTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
    agent?: AgentUpdateOneRequiredWithoutProfileNestedInput
  }

  export type AgentProfileUncheckedUpdateWithoutPasswordResetTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    pinHash?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockoutCount?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPasswordResetAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    failedDeletionAttempts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionLockoutCount?: IntFieldUpdateOperationsInput | number
  }

  export type AgentCreateWithoutPasswordResetEventInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutPasswordResetEventInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    oauthAccounts?: OAuthAccountUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutPasswordResetEventInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutPasswordResetEventInput, AgentUncheckedCreateWithoutPasswordResetEventInput>
  }

  export type AgentUpsertWithoutPasswordResetEventInput = {
    update: XOR<AgentUpdateWithoutPasswordResetEventInput, AgentUncheckedUpdateWithoutPasswordResetEventInput>
    create: XOR<AgentCreateWithoutPasswordResetEventInput, AgentUncheckedCreateWithoutPasswordResetEventInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutPasswordResetEventInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutPasswordResetEventInput, AgentUncheckedUpdateWithoutPasswordResetEventInput>
  }

  export type AgentUpdateWithoutPasswordResetEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutPasswordResetEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    oauthAccounts?: OAuthAccountUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    role?: $Enums.UserRoleEnum
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    role?: $Enums.UserRoleEnum
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    userAgent?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
  }

  export type UserRoleUpsertWithoutUserInput = {
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
    where?: UserRoleWhereInput
  }

  export type UserRoleUpdateToOneWithWhereWithoutUserInput = {
    where?: UserRoleWhereInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateWithoutUserInput = {
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    roles?: UserRoleCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username: string
    passwordHash: string
    email: string
    verified?: boolean
    fullName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bio?: string
    country?: string
    state?: string
    city?: string
    address?: string
    phoneNumber: string
    phoneVerified?: boolean
    hasPin?: boolean
    pinHash?: string | null
    isBanned?: boolean
    passwordChangedAt?: Date | string | null
    role?: $Enums.UserRoleEnum
    roles?: UserRoleUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    roles?: UserRoleUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hasPin?: BoolFieldUpdateOperationsInput | boolean
    pinHash?: NullableStringFieldUpdateOperationsInput | string | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    passwordChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumUserRoleEnumFieldUpdateOperationsInput | $Enums.UserRoleEnum
    roles?: UserRoleUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AgentCreateWithoutOauthAccountsInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusCreateNestedManyWithoutAgentInput
  }

  export type AgentUncheckedCreateWithoutOauthAccountsInput = {
    id?: string
    fieldId: string
    surname: string
    firstName: string
    otherName: string
    gender?: string | null
    dob?: Date | string | null
    email: string
    phone: string
    nin?: string | null
    bvn?: string | null
    state: string
    lga: string
    address: string
    emailHash: string
    phoneHash: string
    ninHash: string
    bvnHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    lastLoginAttemptIp?: string | null
    isActive?: boolean
    admittedAt?: Date | string | null
    deletedAt?: Date | string | null
    deletionReason?: string | null
    deactivatedAt?: Date | string | null
    deactivationReason?: string | null
    avatarUrl?: string
    status?: string
    profile?: AgentProfileUncheckedCreateNestedOneWithoutAgentInput
    sessions?: AgentSessionUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetToken?: PasswordResetTokenUncheckedCreateNestedManyWithoutAgentInput
    PasswordResetEvent?: PasswordResetEventUncheckedCreateNestedManyWithoutAgentInput
    AuditLog?: AuditLogUncheckedCreateNestedManyWithoutAgentInput
    DeletionSchedule?: DeletionScheduleUncheckedCreateNestedManyWithoutAgentInput
    AccountLock?: AccountLockUncheckedCreateNestedOneWithoutAgentInput
    FailedAttempt?: FailedAttemptUncheckedCreateNestedManyWithoutAgentInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedCreateNestedManyWithoutAgentInput
    VerificationStatus?: VerificationStatusUncheckedCreateNestedManyWithoutAgentInput
  }

  export type AgentCreateOrConnectWithoutOauthAccountsInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutOauthAccountsInput, AgentUncheckedCreateWithoutOauthAccountsInput>
  }

  export type AgentUpsertWithoutOauthAccountsInput = {
    update: XOR<AgentUpdateWithoutOauthAccountsInput, AgentUncheckedUpdateWithoutOauthAccountsInput>
    create: XOR<AgentCreateWithoutOauthAccountsInput, AgentUncheckedCreateWithoutOauthAccountsInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutOauthAccountsInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutOauthAccountsInput, AgentUncheckedUpdateWithoutOauthAccountsInput>
  }

  export type AgentUpdateWithoutOauthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUpdateManyWithoutAgentNestedInput
  }

  export type AgentUncheckedUpdateWithoutOauthAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    otherName?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nin?: NullableStringFieldUpdateOperationsInput | string | null
    bvn?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emailHash?: StringFieldUpdateOperationsInput | string
    phoneHash?: StringFieldUpdateOperationsInput | string
    ninHash?: StringFieldUpdateOperationsInput | string
    bvnHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAttemptIp?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deactivationReason?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    profile?: AgentProfileUncheckedUpdateOneWithoutAgentNestedInput
    sessions?: AgentSessionUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetToken?: PasswordResetTokenUncheckedUpdateManyWithoutAgentNestedInput
    PasswordResetEvent?: PasswordResetEventUncheckedUpdateManyWithoutAgentNestedInput
    AuditLog?: AuditLogUncheckedUpdateManyWithoutAgentNestedInput
    DeletionSchedule?: DeletionScheduleUncheckedUpdateManyWithoutAgentNestedInput
    AccountLock?: AccountLockUncheckedUpdateOneWithoutAgentNestedInput
    FailedAttempt?: FailedAttemptUncheckedUpdateManyWithoutAgentNestedInput
    FailedDeletionAttempt?: FailedDeletionAttemptUncheckedUpdateManyWithoutAgentNestedInput
    VerificationStatus?: VerificationStatusUncheckedUpdateManyWithoutAgentNestedInput
  }

  export type AgentSessionCreateManyAgentInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    revokedAt?: Date | string | null
  }

  export type OAuthAccountCreateManyAgentInput = {
    id?: string
    provider: string
    providerId: string
    createdAt?: Date | string
  }

  export type PasswordResetTokenCreateManyAgentInput = {
    id?: string
    tokenHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agentProfileId?: string | null
  }

  export type PasswordResetEventCreateManyAgentInput = {
    id?: string
    createdAt?: Date | string
    ipAddress: string
    userAgent?: string | null
  }

  export type AuditLogCreateManyAgentInput = {
    id?: string
    action: $Enums.AuditAction
    details?: string | null
    ipAddress?: string
    userAgent?: string
    status?: $Enums.AuditStatus
    severity?: $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    expiresAt?: Date | string | null
    targetId?: string | null
    targetType?: string | null
  }

  export type DeletionScheduleCreateManyAgentInput = {
    id?: string
    scheduledAt: Date | string
    deletionType: string
    completedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type FailedAttemptCreateManyAgentInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress: string
    userAgent?: string | null
    createdAt?: Date | string
    attempts?: number
  }

  export type FailedDeletionAttemptCreateManyAgentInput = {
    id?: string
    action?: string
    ipAddress: string
    userAgent?: string | null
    attempts?: number
    details?: string | null
    createdAt?: Date | string
  }

  export type VerificationStatusCreateManyAgentInput = {
    id?: string
    emailVerified?: boolean
    emailVerifiedDate?: Date | string | null
    phoneVerified?: boolean
    phoneVerifiedDate?: Date | string | null
    ninVerified?: boolean
    ninVerifiedDate?: Date | string | null
    bvnVerified?: boolean
    bvnVerifiedDate?: Date | string | null
    documentVerified?: boolean
    documentVerifiedDate?: Date | string | null
    dobVerified?: boolean
    dobVerifiedDate?: Date | string | null
    genderVerified?: boolean
    genderVerifiedDate?: Date | string | null
    nameVerified?: boolean
    nameVerificationDate?: Date | string | null
    lastCheckedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentSessionUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentSessionUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentSessionUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OAuthAccountUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OAuthAccountUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    AgentProfile?: AgentProfileUpdateOneWithoutPasswordResetTokenNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentProfileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agentProfileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetEventUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    status?: EnumAuditStatusFieldUpdateOperationsInput | $Enums.AuditStatus
    severity?: EnumSeverityFieldUpdateOperationsInput | $Enums.Severity
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeletionScheduleUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeletionScheduleUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeletionScheduleUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletionType?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedAttemptUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedAttemptUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedAttemptUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: IntFieldUpdateOperationsInput | number
  }

  export type FailedDeletionAttemptUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedDeletionAttemptUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailedDeletionAttemptUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationStatusUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ninVerified?: BoolFieldUpdateOperationsInput | boolean
    ninVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bvnVerified?: BoolFieldUpdateOperationsInput | boolean
    bvnVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentVerified?: BoolFieldUpdateOperationsInput | boolean
    documentVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dobVerified?: BoolFieldUpdateOperationsInput | boolean
    dobVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    genderVerified?: BoolFieldUpdateOperationsInput | boolean
    genderVerifiedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nameVerified?: BoolFieldUpdateOperationsInput | boolean
    nameVerificationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastCheckedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyAgentProfileInput = {
    id?: string
    tokenHash: string
    agentId: string
    createdAt?: Date | string
    expiresAt: Date | string
    usedAt?: Date | string | null
  }

  export type PasswordResetTokenUpdateWithoutAgentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: AgentUpdateOneRequiredWithoutPasswordResetTokenNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateWithoutAgentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutAgentProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    revoked?: boolean
    userAgent?: string | null
    ipAddress?: string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}